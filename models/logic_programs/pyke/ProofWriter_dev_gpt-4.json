[
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-689_Q2",
    "context": "Anne is big. Anne is rough. Anne is young. Bob is young. Charlie is cold. Charlie is green. Charlie is nice. Charlie is young. Gary is green. Gary is young. Big, quiet people are green. If someone is cold and young then they are nice. If Bob is rough and Bob is green then Bob is cold. Green people are nice. All nice people are quiet. Young people are cold. If someone is quiet and nice then they are rough. If someone is rough and young then they are cold. All rough, nice people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nRough($x, bool) ::: Is x rough?\nYoung($x, bool) ::: Is x young?\nCold($x, bool) ::: Is x cold?\nGreen($x, bool) ::: Is x green?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nBig(Anne, True) ::: Anne is big.\nRough(Anne, True) ::: Anne is rough.\nYoung(Anne, True) ::: Anne is young.\nYoung(Bob, True) ::: Bob is young.\nCold(Charlie, True) ::: Charlie is cold.\nGreen(Charlie, True) ::: Charlie is green.\nNice(Charlie, True) ::: Charlie is nice.\nYoung(Charlie, True) ::: Charlie is young.\nGreen(Gary, True) ::: Gary is green.\nYoung(Gary, True) ::: Gary is young.\nRules:\nBig($x, True) && Quiet($x, True) >>> Green($x, True) ::: Big, quiet people are green.\nCold($x, True) && Young($x, True) >>> Nice($x, True) ::: If someone is cold and young then they are nice.\nRough(Bob, True) && Green(Bob, True) >>> Cold(Bob, True) ::: If Bob is rough and Bob is green then Bob is cold.\nGreen($x, True) >>> Nice($x, True) ::: Green people are nice.\nNice($x, True) >>> Quiet($x, True) ::: All nice people are quiet.\nYoung($x, True) >>> Cold($x, True) ::: Young people are cold.\nQuiet($x, True) && Nice($x, True) >>> Rough($x, True) ::: If someone is quiet and nice then they are rough.\nRough($x, True) && Young($x, True) >>> Cold($x, True) ::: If someone is rough and young then they are cold.\nRough($x, True) && Nice($x, True) >>> Big($x, True) ::: All rough, nice people are big.\nQuery:\nNice(Charlie, False) ::: Charlie is not nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-620_Q20",
    "context": "Anne is red. Bob is big. Bob is green. Bob is red. Charlie is furry. Dave is big. Dave is blue. If something is big then it is smart. If something is blue then it is green. All furry things are big. Smart things are blue. If something is green then it is furry. Green things are smart. All green things are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is red.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed($x, bool) ::: Is x red?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nFurry($x, bool) ::: Is x furry?\nBlue($x, bool) ::: Is x blue?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nRed(Anne, True) ::: Anne is red.\nBig(Bob, True) ::: Bob is big.\nGreen(Bob, True) ::: Bob is green.\nRed(Bob, True) ::: Bob is red.\nFurry(Charlie, True) ::: Charlie is furry.\nBig(Dave, True) ::: Dave is big.\nBlue(Dave, True) ::: Dave is blue.\nRules:\nBig($x, True) >>> Smart($x, True) ::: If something is big then it is smart.\nBlue($x, True) >>> Green($x, True) ::: If something is blue then it is green.\nFurry($x, True) >>> Big($x, True) ::: All furry things are big.\nSmart($x, True) >>> Blue($x, True) ::: Smart things are blue.\nGreen($x, True) >>> Furry($x, True) ::: If something is green then it is furry.\nGreen($x, True) >>> Smart($x, True) ::: Green things are smart.\nGreen($x, True) >>> Quiet($x, True) ::: All green things are quiet.\nQuery:\nRed(Charlie, True) ::: Charlie is red."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-775_Q9",
    "context": "The dog chases the squirrel. The dog chases the tiger. The dog eats the tiger. The dog is young. The dog needs the squirrel. The rabbit chases the dog. The rabbit chases the tiger. The squirrel chases the dog. The squirrel is round. The squirrel needs the rabbit. The squirrel needs the tiger. The tiger chases the dog. The tiger eats the dog. The tiger eats the squirrel. The tiger is green. The tiger is round. If someone is green then they eat the rabbit. If someone needs the squirrel and the squirrel is green then they need the tiger. If someone eats the rabbit then they need the squirrel. If the tiger needs the rabbit then the rabbit is green. If someone is nice then they need the rabbit. If the tiger is round then the tiger is young. If someone chases the tiger and the tiger is kind then the tiger eats the rabbit. If someone needs the squirrel then they are nice. If someone chases the tiger then the tiger chases the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger needs the rabbit.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nYoung($x, bool) ::: Is x young?\nNeeds($x, $y, bool) ::: Does x need y?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nNice($x, bool) ::: Is x nice?\nKind($x, bool) ::: Is x kind?\n\nFacts:\nChases(Dog, Squirrel, True) ::: The dog chases the squirrel.\nChases(Dog, Tiger, True) ::: The dog chases the tiger.\nEats(Dog, Tiger, True) ::: The dog eats the tiger.\nYoung(Dog, True) ::: The dog is young.\nNeeds(Dog, Squirrel, True) ::: The dog needs the squirrel.\nChases(Rabbit, Dog, True) ::: The rabbit chases the dog.\nChases(Rabbit, Tiger, True) ::: The rabbit chases the tiger.\nChases(Squirrel, Dog, True) ::: The squirrel chases the dog.\nRound(Squirrel, True) ::: The squirrel is round.\nNeeds(Squirrel, Rabbit, True) ::: The squirrel needs the rabbit.\nNeeds(Squirrel, Tiger, True) ::: The squirrel needs the tiger.\nChases(Tiger, Dog, True) ::: The tiger chases the dog.\nEats(Tiger, Dog, True) ::: The tiger eats the dog.\nEats(Tiger, Squirrel, True) ::: The tiger eats the squirrel.\nGreen(Tiger, True) ::: The tiger is green.\nRound(Tiger, True) ::: The tiger is round.\n\nRules:\nGreen($x, True) >>> Eats($x, Rabbit, True) ::: If someone is green then they eat the rabbit.\nNeeds($x, Squirrel, True) && Green(Squirrel, True) >>> Needs($x, Tiger, True) ::: If someone needs the squirrel and the squirrel is green then they need the tiger.\nEats($x, Rabbit, True) >>> Needs($x, Squirrel, True) ::: If someone eats the rabbit then they need the squirrel.\nNeeds(Tiger, Rabbit, True) >>> Green(Rabbit, True) ::: If the tiger needs the rabbit then the rabbit is green.\nNice($x, True) >>> Needs($x, Rabbit, True) ::: If someone is nice then they need the rabbit.\nRound(Tiger, True) >>> Young(Tiger, True) ::: If the tiger is round then the tiger is young.\nChases($x, Tiger, True) && Kind(Tiger, True) >>> Eats(Tiger, Rabbit, True) ::: If someone chases the tiger and the tiger is kind then the tiger eats the rabbit.\nNeeds($x, Squirrel, True) >>> Nice($x, True) ::: If someone needs the squirrel then they are nice.\nChases($x, Tiger, True) >>> Chases(Tiger, Squirrel, True) ::: If someone chases the tiger then the tiger chases the squirrel.\n\nQuery:\nNeeds(Tiger, Rabbit, True) ::: The tiger needs the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-745_Q5",
    "context": "The bear is round. The bear likes the cow. The bear visits the lion. The cow is big. The cow is rough. The lion needs the bear. The mouse likes the lion. If someone visits the lion then they are round. If someone needs the bear then they need the lion. If someone needs the lion then they visit the lion. If someone visits the lion and the lion is round then they like the lion. If someone is rough then they need the lion. If someone likes the lion and they need the lion then the lion visits the mouse. If someone is rough then they visit the lion. If someone likes the lion and the lion is big then they are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion visits the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound($x, bool) ::: Is x round?\nLikes($x, $y, bool) ::: Does x like y?\nVisits($x, $y, bool) ::: Does x visit y?\nBig($x, bool) ::: Is x big?\nRough($x, bool) ::: Is x rough?\nNeeds($x, $y, bool) ::: Does x need y?\nKind($x, bool) ::: Is x kind?\n\nFacts:\nRound(Bear, True) ::: The bear is round.\nLikes(Bear, Cow, True) ::: The bear likes the cow.\nVisits(Bear, Lion, True) ::: The bear visits the lion.\nBig(Cow, True) ::: The cow is big.\nRough(Cow, True) ::: The cow is rough.\nNeeds(Lion, Bear, True) ::: The lion needs the bear.\nLikes(Mouse, Lion, True) ::: The mouse likes the lion.\n\nRules:\nVisits($x, Lion, True) >>> Round($x, True) ::: If someone visits the lion then they are round.\nNeeds($x, Bear, True) >>> Needs($x, Lion, True) ::: If someone needs the bear then they need the lion.\nNeeds($x, Lion, True) >>> Visits($x, Lion, True) ::: If someone needs the lion then they visit the lion.\nVisits($x, Lion, True) && Round(Lion, True) >>> Likes($x, Lion, True) ::: If someone visits the lion and the lion is round then they like the lion.\nRough($x, True) >>> Needs($x, Lion, True) ::: If someone is rough then they need the lion.\nLikes($x, Lion, True) && Needs($x, Lion, True) >>> Visits(Lion, Mouse, True) ::: If someone likes the lion and they need the lion then the lion visits the mouse.\nRough($x, True) >>> Visits($x, Lion, True) ::: If someone is rough then they visit the lion.\nLikes($x, Lion, True) && Big(Lion, True) >>> Kind($x, True) ::: If someone likes the lion and the lion is big then they are kind.\n\nQuery:\nVisits(Lion, Lion, True) ::: The lion visits the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-278_Q22",
    "context": "The bald eagle eats the lion. The bald eagle is young. The cow sees the dog. The cow sees the lion. The cow does not visit the bald eagle. The cow visits the dog. The dog does not eat the cow. The dog is round. The dog does not visit the bald eagle. The dog visits the cow. The lion is round. The lion is young. If someone visits the dog and they see the cow then they do not see the bald eagle. If someone visits the dog then they eat the bald eagle. If someone eats the bald eagle then the bald eagle is rough. If someone is rough then they visit the dog. If someone visits the lion and they are not nice then the lion eats the bald eagle. If someone sees the lion and the lion eats the dog then they eat the cow. If someone visits the dog then they see the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is nice.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nYoung($x, bool) ::: Is x young?\nSees($x, $y, bool) ::: Does x see y?\nVisits($x, $y, bool) ::: Does x visit y?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nNice($x, bool) ::: Is x nice?\n\nFacts:\nEats(BaldEagle, Lion, True) ::: The bald eagle eats the lion.\nYoung(BaldEagle, True) ::: The bald eagle is young.\nSees(Cow, Dog, True) ::: The cow sees the dog.\nSees(Cow, Lion, True) ::: The cow sees the lion.\nVisits(Cow, BaldEagle, False) ::: The cow does not visit the bald eagle.\nVisits(Cow, Dog, True) ::: The cow visits the dog.\nEats(Dog, Cow, False) ::: The dog does not eat the cow.\nRound(Dog, True) ::: The dog is round.\nVisits(Dog, BaldEagle, False) ::: The dog does not visit the bald eagle.\nVisits(Dog, Cow, True) ::: The dog visits the cow.\nRound(Lion, True) ::: The lion is round.\nYoung(Lion, True) ::: The lion is young.\n\nRules:\nVisits($x, Dog, True) && Sees($x, Cow, True) >>> Sees($x, BaldEagle, False) ::: If someone visits the dog and they see the cow then they do not see the bald eagle.\nVisits($x, Dog, True) >>> Eats($x, BaldEagle, True) ::: If someone visits the dog then they eat the bald eagle.\nEats($x, BaldEagle, True) >>> Rough(BaldEagle, True) ::: If someone eats the bald eagle then the bald eagle is rough.\nRough($x, True) >>> Visits($x, Dog, True) ::: If someone is rough then they visit the dog.\nVisits($x, Lion, True) && Nice($x, False) >>> Eats(Lion, BaldEagle, True) ::: If someone visits the lion and they are not nice then the lion eats the bald eagle.\nSees($x, Lion, True) && Eats(Lion, Dog, True) >>> Eats($x, Cow, True) ::: If someone sees the lion and the lion eats the dog then they eat the cow.\nVisits($x, Dog, True) >>> Sees($x, Cow, True) ::: If someone visits the dog then they see the cow.\n\nQuery:\nNice(BaldEagle, True) ::: The bald eagle is nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-983_Q7",
    "context": "Charlie is blue. Charlie is quiet. Dave is blue. Dave is cold. Dave is young. Erin is blue. Erin is quiet. Erin is white. Erin is young. Gary is cold. Gary is quiet. Gary is young. All quiet things are furry. If Charlie is cold then Charlie is young. White things are cold. All young things are nice. If Gary is nice then Gary is young. If something is young then it is nice. If something is furry and blue then it is white. If something is young and furry then it is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nQuiet($x, bool) ::: Is x quiet?\nCold($x, bool) ::: Is x cold?\nYoung($x, bool) ::: Is x young?\nWhite($x, bool) ::: Is x white?\nFurry($x, bool) ::: Is x furry?\nNice($x, bool) ::: Is x nice?\nFacts:\nBlue(Charlie, True) ::: Charlie is blue.\nQuiet(Charlie, True) ::: Charlie is quiet.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nYoung(Dave, True) ::: Dave is young.\nBlue(Erin, True) ::: Erin is blue.\nQuiet(Erin, True) ::: Erin is quiet.\nWhite(Erin, True) ::: Erin is white.\nYoung(Erin, True) ::: Erin is young.\nCold(Gary, True) ::: Gary is cold.\nQuiet(Gary, True) ::: Gary is quiet.\nYoung(Gary, True) ::: Gary is young.\nRules:\nQuiet($x, True) >>> Furry($x, True) ::: All quiet things are furry.\nCold(Charlie, True) >>> Young(Charlie, True) ::: If Charlie is cold then Charlie is young.\nWhite($x, True) >>> Cold($x, True) ::: White things are cold.\nYoung($x, True) >>> Nice($x, True) ::: All young things are nice.\nNice(Gary, True) >>> Young(Gary, True) ::: If Gary is nice then Gary is young.\nYoung($x, True) >>> Nice($x, True) ::: If something is young then it is nice.\nFurry($x, True) && Blue($x, True) >>> White($x, True) ::: If something is furry and blue then it is white.\nYoung($x, True) && Furry($x, True) >>> Nice($x, True) ::: If something is young and furry then it is nice.\nQuery:\nCold(Charlie, True) ::: Charlie is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1205_Q12",
    "context": "Anne is blue. Anne is furry. Anne is red. Charlie is white. Gary is nice. Gary is rough. Harry is nice. Kind, white people are furry. All blue people are furry. Red people are blue. If someone is kind then they are furry. If Harry is nice and Harry is rough then Harry is red. White, rough people are kind. Blue, red people are white. Nice people are rough. If someone is kind and furry then they are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nFurry($x, bool) ::: Is x furry?\nRed($x, bool) ::: Is x red?\nWhite($x, bool) ::: Is x white?\nNice($x, bool) ::: Is x nice?\nRough($x, bool) ::: Is x rough?\nKind($x, bool) ::: Is x kind?\nFacts:\nBlue(Anne, True) ::: Anne is blue.\nFurry(Anne, True) ::: Anne is furry.\nRed(Anne, True) ::: Anne is red.\nWhite(Charlie, True) ::: Charlie is white.\nNice(Gary, True) ::: Gary is nice.\nRough(Gary, True) ::: Gary is rough.\nNice(Harry, True) ::: Harry is nice.\nRules:\nKind($x, True) && White($x, True) >>> Furry($x, True) ::: Kind, white people are furry.\nBlue($x, True) >>> Furry($x, True) ::: All blue people are furry.\nRed($x, True) >>> Blue($x, True) ::: Red people are blue.\nKind($x, True) >>> Furry($x, True) ::: If someone is kind then they are furry.\nNice(Harry, True) && Rough(Harry, True) >>> Red(Harry, True) ::: If Harry is nice and Harry is rough then Harry is red.\nWhite($x, True) && Rough($x, True) >>> Kind($x, True) ::: White, rough people are kind.\nBlue($x, True) && Red($x, True) >>> White($x, True) ::: Blue, red people are white.\nNice($x, True) >>> Rough($x, True) ::: Nice people are rough.\nKind($x, True) && Furry($x, True) >>> Rough($x, True) ::: If someone is kind and furry then they are rough.\nQuery:\nKind(Harry, False) ::: Harry is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-399_Q8",
    "context": "Bob is quiet. Bob is smart. Charlie is kind. Charlie is smart. Charlie is white. Erin is blue. Harry is green. White, green things are smart. Smart, quiet things are white. All quiet, kind things are white. If Erin is kind and Erin is blue then Erin is white. All kind things are quiet. White things are quiet. Green things are kind. All white, smart things are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nSmart($x, bool) ::: Is x smart?\nKind($x, bool) ::: Is x kind?\nWhite($x, bool) ::: Is x white?\nBlue($x, bool) ::: Is x blue?\nGreen($x, bool) ::: Is x green?\nFurry($x, bool) ::: Is x furry?\nFacts:\nQuiet(Bob, True) ::: Bob is quiet.\nSmart(Bob, True) ::: Bob is smart.\nKind(Charlie, True) ::: Charlie is kind.\nSmart(Charlie, True) ::: Charlie is smart.\nWhite(Charlie, True) ::: Charlie is white.\nBlue(Erin, True) ::: Erin is blue.\nGreen(Harry, True) ::: Harry is green.\nRules:\nWhite($x, True) && Green($x, True) >>> Smart($x, True) ::: White, green things are smart.\nSmart($x, True) && Quiet($x, True) >>> White($x, True) ::: Smart, quiet things are white.\nQuiet($x, True) && Kind($x, True) >>> White($x, True) ::: All quiet, kind things are white.\nKind(Erin, True) && Blue(Erin, True) >>> White(Erin, True) ::: If Erin is kind and Erin is blue then Erin is white.\nKind($x, True) >>> Quiet($x, True) ::: All kind things are quiet.\nWhite($x, True) >>> Quiet($x, True) ::: White things are quiet.\nGreen($x, True) >>> Kind($x, True) ::: Green things are kind.\nWhite($x, True) && Smart($x, True) >>> Furry($x, True) ::: All white, smart things are furry.\nQuery:\nWhite(Harry, False) ::: Harry is not white."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-861_Q3",
    "context": "The cat needs the dog. The dog is kind. The dog needs the rabbit. The rabbit eats the dog. The rabbit is green. The tiger chases the rabbit. The tiger is big. If something is nice and it eats the tiger then it needs the dog. If something chases the cat then it eats the cat. If the dog chases the tiger then the tiger needs the rabbit. If the rabbit chases the tiger then the rabbit chases the cat. If something chases the cat then the cat is kind. If something eats the dog then it chases the cat. If something is rough then it eats the dog. If something is kind then it is rough. If something eats the rabbit and the rabbit is big then it is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit chases the cat.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nKind($x, bool) ::: Is x kind?\nEats($x, $y, bool) ::: Does x eat y?\nGreen($x, bool) ::: Is x green?\nChases($x, $y, bool) ::: Does x chase y?\nBig($x, bool) ::: Is x big?\nNice($x, bool) ::: Is x nice?\nRough($x, bool) ::: Is x rough?\nFacts:\nNeeds(Cat, Dog, True) ::: The cat needs the dog.\nKind(Dog, True) ::: The dog is kind.\nNeeds(Dog, Rabbit, True) ::: The dog needs the rabbit.\nEats(Rabbit, Dog, True) ::: The rabbit eats the dog.\nGreen(Rabbit, True) ::: The rabbit is green.\nChases(Tiger, Rabbit, True) ::: The tiger chases the rabbit.\nBig(Tiger, True) ::: The tiger is big.\nRules:\nNice($x, True) && Eats($x, Tiger, True) >>> Needs($x, Dog, True) ::: If something is nice and it eats the tiger then it needs the dog.\nChases($x, Cat, True) >>> Eats($x, Cat, True) ::: If something chases the cat then it eats the cat.\nChases(Dog, Tiger, True) >>> Needs(Tiger, Rabbit, True) ::: If the dog chases the tiger then the tiger needs the rabbit.\nChases(Rabbit, Tiger, True) >>> Chases(Rabbit, Cat, True) ::: If the rabbit chases the tiger then the rabbit chases the cat.\nChases($x, Cat, True) >>> Kind(Cat, True) ::: If something chases the cat then the cat is kind.\nEats($x, Dog, True) >>> Chases($x, Cat, True) ::: If something eats the dog then it chases the cat.\nRough($x, True) >>> Eats($x, Dog, True) ::: If something is rough then it eats the dog.\nKind($x, True) >>> Rough($x, True) ::: If something is kind then it is rough.\nEats($x, Rabbit, True) && Big(Rabbit, True) >>> Kind($x, True) ::: If something eats the rabbit and the rabbit is big then it is kind.\nQuery:\nChases(Rabbit, Cat, True) ::: The rabbit chases the cat."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-177_Q19",
    "context": "Anne is furry. Anne is smart. Bob is kind. Bob is nice. Charlie is big. Charlie is green. Charlie is nice. Charlie is young. Gary is furry. Gary is kind. Gary is nice. Gary is young. If something is young then it is nice. If Anne is green then Anne is big. Smart things are nice. All smart, kind things are green. Young, big things are kind. Kind, smart things are furry. If something is nice and big then it is young. All nice things are kind. If Anne is young and Anne is big then Anne is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry($x, bool) ::: Is x furry?\nSmart($x, bool) ::: Is x smart?\nKind($x, bool) ::: Is x kind?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nYoung($x, bool) ::: Is x young?\nFacts:\nFurry(Anne, True) ::: Anne is furry.\nSmart(Anne, True) ::: Anne is smart.\nKind(Bob, True) ::: Bob is kind.\nNice(Bob, True) ::: Bob is nice.\nBig(Charlie, True) ::: Charlie is big.\nGreen(Charlie, True) ::: Charlie is green.\nNice(Charlie, True) ::: Charlie is nice.\nYoung(Charlie, True) ::: Charlie is young.\nFurry(Gary, True) ::: Gary is furry.\nKind(Gary, True) ::: Gary is kind.\nNice(Gary, True) ::: Gary is nice.\nYoung(Gary, True) ::: Gary is young.\nRules:\nYoung($x, True) >>> Nice($x, True) ::: If something is young then it is nice.\nGreen(Anne, True) >>> Big(Anne, True) ::: If Anne is green then Anne is big.\nSmart($x, True) >>> Nice($x, True) ::: Smart things are nice.\nSmart($x, True) && Kind($x, True) >>> Green($x, True) ::: All smart, kind things are green.\nYoung($x, True) && Big($x, True) >>> Kind($x, True) ::: Young, big things are kind.\nKind($x, True) && Smart($x, True) >>> Furry($x, True) ::: Kind, smart things are furry.\nNice($x, True) && Big($x, True) >>> Young($x, True) ::: If something is nice and big then it is young.\nNice($x, True) >>> Kind($x, True) ::: All nice things are kind.\nYoung(Anne, True) && Big(Anne, True) >>> Nice(Anne, True) ::: If Anne is young and Anne is big then Anne is nice.\nQuery:\nBig(Bob, False) ::: Bob is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1111_Q2",
    "context": "Bob is big. Bob is blue. Bob is cold. Bob is red. Bob is rough. Charlie is not cold. Charlie is green. Gary is blue. Harry is cold. Harry is rough. If someone is quiet and blue then they are big. If someone is rough and quiet then they are red. Green people are rough. If someone is big and blue then they are green. Blue people are quiet. If Gary is not blue then Gary is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nRed($x, bool) ::: Is x red?\nRough($x, bool) ::: Is x rough?\nGreen($x, bool) ::: Is x green?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nBig(Bob, True) ::: Bob is big.\nBlue(Bob, True) ::: Bob is blue.\nCold(Bob, True) ::: Bob is cold.\nRed(Bob, True) ::: Bob is red.\nRough(Bob, True) ::: Bob is rough.\nCold(Charlie, False) ::: Charlie is not cold.\nGreen(Charlie, True) ::: Charlie is green.\nBlue(Gary, True) ::: Gary is blue.\nCold(Harry, True) ::: Harry is cold.\nRough(Harry, True) ::: Harry is rough.\nRules:\nQuiet($x, True) && Blue($x, True) >>> Big($x, True) ::: If someone is quiet and blue then they are big.\nRough($x, True) && Quiet($x, True) >>> Red($x, True) ::: If someone is rough and quiet then they are red.\nGreen($x, True) >>> Rough($x, True) ::: Green people are rough.\nBig($x, True) && Blue($x, True) >>> Green($x, True) ::: If someone is big and blue then they are green.\nBlue($x, True) >>> Quiet($x, True) ::: Blue people are quiet.\nBlue(Gary, False) >>> Big(Gary, True) ::: If Gary is not blue then Gary is big.\nQuery:\nBlue(Bob, False) ::: Bob is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-692_Q4",
    "context": "Charlie is quiet. Dave is big. Dave is red. Dave is smart. Dave is young. Erin is big. Erin is blue. Erin is quiet. Erin is smart. Harry is big. Harry is furry. Harry is young. Blue people are red. If someone is quiet then they are big. If someone is furry then they are quiet. All quiet, big people are furry. If someone is young then they are blue. If someone is young then they are quiet. If Erin is furry then Erin is young. Blue people are quiet. If someone is furry then they are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not red.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nYoung($x, bool) ::: Is x young?\nBlue($x, bool) ::: Is x blue?\nFurry($x, bool) ::: Is x furry?\nFacts:\nQuiet(Charlie, True) ::: Charlie is quiet.\nBig(Dave, True) ::: Dave is big.\nRed(Dave, True) ::: Dave is red.\nSmart(Dave, True) ::: Dave is smart.\nYoung(Dave, True) ::: Dave is young.\nBig(Erin, True) ::: Erin is big.\nBlue(Erin, True) ::: Erin is blue.\nQuiet(Erin, True) ::: Erin is quiet.\nSmart(Erin, True) ::: Erin is smart.\nBig(Harry, True) ::: Harry is big.\nFurry(Harry, True) ::: Harry is furry.\nYoung(Harry, True) ::: Harry is young.\nRules:\nBlue($x, True) >>> Red($x, True) ::: Blue people are red.\nQuiet($x, True) >>> Big($x, True) ::: If someone is quiet then they are big.\nFurry($x, True) >>> Quiet($x, True) ::: If someone is furry then they are quiet.\nQuiet($x, True) && Big($x, True) >>> Furry($x, True) ::: All quiet, big people are furry.\nYoung($x, True) >>> Blue($x, True) ::: If someone is young then they are blue.\nYoung($x, True) >>> Quiet($x, True) ::: If someone is young then they are quiet.\nFurry(Erin, True) >>> Young(Erin, True) ::: If Erin is furry then Erin is young.\nBlue($x, True) >>> Quiet($x, True) ::: Blue people are quiet.\nFurry($x, True) >>> Young($x, True) ::: If someone is furry then they are young.\nQuery:\nRed(Erin, False) ::: Erin is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-992_Q11",
    "context": "The bear is nice. The bear likes the cat. The bear sees the dog. The cat eats the bear. The cat is cold. The cat sees the bear. The dog eats the bear. The dog eats the lion. The dog is blue. The dog sees the cat. The lion eats the cat. The lion is cold. The lion likes the bear. The lion likes the cat. If someone is big then they eat the dog. If someone is cold then they are nice. If someone is blue and they see the bear then they see the dog. If someone eats the dog then the dog is nice. If someone is blue and they see the dog then they are big. If someone eats the bear and they are nice then they are blue. If someone eats the bear and they see the dog then the dog is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat eats the dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice($x, bool) ::: Is x nice?\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nEats($x, $y, bool) ::: Does x eat y?\nCold($x, bool) ::: Is x cold?\nBlue($x, bool) ::: Is x blue?\nBig($x, bool) ::: Is x big?\n\nFacts:\nNice(Bear, True) ::: The bear is nice.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nSees(Bear, Dog, True) ::: The bear sees the dog.\nEats(Cat, Bear, True) ::: The cat eats the bear.\nCold(Cat, True) ::: The cat is cold.\nSees(Cat, Bear, True) ::: The cat sees the bear.\nEats(Dog, Bear, True) ::: The dog eats the bear.\nEats(Dog, Lion, True) ::: The dog eats the lion.\nBlue(Dog, True) ::: The dog is blue.\nSees(Dog, Cat, True) ::: The dog sees the cat.\nEats(Lion, Cat, True) ::: The lion eats the cat.\nCold(Lion, True) ::: The lion is cold.\nLikes(Lion, Bear, True) ::: The lion likes the bear.\nLikes(Lion, Cat, True) ::: The lion likes the cat.\n\nRules:\nBig($x, True) >>> Eats($x, Dog, True) ::: If someone is big then they eat the dog.\nCold($x, True) >>> Nice($x, True) ::: If someone is cold then they are nice.\nBlue($x, True) && Sees($x, Bear, True) >>> Sees($x, Dog, True) ::: If someone is blue and they see the bear then they see the dog.\nEats($x, Dog, True) >>> Nice(Dog, True) ::: If someone eats the dog then the dog is nice.\nBlue($x, True) && Sees($x, Dog, True) >>> Big($x, True) ::: If someone is blue and they see the dog then they are big.\nEats($x, Bear, True) && Nice($x, True) >>> Blue($x, True) ::: If someone eats the bear and they are nice then they are blue.\nEats($x, Bear, True) && Sees($x, Dog, True) >>> Big(Dog, True) ::: If someone eats the bear and they see the dog then the dog is big.\n\nQuery:\nEats(Cat, Dog, True) ::: The cat eats the dog."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-975_Q15",
    "context": "The lion is kind. The mouse chases the lion. The rabbit is blue. The rabbit is round. The tiger is blue. The tiger is cold. The tiger is young. If something sees the rabbit then the rabbit is cold. If something sees the tiger then the tiger is kind. If something is round then it is kind. If the rabbit sees the lion and the rabbit sees the mouse then the mouse sees the tiger. If something is kind then it sees the mouse. If something is blue and kind then it sees the rabbit. If something chases the lion and the lion chases the rabbit then the rabbit chases the mouse. If something is kind and it sees the mouse then it sees the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not see the rabbit.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind($x, bool) ::: Is x kind?\nChases($x, $y, bool) ::: Does x chase y?\nBlue($x, bool) ::: Is x blue?\nRound($x, bool) ::: Is x round?\nCold($x, bool) ::: Is x cold?\nYoung($x, bool) ::: Is x young?\nSees($x, $y, bool) ::: Does x see y?\n\nFacts:\nKind(Lion, True) ::: The lion is kind.\nChases(Mouse, Lion, True) ::: The mouse chases the lion.\nBlue(Rabbit, True) ::: The rabbit is blue.\nRound(Rabbit, True) ::: The rabbit is round.\nBlue(Tiger, True) ::: The tiger is blue.\nCold(Tiger, True) ::: The tiger is cold.\nYoung(Tiger, True) ::: The tiger is young.\n\nRules:\nSees($x, Rabbit, True) >>> Cold(Rabbit, True) ::: If something sees the rabbit then the rabbit is cold.\nSees($x, Tiger, True) >>> Kind(Tiger, True) ::: If something sees the tiger then the tiger is kind.\nRound($x, True) >>> Kind($x, True) ::: If something is round then it is kind.\nSees(Rabbit, Lion, True) && Sees(Rabbit, Mouse, True) >>> Sees(Mouse, Tiger, True) ::: If the rabbit sees the lion and the rabbit sees the mouse then the mouse sees the tiger.\nKind($x, True) >>> Sees($x, Mouse, True) ::: If something is kind then it sees the mouse.\nBlue($x, True) && Kind($x, True) >>> Sees($x, Rabbit, True) ::: If something is blue and kind then it sees the rabbit.\nChases($x, Lion, True) && Chases(Lion, Rabbit, True) >>> Chases(Rabbit, Mouse, True) ::: If something chases the lion and the lion chases the rabbit then the rabbit chases the mouse.\nKind($x, True) && Sees($x, Mouse, True) >>> Sees($x, Lion, True) ::: If something is kind and it sees the mouse then it sees the lion.\n\nQuery:\nSees(Mouse, Rabbit, False) ::: The mouse does not see the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-777_Q6",
    "context": "The bear is kind. The bear likes the cat. The cat likes the bear. The cat needs the cow. The cat sees the bear. The cat sees the cow. The cow is rough. The mouse likes the cat. The mouse needs the bear. The mouse sees the cow. If someone sees the bear then they need the mouse. If someone needs the bear and the bear needs the cow then the bear needs the cat. If someone likes the cow then the cow sees the bear. If the bear is red and the bear needs the cow then the cow needs the bear. If someone needs the mouse then they are big. If someone sees the bear and they are big then they like the cow. If the cat needs the mouse then the mouse needs the cow. If someone is kind then they see the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not need the cow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind($x, bool) ::: Is x kind?\nLikes($x, $y, bool) ::: Does x like y?\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nRough($x, bool) ::: Is x rough?\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\n\nFacts:\nKind(Bear, True) ::: The bear is kind.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nLikes(Cat, Bear, True) ::: The cat likes the bear.\nNeeds(Cat, Cow, True) ::: The cat needs the cow.\nSees(Cat, Bear, True) ::: The cat sees the bear.\nSees(Cat, Cow, True) ::: The cat sees the cow.\nRough(Cow, True) ::: The cow is rough.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nNeeds(Mouse, Bear, True) ::: The mouse needs the bear.\nSees(Mouse, Cow, True) ::: The mouse sees the cow.\n\nRules:\nSees($x, Bear, True) >>> Needs($x, Mouse, True) ::: If someone sees the bear then they need the mouse.\nNeeds($x, Bear, True) && Needs(Bear, Cow, True) >>> Needs(Bear, Cat, True) ::: If someone needs the bear and the bear needs the cow then the bear needs the cat.\nLikes($x, Cow, True) >>> Sees(Cow, Bear, True) ::: If someone likes the cow then the cow sees the bear.\nRed(Bear, True) && Needs(Bear, Cow, True) >>> Needs(Cow, Bear, True) ::: If the bear is red and the bear needs the cow then the cow needs the bear.\nNeeds($x, Mouse, True) >>> Big($x, True) ::: If someone needs the mouse then they are big.\nSees($x, Bear, True) && Big($x, True) >>> Likes($x, Cow, True) ::: If someone sees the bear and they are big then they like the cow.\nNeeds(Cat, Mouse, True) >>> Needs(Mouse, Cow, True) ::: If the cat needs the mouse then the mouse needs the cow.\nKind($x, True) >>> Sees($x, Cat, True) ::: If someone is kind then they see the cat.\n\nQuery:\nNeeds(Mouse, Cow, False) ::: The mouse does not need the cow."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-317_Q13",
    "context": "The cow chases the squirrel. The cow is young. The cow sees the squirrel. The dog is round. The dog likes the rabbit. The dog likes the squirrel. The dog sees the rabbit. The rabbit chases the cow. The rabbit does not chase the dog. The squirrel chases the rabbit. The squirrel is young. The squirrel likes the cow. If someone chases the cow then the cow is big. If someone likes the rabbit and they do not see the squirrel then they are big. If someone is big then they like the rabbit. If someone is young then they do not see the dog. If someone is blue then they chase the cow. If someone likes the rabbit then they like the cow. If someone likes the cow then they see the cow. If someone sees the cow and they chase the squirrel then they see the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not see the rabbit.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nYoung($x, bool) ::: Is x young?\nSees($x, $y, bool) ::: Does x see y?\nRound($x, bool) ::: Is x round?\nLikes($x, $y, bool) ::: Does x like y?\nBig($x, bool) ::: Is x big?\nBlue($x, bool) ::: Is x blue?\n\nFacts:\nChases(Cow, Squirrel, True) ::: The cow chases the squirrel.\nYoung(Cow, True) ::: The cow is young.\nSees(Cow, Squirrel, True) ::: The cow sees the squirrel.\nRound(Dog, True) ::: The dog is round.\nLikes(Dog, Rabbit, True) ::: The dog likes the rabbit.\nLikes(Dog, Squirrel, True) ::: The dog likes the squirrel.\nSees(Dog, Rabbit, True) ::: The dog sees the rabbit.\nChases(Rabbit, Cow, True) ::: The rabbit chases the cow.\nChases(Rabbit, Dog, False) ::: The rabbit does not chase the dog.\nChases(Squirrel, Rabbit, True) ::: The squirrel chases the rabbit.\nYoung(Squirrel, True) ::: The squirrel is young.\nLikes(Squirrel, Cow, True) ::: The squirrel likes the cow.\n\nRules:\nChases($x, Cow, True) >>> Big(Cow, True) ::: If someone chases the cow then the cow is big.\nLikes($x, Rabbit, True) && Sees($x, Squirrel, False) >>> Big($x, True) ::: If someone likes the rabbit and they do not see the squirrel then they are big.\nBig($x, True) >>> Likes($x, Rabbit, True) ::: If someone is big then they like the rabbit.\nYoung($x, True) >>> Sees($x, Dog, False) ::: If someone is young then they do not see the dog.\nBlue($x, True) >>> Chases($x, Cow, True) ::: If someone is blue then they chase the cow.\nLikes($x, Rabbit, True) >>> Likes($x, Cow, True) ::: If someone likes the rabbit then they like the cow.\nLikes($x, Cow, True) >>> Sees($x, Cow, True) ::: If someone likes the cow then they see the cow.\nSees($x, Cow, True) && Chases($x, Squirrel, True) >>> Sees($x, Rabbit, True) ::: If someone sees the cow and they chase the squirrel then they see the rabbit.\n\nQuery:\nSees(Squirrel, Rabbit, False) ::: The squirrel does not see the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-966_Q21",
    "context": "The bald eagle eats the cow. The bald eagle is young. The cow is nice. The cow sees the bald eagle. The dog eats the bald eagle. The tiger eats the cow. The tiger needs the bald eagle. If something is green and it eats the cow then it does not see the bald eagle. If something eats the tiger then the tiger is young. If something is red then it eats the tiger. If something sees the bald eagle then it eats the cow. If something is green and it needs the dog then it needs the bald eagle. If something sees the tiger then it needs the bald eagle. If something is red then it eats the bald eagle. If something is young then it is red. If something eats the dog and it is red then the dog is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not see the dog.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nYoung($x, bool) ::: Is x young?\nNice($x, bool) ::: Is x nice?\nSees($x, $y, bool) ::: Does x see y?\nNeeds($x, $y, bool) ::: Does x need y?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\n\nFacts:\nEats(BaldEagle, Cow, True) ::: The bald eagle eats the cow.\nYoung(BaldEagle, True) ::: The bald eagle is young.\nNice(Cow, True) ::: The cow is nice.\nSees(Cow, BaldEagle, True) ::: The cow sees the bald eagle.\nEats(Dog, BaldEagle, True) ::: The dog eats the bald eagle.\nEats(Tiger, Cow, True) ::: The tiger eats the cow.\nNeeds(Tiger, BaldEagle, True) ::: The tiger needs the bald eagle.\n\nRules:\nGreen($x, True) && Eats($x, Cow, True) >>> Sees($x, BaldEagle, False) ::: If something is green and it eats the cow then it does not see the bald eagle.\nEats($x, Tiger, True) >>> Young(Tiger, True) ::: If something eats the tiger then the tiger is young.\nRed($x, True) >>> Eats($x, Tiger, True) ::: If something is red then it eats the tiger.\nSees($x, BaldEagle, True) >>> Eats($x, Cow, True) ::: If something sees the bald eagle then it eats the cow.\nGreen($x, True) && Needs($x, Dog, True) >>> Needs($x, BaldEagle, True) ::: If something is green and it needs the dog then it needs the bald eagle.\nSees($x, Tiger, True) >>> Needs($x, BaldEagle, True) ::: If something sees the tiger then it needs the bald eagle.\nRed($x, True) >>> Eats($x, BaldEagle, True) ::: If something is red then it eats the bald eagle.\nYoung($x, True) >>> Red($x, True) ::: If something is young then it is red.\nEats($x, Dog, True) && Red($x, True) >>> Young(Dog, True) ::: If something eats the dog and it is red then the dog is young.\n\nQuery:\nSees(Tiger, Dog, False) ::: The tiger does not see the dog."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-890_Q2",
    "context": "The bald eagle needs the cow. The bald eagle needs the mouse. The cow is round. The mouse does not visit the rabbit. The rabbit is green. The rabbit needs the bald eagle. The rabbit visits the bald eagle. If someone visits the mouse then they like the cow. If someone likes the mouse and they are blue then the mouse needs the rabbit. If someone needs the bald eagle then the bald eagle likes the rabbit. If someone needs the bald eagle then the bald eagle likes the mouse. If someone likes the cow then they are blue. If someone is red and they visit the cow then the cow is green. If someone visits the mouse then they do not visit the bald eagle. If someone is round and they need the bald eagle then the bald eagle is round. If someone visits the bald eagle and the bald eagle likes the rabbit then the bald eagle visits the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit does not visit the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\n\nFacts:\nNeeds(BaldEagle, Cow, True) ::: The bald eagle needs the cow.\nNeeds(BaldEagle, Mouse, True) ::: The bald eagle needs the mouse.\nRound(Cow, True) ::: The cow is round.\nVisits(Mouse, Rabbit, False) ::: The mouse does not visit the rabbit.\nGreen(Rabbit, True) ::: The rabbit is green.\nNeeds(Rabbit, BaldEagle, True) ::: The rabbit needs the bald eagle.\nVisits(Rabbit, BaldEagle, True) ::: The rabbit visits the bald eagle.\n\nRules:\nVisits($x, Mouse, True) >>> Likes($x, Cow, True) ::: If someone visits the mouse then they like the cow.\nLikes($x, Mouse, True) && Blue($x, True) >>> Needs(Mouse, Rabbit, True) ::: If someone likes the mouse and they are blue then the mouse needs the rabbit.\nNeeds($x, BaldEagle, True) >>> Likes(BaldEagle, Rabbit, True) ::: If someone needs the bald eagle then the bald eagle likes the rabbit.\nNeeds($x, BaldEagle, True) >>> Likes(BaldEagle, Mouse, True) ::: If someone needs the bald eagle then the bald eagle likes the mouse.\nLikes($x, Cow, True) >>> Blue($x, True) ::: If someone likes the cow then they are blue.\nRed($x, True) && Visits($x, Cow, True) >>> Green(Cow, True) ::: If someone is red and they visit the cow then the cow is green.\nVisits($x, Mouse, True) >>> Visits($x, BaldEagle, False) ::: If someone visits the mouse then they do not visit the bald eagle.\nRound($x, True) && Needs($x, BaldEagle, True) >>> Round(BaldEagle, True) ::: If someone is round and they need the bald eagle then the bald eagle is round.\nVisits($x, BaldEagle, True) && Likes(BaldEagle, Rabbit, True) >>> Visits(BaldEagle, Mouse, True) ::: If someone visits the bald eagle and the bald eagle likes the rabbit then the bald eagle visits the mouse.\n\nQuery:\nVisits(Rabbit, BaldEagle, False) ::: The rabbit does not visit the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-439_Q23",
    "context": "The bald eagle is cold. The bald eagle is green. The bald eagle needs the lion. The bald eagle visits the rabbit. The dog sees the lion. The lion is cold. The lion is green. The lion needs the dog. The lion needs the rabbit. The lion visits the bald eagle. The lion visits the dog. The rabbit is round. The rabbit visits the dog. The rabbit visits the lion. If something is round then it is rough. If something visits the rabbit and it needs the bald eagle then the rabbit visits the bald eagle. If something is rough then it visits the lion. If the dog needs the rabbit and the rabbit sees the bald eagle then the bald eagle sees the dog. If the rabbit visits the lion and the rabbit needs the dog then the dog is round. If something visits the rabbit then the rabbit needs the bald eagle. If something visits the lion and the lion needs the dog then it needs the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit does not see the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nGreen($x, bool) ::: Is x green?\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nSees($x, $y, bool) ::: Does x see y?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\n\nFacts:\nCold(BaldEagle, True) ::: The bald eagle is cold.\nGreen(BaldEagle, True) ::: The bald eagle is green.\nNeeds(BaldEagle, Lion, True) ::: The bald eagle needs the lion.\nVisits(BaldEagle, Rabbit, True) ::: The bald eagle visits the rabbit.\nSees(Dog, Lion, True) ::: The dog sees the lion.\nCold(Lion, True) ::: The lion is cold.\nGreen(Lion, True) ::: The lion is green.\nNeeds(Lion, Dog, True) ::: The lion needs the dog.\nNeeds(Lion, Rabbit, True) ::: The lion needs the rabbit.\nVisits(Lion, BaldEagle, True) ::: The lion visits the bald eagle.\nVisits(Lion, Dog, True) ::: The lion visits the dog.\nRound(Rabbit, True) ::: The rabbit is round.\nVisits(Rabbit, Dog, True) ::: The rabbit visits the dog.\nVisits(Rabbit, Lion, True) ::: The rabbit visits the lion.\n\nRules:\nRound($x, True) >>> Rough($x, True) ::: If something is round then it is rough.\nVisits($x, Rabbit, True) && Needs($x, BaldEagle, True) >>> Visits(Rabbit, BaldEagle, True) ::: If something visits the rabbit and it needs the bald eagle then the rabbit visits the bald eagle.\nRough($x, True) >>> Visits($x, Lion, True) ::: If something is rough then it visits the lion.\nNeeds(Dog, Rabbit, True) && Sees(Rabbit, BaldEagle, True) >>> Sees(BaldEagle, Dog, True) ::: If the dog needs the rabbit and the rabbit sees the bald eagle then the bald eagle sees the dog.\nVisits(Rabbit, Lion, True) && Needs(Rabbit, Dog, True) >>> Round(Dog, True) ::: If the rabbit visits the lion and the rabbit needs the dog then the dog is round.\nVisits($x, Rabbit, True) >>> Needs(Rabbit, BaldEagle, True) ::: If something visits the rabbit then the rabbit needs the bald eagle.\nVisits($x, Lion, True) && Needs(Lion, Dog, True) >>> Needs($x, Dog, True) ::: If something visits the lion and the lion needs the dog then it needs the dog.\n\nQuery:\nSees(Rabbit, BaldEagle, False) ::: The rabbit does not see the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-1036_Q2",
    "context": "The bear eats the squirrel. The bear is cold. The bear is rough. The bear visits the lion. The cat eats the lion. The lion likes the cat. The lion visits the bear. The squirrel eats the lion. The squirrel is cold. The squirrel is rough. The squirrel likes the bear. The squirrel visits the lion. Red people are green. If someone eats the lion then the lion is red. If someone is green and they like the lion then they eat the bear. If someone visits the bear then the bear likes the lion. If someone likes the squirrel and they like the lion then they visit the lion. If someone is green then they eat the squirrel. If someone likes the lion then they visit the bear. If someone visits the lion and the lion is green then they are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is not rough.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nCold($x, bool) ::: Is x cold?\nRough($x, bool) ::: Is x rough?\nVisits($x, $y, bool) ::: Does x visit y?\nLikes($x, $y, bool) ::: Does x like y?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\n\nFacts:\nEats(Bear, Squirrel, True) ::: The bear eats the squirrel.\nCold(Bear, True) ::: The bear is cold.\nRough(Bear, True) ::: The bear is rough.\nVisits(Bear, Lion, True) ::: The bear visits the lion.\nEats(Cat, Lion, True) ::: The cat eats the lion.\nLikes(Lion, Cat, True) ::: The lion likes the cat.\nVisits(Lion, Bear, True) ::: The lion visits the bear.\nEats(Squirrel, Lion, True) ::: The squirrel eats the lion.\nCold(Squirrel, True) ::: The squirrel is cold.\nRough(Squirrel, True) ::: The squirrel is rough.\nLikes(Squirrel, Bear, True) ::: The squirrel likes the bear.\nVisits(Squirrel, Lion, True) ::: The squirrel visits the lion.\n\nRules:\nRed($x, True) >>> Green($x, True) ::: Red people are green.\nEats($x, Lion, True) >>> Red(Lion, True) ::: If someone eats the lion then the lion is red.\nGreen($x, True) && Likes($x, Lion, True) >>> Eats($x, Bear, True) ::: If someone is green and they like the lion then they eat the bear.\nVisits($x, Bear, True) >>> Likes(Bear, Lion, True) ::: If someone visits the bear then the bear likes the lion.\nLikes($x, Squirrel, True) && Likes($x, Lion, True) >>> Visits($x, Lion, True) ::: If someone likes the squirrel and they like the lion then they visit the lion.\nGreen($x, True) >>> Eats($x, Squirrel, True) ::: If someone is green then they eat the squirrel.\nLikes($x, Lion, True) >>> Visits($x, Bear, True) ::: If someone likes the lion then they visit the bear.\nVisits($x, Lion, True) && Green(Lion, True) >>> Red($x, True) ::: If someone visits the lion and the lion is green then they are red.\n\nQuery:\nRough(Squirrel, False) ::: The squirrel is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1044_Q12",
    "context": "Bob is blue. Bob is white. Charlie is green. Charlie is quiet. Charlie is round. Charlie is white. Erin is blue. Erin is cold. Erin is green. Gary is big. Gary is blue. Gary is cold. Gary is green. Gary is quiet. Gary is round. Gary is white. White things are cold. If something is blue then it is white. If something is cold then it is round. If something is green then it is quiet. All round, big things are green. If Bob is round then Bob is big. All white, quiet things are big. If something is big then it is cold. If something is blue and quiet then it is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nWhite($x, bool) ::: Is x white?\nGreen($x, bool) ::: Is x green?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nCold($x, bool) ::: Is x cold?\nBig($x, bool) ::: Is x big?\nFacts:\nBlue(Bob, True) ::: Bob is blue.\nWhite(Bob, True) ::: Bob is white.\nGreen(Charlie, True) ::: Charlie is green.\nQuiet(Charlie, True) ::: Charlie is quiet.\nRound(Charlie, True) ::: Charlie is round.\nWhite(Charlie, True) ::: Charlie is white.\nBlue(Erin, True) ::: Erin is blue.\nCold(Erin, True) ::: Erin is cold.\nGreen(Erin, True) ::: Erin is green.\nBig(Gary, True) ::: Gary is big.\nBlue(Gary, True) ::: Gary is blue.\nCold(Gary, True) ::: Gary is cold.\nGreen(Gary, True) ::: Gary is green.\nQuiet(Gary, True) ::: Gary is quiet.\nRound(Gary, True) ::: Gary is round.\nWhite(Gary, True) ::: Gary is white.\nRules:\nWhite($x, True) >>> Cold($x, True) ::: White things are cold.\nBlue($x, True) >>> White($x, True) ::: If something is blue then it is white.\nCold($x, True) >>> Round($x, True) ::: If something is cold then it is round.\nGreen($x, True) >>> Quiet($x, True) ::: If something is green then it is quiet.\nBig($x, True) && Round($x, True) >>> Green($x, True) ::: All round, big things are green.\nRound(Bob, True) >>> Big(Bob, True) ::: If Bob is round then Bob is big.\nWhite($x, True) && Quiet($x, True) >>> Big($x, True) ::: All white, quiet things are big.\nBig($x, True) >>> Cold($x, True) ::: If something is big then it is cold.\nBlue($x, True) && Quiet($x, True) >>> Cold($x, True) ::: If something is blue and quiet then it is cold.\nQuery:\nQuiet(Bob, False) ::: Bob is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-897_Q4",
    "context": "Anne is nice. Bob is big. Bob is blue. Bob is cold. Charlie is big. Charlie is cold. Charlie is nice. Charlie is young. Fiona is furry. Fiona is young. If someone is furry and nice then they are cold. If Bob is blue and Bob is big then Bob is cold. All blue, cold people are big. If someone is nice then they are smart. All smart, big people are nice. All smart people are blue. Blue, smart people are furry. Furry, cold people are smart. Cold people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nYoung($x, bool) ::: Is x young?\nFurry($x, bool) ::: Is x furry?\nSmart($x, bool) ::: Is x smart?\nFacts:\nNice(Anne, True) ::: Anne is nice.\nBig(Bob, True) ::: Bob is big.\nBlue(Bob, True) ::: Bob is blue.\nCold(Bob, True) ::: Bob is cold.\nBig(Charlie, True) ::: Charlie is big.\nCold(Charlie, True) ::: Charlie is cold.\nNice(Charlie, True) ::: Charlie is nice.\nYoung(Charlie, True) ::: Charlie is young.\nFurry(Fiona, True) ::: Fiona is furry.\nYoung(Fiona, True) ::: Fiona is young.\nRules:\nFurry($x, True) && Nice($x, True) >>> Cold($x, True) ::: If someone is furry and nice then they are cold.\nBlue(Bob, True) && Big(Bob, True) >>> Cold(Bob, True) ::: If Bob is blue and Bob is big then Bob is cold.\nBlue($x, True) && Cold($x, True) >>> Big($x, True) ::: All blue, cold people are big.\nNice($x, True) >>> Smart($x, True) ::: If someone is nice then they are smart.\nSmart($x, True) && Big($x, True) >>> Nice($x, True) ::: All smart, big people are nice.\nSmart($x, True) >>> Blue($x, True) ::: All smart people are blue.\nBlue($x, True) && Smart($x, True) >>> Furry($x, True) ::: Blue, smart people are furry.\nFurry($x, True) && Cold($x, True) >>> Smart($x, True) ::: Furry, cold people are smart.\nCold($x, True) >>> Big($x, True) ::: Cold people are big.\nQuery:\nSmart(Charlie, False) ::: Charlie is not smart."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-709_Q11",
    "context": "The bald eagle is green. The bald eagle is rough. The bald eagle is young. The bald eagle needs the squirrel. The bald eagle sees the squirrel. The cat is round. The cat needs the bald eagle. The cat needs the dog. The cat visits the bald eagle. The dog needs the bald eagle. The dog sees the bald eagle. The dog visits the cat. The squirrel needs the cat. The squirrel visits the bald eagle. If something sees the dog then it sees the cat. If something needs the dog and it is round then it needs the cat. If something visits the squirrel then the squirrel visits the dog. If something is nice then it sees the dog. If something needs the cat then it is nice. If something sees the cat then it is green. If something needs the cat then it is rough. If something visits the squirrel and the squirrel visits the dog then the squirrel visits the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat is green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen($x, bool) ::: Is x green?\nRough($x, bool) ::: Is x rough?\nYoung($x, bool) ::: Is x young?\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nVisits($x, $y, bool) ::: Does x visit y?\nRound($x, bool) ::: Is x round?\nNice($x, bool) ::: Is x nice?\n\nFacts:\nGreen(BaldEagle, True) ::: The bald eagle is green.\nRough(BaldEagle, True) ::: The bald eagle is rough.\nYoung(BaldEagle, True) ::: The bald eagle is young.\nNeeds(BaldEagle, Squirrel, True) ::: The bald eagle needs the squirrel.\nSees(BaldEagle, Squirrel, True) ::: The bald eagle sees the squirrel.\nRound(Cat, True) ::: The cat is round.\nNeeds(Cat, BaldEagle, True) ::: The cat needs the bald eagle.\nNeeds(Cat, Dog, True) ::: The cat needs the dog.\nVisits(Cat, BaldEagle, True) ::: The cat visits the bald eagle.\nNeeds(Dog, BaldEagle, True) ::: The dog needs the bald eagle.\nSees(Dog, BaldEagle, True) ::: The dog sees the bald eagle.\nVisits(Dog, Cat, True) ::: The dog visits the cat.\nNeeds(Squirrel, Cat, True) ::: The squirrel needs the cat.\nVisits(Squirrel, BaldEagle, True) ::: The squirrel visits the bald eagle.\n\nRules:\nSees($x, Dog, True) >>> Sees($x, Cat, True) ::: If something sees the dog then it sees the cat.\nNeeds($x, Dog, True) && Round($x, True) >>> Needs($x, Cat, True) ::: If something needs the dog and it is round then it needs the cat.\nVisits($x, Squirrel, True) >>> Visits(Squirrel, Dog, True) ::: If something visits the squirrel then the squirrel visits the dog.\nNice($x, True) >>> Sees($x, Dog, True) ::: If something is nice then it sees the dog.\nNeeds($x, Cat, True) >>> Nice($x, True) ::: If something needs the cat then it is nice.\nSees($x, Cat, True) >>> Green($x, True) ::: If something sees the cat then it is green.\nNeeds($x, Cat, True) >>> Rough($x, True) ::: If something needs the cat then it is rough.\nVisits($x, Squirrel, True) && Visits(Squirrel, Dog, True) >>> Visits(Squirrel, BaldEagle, True) ::: If something visits the squirrel and the squirrel visits the dog then the squirrel visits the bald eagle.\n\nQuery:\nGreen(Cat, True) ::: The cat is green."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-974_Q16",
    "context": "Dave is cold. Dave is kind. Dave is quiet. Erin is green. Fiona is cold. Fiona is green. Fiona is quiet. Fiona is round. Gary is cold. Gary is kind. Gary is young. If someone is kind then they are cold. All green people are quiet. If Erin is green and Erin is cold then Erin is round. All cold, smart people are round. All quiet, kind people are green. Quiet people are kind. If Erin is round then Erin is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nQuiet($x, bool) ::: Is x quiet?\nGreen($x, bool) ::: Is x green?\nRound($x, bool) ::: Is x round?\nYoung($x, bool) ::: Is x young?\nSmart($x, bool) ::: Is x smart?\n\nFacts:\nCold(Dave, True) ::: Dave is cold.\nKind(Dave, True) ::: Dave is kind.\nQuiet(Dave, True) ::: Dave is quiet.\nGreen(Erin, True) ::: Erin is green.\nCold(Fiona, True) ::: Fiona is cold.\nGreen(Fiona, True) ::: Fiona is green.\nQuiet(Fiona, True) ::: Fiona is quiet.\nRound(Fiona, True) ::: Fiona is round.\nCold(Gary, True) ::: Gary is cold.\nKind(Gary, True) ::: Gary is kind.\nYoung(Gary, True) ::: Gary is young.\n\nRules:\nKind($x, True) >>> Cold($x, True) ::: If someone is kind then they are cold.\nGreen($x, True) >>> Quiet($x, True) ::: All green people are quiet.\nGreen(Erin, True) && Cold(Erin, True) >>> Round(Erin, True) ::: If Erin is green and Erin is cold then Erin is round.\nCold($x, True) && Smart($x, True) >>> Round($x, True) ::: All cold, smart people are round.\nQuiet($x, True) && Kind($x, True) >>> Green($x, True) ::: All quiet, kind people are green.\nQuiet($x, True) >>> Kind($x, True) ::: Quiet people are kind.\nRound(Erin, True) >>> Young(Erin, True) ::: If Erin is round then Erin is young.\n\nQuery:\nQuiet(Gary, True) ::: Gary is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-272_Q14",
    "context": "The bald eagle likes the dog. The bald eagle sees the dog. The bear likes the dog. The dog is green. The dog sees the bald eagle. The dog sees the bear. The squirrel sees the bear. If someone is kind then they visit the bald eagle. If the dog is nice and the dog is cold then the dog sees the squirrel. If someone visits the bald eagle and they are kind then the bald eagle is green. If someone likes the bald eagle and the bald eagle is green then they like the dog. If someone is rough and they like the bear then they visit the bald eagle. Green people are kind. If someone visits the bald eagle then the bald eagle sees the dog. If the dog sees the squirrel and the squirrel is rough then the squirrel likes the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear visits the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nGreen($x, bool) ::: Is x green?\nKind($x, bool) ::: Is x kind?\nNice($x, bool) ::: Is x nice?\nCold($x, bool) ::: Is x cold?\nRough($x, bool) ::: Is x rough?\nVisits($x, $y, bool) ::: Does x visit y?\n\nFacts:\nLikes(BaldEagle, Dog, True) ::: The bald eagle likes the dog.\nSees(BaldEagle, Dog, True) ::: The bald eagle sees the dog.\nLikes(Bear, Dog, True) ::: The bear likes the dog.\nGreen(Dog, True) ::: The dog is green.\nSees(Dog, BaldEagle, True) ::: The dog sees the bald eagle.\nSees(Dog, Bear, True) ::: The dog sees the bear.\nSees(Squirrel, Bear, True) ::: The squirrel sees the bear.\n\nRules:\nKind($x, True) >>> Visits($x, BaldEagle, True) ::: If someone is kind then they visit the bald eagle.\nNice(Dog, True) && Cold(Dog, True) >>> Sees(Dog, Squirrel, True) ::: If the dog is nice and the dog is cold then the dog sees the squirrel.\nVisits($x, BaldEagle, True) && Kind($x, True) >>> Green(BaldEagle, True) ::: If someone visits the bald eagle and they are kind then the bald eagle is green.\nLikes($x, BaldEagle, True) && Green(BaldEagle, True) >>> Likes($x, Dog, True) ::: If someone likes the bald eagle and the bald eagle is green then they like the dog.\nRough($x, True) && Likes($x, Bear, True) >>> Visits($x, BaldEagle, True) ::: If someone is rough and they like the bear then they visit the bald eagle.\nGreen($x, True) >>> Kind($x, True) ::: Green people are kind.\nVisits($x, BaldEagle, True) >>> Sees(BaldEagle, Dog, True) ::: If someone visits the bald eagle then the bald eagle sees the dog.\nSees(Dog, Squirrel, True) && Rough(Squirrel, True) >>> Likes(Squirrel, BaldEagle, True) ::: If the dog sees the squirrel and the squirrel is rough then the squirrel likes the bald eagle.\n\nQuery:\nVisits(Bear, BaldEagle, True) ::: The bear visits the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-604_Q12",
    "context": "The cat chases the dog. The cat chases the mouse. The cat chases the tiger. The cat eats the dog. The dog is big. The dog sees the cat. The mouse does not eat the cat. The mouse eats the tiger. The mouse does not see the tiger. The tiger eats the dog. The tiger is nice. If something is young and it eats the tiger then it eats the dog. If something sees the mouse and it eats the mouse then the mouse sees the tiger. If something sees the mouse then it is big. If something chases the dog then the dog chases the cat. If something chases the dog then it chases the cat. If something chases the tiger and the tiger eats the cat then the cat sees the mouse. If something sees the dog and it chases the tiger then the tiger chases the dog. If the tiger is green and the tiger is big then the tiger sees the dog. If something chases the cat then it sees the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not see the dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nBig($x, bool) ::: Is x big?\nSees($x, $y, bool) ::: Does x see y?\nNice($x, bool) ::: Is x nice?\nGreen($x, bool) ::: Is x green?\n\nFacts:\nChases(Cat, Dog, True) ::: The cat chases the dog.\nChases(Cat, Mouse, True) ::: The cat chases the mouse.\nChases(Cat, Tiger, True) ::: The cat chases the tiger.\nEats(Cat, Dog, True) ::: The cat eats the dog.\nBig(Dog, True) ::: The dog is big.\nSees(Dog, Cat, True) ::: The dog sees the cat.\nEats(Mouse, Tiger, True) ::: The mouse eats the tiger.\nSees(Mouse, Tiger, False) ::: The mouse does not see the tiger.\nEats(Tiger, Dog, True) ::: The tiger eats the dog.\nNice(Tiger, True) ::: The tiger is nice.\n\nRules:\nYoung($x, True) && Eats($x, Tiger, True) >>> Eats($x, Dog, True) ::: If something is young and it eats the tiger then it eats the dog.\nSees($x, Mouse, True) && Eats($x, Mouse, True) >>> Sees(Mouse, Tiger, True) ::: If something sees the mouse and it eats the mouse then the mouse sees the tiger.\nSees($x, Mouse, True) >>> Big($x, True) ::: If something sees the mouse then it is big.\nChases($x, Dog, True) >>> Chases(Dog, Cat, True) ::: If something chases the dog then the dog chases the cat.\nChases($x, Tiger, True) && Eats(Tiger, Cat, True) >>> Sees(Cat, Mouse, True) ::: If something chases the tiger and the tiger eats the cat then the cat sees the mouse.\nSees($x, Dog, True) && Chases($x, Tiger, True) >>> Chases(Tiger, Dog, True) ::: If something sees the dog and it chases the tiger then the tiger chases the dog.\nGreen(Tiger, True) && Big(Tiger, True) >>> Sees(Tiger, Dog, True) ::: If the tiger is green and the tiger is big then the tiger sees the dog.\nChases($x, Cat, True) >>> Sees($x, Dog, True) ::: If something chases the cat then it sees the dog.\n\nQuery:\nSees(Tiger, Dog, False) ::: The tiger does not see the dog."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-423_Q3",
    "context": "Anne is cold. Anne is furry. Anne is not quiet. Charlie is kind. Fiona is not quiet. Fiona is young. Harry is cold. Kind things are furry. Nice things are big. Furry things are nice. If something is young and furry then it is quiet. If Anne is quiet then Anne is cold. Kind, big things are young. If something is kind and not furry then it is not young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is nice.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nFurry($x, bool) ::: Is x furry?\nQuiet($x, bool) ::: Is x quiet?\nKind($x, bool) ::: Is x kind?\nYoung($x, bool) ::: Is x young?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nFacts:\nCold(Anne, True) ::: Anne is cold.\nFurry(Anne, True) ::: Anne is furry.\nQuiet(Anne, False) ::: Anne is not quiet.\nKind(Charlie, True) ::: Charlie is kind.\nQuiet(Fiona, False) ::: Fiona is not quiet.\nYoung(Fiona, True) ::: Fiona is young.\nCold(Harry, True) ::: Harry is cold.\nRules:\nKind($x, True) >>> Furry($x, True) ::: Kind things are furry.\nNice($x, True) >>> Big($x, True) ::: Nice things are big.\nFurry($x, True) >>> Nice($x, True) ::: Furry things are nice.\nYoung($x, True) && Furry($x, True) >>> Quiet($x, True) ::: If something is young and furry then it is quiet.\nQuiet(Anne, True) >>> Cold(Anne, True) ::: If Anne is quiet then Anne is cold.\nKind($x, True) && Big($x, True) >>> Young($x, True) ::: Kind, big things are young.\nKind($x, True) && Furry($x, False) >>> Young($x, False) ::: If something is kind and not furry then it is not young.\nQuery:\nNice(Anne, True) ::: Anne is nice."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-940_Q9",
    "context": "The bald eagle is kind. The bald eagle is not red. The bald eagle likes the dog. The dog needs the lion. The lion does not need the bald eagle. The mouse likes the dog. The mouse does not see the dog. If someone needs the mouse then the mouse does not see the bald eagle. If someone needs the dog then the dog needs the lion. If someone is rough then they see the mouse. If someone sees the mouse then the mouse is kind. If someone needs the lion then they do not see the bald eagle. If someone sees the dog then they need the mouse. All kind people are rough. If someone sees the mouse then they like the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is rough.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind($x, bool) ::: Is x kind?\nRed($x, bool) ::: Is x red?\nLikes($x, $y, bool) ::: Does x like y?\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nRough($x, bool) ::: Is x rough?\n\nFacts:\nKind(BaldEagle, True) ::: The bald eagle is kind.\nRed(BaldEagle, False) ::: The bald eagle is not red.\nLikes(BaldEagle, Dog, True) ::: The bald eagle likes the dog.\nNeeds(Dog, Lion, True) ::: The dog needs the lion.\nNeeds(Lion, BaldEagle, False) ::: The lion does not need the bald eagle.\nLikes(Mouse, Dog, True) ::: The mouse likes the dog.\nSees(Mouse, Dog, False) ::: The mouse does not see the dog.\n\nRules:\nNeeds($x, Mouse, True) >>> Sees(Mouse, BaldEagle, False) ::: If someone needs the mouse then the mouse does not see the bald eagle.\nNeeds($x, Dog, True) >>> Needs(Dog, Lion, True) ::: If someone needs the dog then the dog needs the lion.\nRough($x, True) >>> Sees($x, Mouse, True) ::: If someone is rough then they see the mouse.\nSees($x, Mouse, True) >>> Kind(Mouse, True) ::: If someone sees the mouse then the mouse is kind.\nNeeds($x, Lion, True) >>> Sees($x, BaldEagle, False) ::: If someone needs the lion then they do not see the bald eagle.\nSees($x, Dog, True) >>> Needs($x, Mouse, True) ::: If someone sees the dog then they need the mouse.\nKind($x, True) >>> Rough($x, True) ::: All kind people are rough.\nSees($x, Mouse, True) >>> Likes($x, Lion, True) ::: If someone sees the mouse then they like the lion.\n\nQuery:\nRough(Mouse, True) ::: The mouse is rough."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-144_Q12",
    "context": "The bald eagle is big. The bald eagle is not green. The bald eagle likes the bear. The bald eagle likes the squirrel. The bear chases the lion. The bear is green. The bear visits the bald eagle. The bear visits the squirrel. The lion is not green. The lion likes the bear. The lion visits the squirrel. The squirrel chases the bald eagle. The squirrel is cold. The squirrel visits the bald eagle. If someone is cold then they are not young. All big people are not green. If the lion is big and the lion is green then the lion chases the bald eagle. If someone chases the bald eagle then they like the bear. If someone is round and they visit the bald eagle then the bald eagle likes the squirrel. If someone visits the lion then they like the bald eagle. If the lion visits the squirrel and the squirrel chases the bear then the bear chases the bald eagle. If someone visits the lion then they are cold. If someone likes the bear then they chase the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not chase the bear.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nChases($x, $y, bool) ::: Does x chase y?\nVisits($x, $y, bool) ::: Does x visit y?\nCold($x, bool) ::: Is x cold?\nYoung($x, bool) ::: Is x young?\nRound($x, bool) ::: Is x round?\n\nFacts:\nBig(BaldEagle, True) ::: The bald eagle is big.\nGreen(BaldEagle, False) ::: The bald eagle is not green.\nLikes(BaldEagle, Bear, True) ::: The bald eagle likes the bear.\nLikes(BaldEagle, Squirrel, True) ::: The bald eagle likes the squirrel.\nChases(Bear, Lion, True) ::: The bear chases the lion.\nGreen(Bear, True) ::: The bear is green.\nVisits(Bear, BaldEagle, True) ::: The bear visits the bald eagle.\nVisits(Bear, Squirrel, True) ::: The bear visits the squirrel.\nGreen(Lion, False) ::: The lion is not green.\nLikes(Lion, Bear, True) ::: The lion likes the bear.\nVisits(Lion, Squirrel, True) ::: The lion visits the squirrel.\nChases(Squirrel, BaldEagle, True) ::: The squirrel chases the bald eagle.\nCold(Squirrel, True) ::: The squirrel is cold.\nVisits(Squirrel, BaldEagle, True) ::: The squirrel visits the bald eagle.\n\nRules:\nCold($x, True) >>> Young($x, False) ::: If someone is cold then they are not young.\nBig($x, True) >>> Green($x, False) ::: All big people are not green.\nBig(Lion, True) && Green(Lion, True) >>> Chases(Lion, BaldEagle, True) ::: If the lion is big and the lion is green then the lion chases the bald eagle.\nChases($x, BaldEagle, True) >>> Likes($x, Bear, True) ::: If someone chases the bald eagle then they like the bear.\nRound($x, True) && Visits($x, BaldEagle, True) >>> Likes(BaldEagle, Squirrel, True) ::: If someone is round and they visit the bald eagle then the bald eagle likes the squirrel.\nVisits($x, Lion, True) >>> Likes($x, BaldEagle, True) ::: If someone visits the lion then they like the bald eagle.\nVisits(Lion, Squirrel, True) && Chases(Squirrel, Bear, True) >>> Chases(Bear, BaldEagle, True) ::: If the lion visits the squirrel and the squirrel chases the bear then the bear chases the bald eagle.\nVisits($x, Lion, True) >>> Cold($x, True) ::: If someone visits the lion then they are cold.\nLikes($x, Bear, True) >>> Chases($x, Bear, True) ::: If someone likes the bear then they chase the bear.\n\nQuery:\nChases(Bear, Bear, False) ::: The bear does not chase the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1176_Q12",
    "context": "Bob is not round. Charlie is furry. Charlie is nice. Charlie is smart. Erin is red. Fiona is furry. Fiona is young. All red people are not round. Red people are not blue. All young people are furry. If Erin is red and Erin is not round then Erin is nice. If someone is round and nice then they are not young. All smart people are young. Nice people are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nNice($x, bool) ::: Is x nice?\nSmart($x, bool) ::: Is x smart?\nRed($x, bool) ::: Is x red?\nYoung($x, bool) ::: Is x young?\nBlue($x, bool) ::: Is x blue?\nFacts:\nRound(Bob, False) ::: Bob is not round.\nFurry(Charlie, True) ::: Charlie is furry.\nNice(Charlie, True) ::: Charlie is nice.\nSmart(Charlie, True) ::: Charlie is smart.\nRed(Erin, True) ::: Erin is red.\nFurry(Fiona, True) ::: Fiona is furry.\nYoung(Fiona, True) ::: Fiona is young.\nRules:\nRed($x, True) >>> Round($x, False) ::: All red people are not round.\nRed($x, True) >>> Blue($x, False) ::: Red people are not blue.\nYoung($x, True) >>> Furry($x, True) ::: All young people are furry.\nRed(Erin, True) && Round(Erin, False) >>> Nice(Erin, True) ::: If Erin is red and Erin is not round then Erin is nice.\nRound($x, True) && Nice($x, True) >>> Young($x, False) ::: If someone is round and nice then they are not young.\nSmart($x, True) >>> Young($x, True) ::: All smart people are young.\nNice($x, True) >>> Smart($x, True) ::: Nice people are smart.\nQuery:\nFurry(Erin, False) ::: Erin is not furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-230_Q20",
    "context": "The bear is big. The bear is cold. The bear likes the cat. The bear visits the cat. The bear visits the cow. The cat is green. The cat needs the bear. The cow needs the dog. The dog is blue. The dog likes the bear. The dog visits the cow. If something is blue then it is red. If something likes the cow then the cow is big. If the cow needs the cat then the cow likes the cat. If something is blue then it is cold. If something is big and it likes the dog then the dog likes the cow. If something needs the bear and the bear needs the dog then the bear is red. If something likes the bear and it is big then it needs the dog. If something is big then it needs the cat. If the bear is big then the bear likes the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog is big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nLikes($x, $y, bool) ::: Does x like y?\nVisits($x, $y, bool) ::: Does x visit y?\nGreen($x, bool) ::: Is x green?\nNeeds($x, $y, bool) ::: Does x need y?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\n\nFacts:\nBig(Bear, True) ::: The bear is big.\nCold(Bear, True) ::: The bear is cold.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nVisits(Bear, Cat, True) ::: The bear visits the cat.\nVisits(Bear, Cow, True) ::: The bear visits the cow.\nGreen(Cat, True) ::: The cat is green.\nNeeds(Cat, Bear, True) ::: The cat needs the bear.\nNeeds(Cow, Dog, True) ::: The cow needs the dog.\nBlue(Dog, True) ::: The dog is blue.\nLikes(Dog, Bear, True) ::: The dog likes the bear.\nVisits(Dog, Cow, True) ::: The dog visits the cow.\n\nRules:\nBlue($x, True) >>> Red($x, True) ::: If something is blue then it is red.\nLikes($x, Cow, True) >>> Big(Cow, True) ::: If something likes the cow then the cow is big.\nNeeds(Cow, Cat, True) >>> Likes(Cow, Cat, True) ::: If the cow needs the cat then the cow likes the cat.\nBlue($x, True) >>> Cold($x, True) ::: If something is blue then it is cold.\nBig($x, True) && Likes($x, Dog, True) >>> Likes(Dog, Cow, True) ::: If something is big and it likes the dog then the dog likes the cow.\nNeeds($x, Bear, True) && Needs(Bear, Dog, True) >>> Red(Bear, True) ::: If something needs the bear and the bear needs the dog then the bear is red.\nLikes($x, Bear, True) && Big($x, True) >>> Needs($x, Dog, True) ::: If something likes the bear and it is big then it needs the dog.\nBig($x, True) >>> Needs($x, Cat, True) ::: If something is big then it needs the cat.\nBig(Bear, True) >>> Likes(Bear, Dog, True) ::: If the bear is big then the bear likes the dog.\n\nQuery:\nBig(Dog, True) ::: The dog is big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-747_Q21",
    "context": "The bear eats the tiger. The bear is not red. The bear likes the squirrel. The bear visits the squirrel. The mouse eats the tiger. The mouse is red. The mouse is rough. The mouse likes the bear. The mouse does not like the tiger. The squirrel likes the bear. The tiger eats the mouse. If the mouse likes the bear and the bear likes the mouse then the mouse is not kind. If someone visits the mouse then they like the squirrel. If someone is green then they visit the bear. If someone likes the bear and the bear visits the tiger then they visit the bear. If someone eats the bear and they do not like the tiger then they are green. If someone visits the mouse then the mouse eats the bear. If someone is red and they eat the tiger then the tiger visits the mouse. If someone visits the bear then they are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not visit the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nRed($x, bool) ::: Is x red?\nLikes($x, $y, bool) ::: Does x like y?\nVisits($x, $y, bool) ::: Does x visit y?\nRough($x, bool) ::: Is x rough?\nGreen($x, bool) ::: Is x green?\nKind($x, bool) ::: Is x kind?\n\nFacts:\nEats(Bear, Tiger, True) ::: The bear eats the tiger.\nRed(Bear, False) ::: The bear is not red.\nLikes(Bear, Squirrel, True) ::: The bear likes the squirrel.\nVisits(Bear, Squirrel, True) ::: The bear visits the squirrel.\nEats(Mouse, Tiger, True) ::: The mouse eats the tiger.\nRed(Mouse, True) ::: The mouse is red.\nRough(Mouse, True) ::: The mouse is rough.\nLikes(Mouse, Bear, True) ::: The mouse likes the bear.\nLikes(Mouse, Tiger, False) ::: The mouse does not like the tiger.\nLikes(Squirrel, Bear, True) ::: The squirrel likes the bear.\nEats(Tiger, Mouse, True) ::: The tiger eats the mouse.\n\nRules:\nLikes(Mouse, Bear, True) && Likes(Bear, Mouse, True) >>> Kind(Mouse, False) ::: If the mouse likes the bear and the bear likes the mouse then the mouse is not kind.\nVisits($x, Mouse, True) >>> Likes($x, Squirrel, True) ::: If someone visits the mouse then they like the squirrel.\nGreen($x, True) >>> Visits($x, Bear, True) ::: If someone is green then they visit the bear.\nLikes($x, Bear, True) && Visits(Bear, Tiger, True) >>> Visits($x, Bear, True) ::: If someone likes the bear and the bear visits the tiger then they visit the bear.\nEats($x, Bear, True) && Likes($x, Tiger, False) >>> Green($x, True) ::: If someone eats the bear and they do not like the tiger then they are green.\nVisits($x, Mouse, True) >>> Eats(Mouse, Bear, True) ::: If someone visits the mouse then the mouse eats the bear.\nRed($x, True) && Eats($x, Tiger, True) >>> Visits(Tiger, Mouse, True) ::: If someone is red and they eat the tiger then the tiger visits the mouse.\nVisits($x, Bear, True) >>> Kind($x, True) ::: If someone visits the bear then they are kind.\n\nQuery:\nVisits(Mouse, Squirrel, False) ::: The mouse does not visit the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-977_Q14",
    "context": "The cat is young. The cat visits the mouse. The cow is cold. The cow likes the lion. The lion is cold. The lion likes the cat. The lion needs the mouse. The lion visits the mouse. The mouse is cold. The mouse is red. The mouse is young. The mouse likes the cat. The mouse needs the cat. The mouse needs the cow. If something needs the cat and the cat is red then it is blue. Blue things are red. If something likes the mouse and the mouse likes the cat then the cat is blue. If something is cold and red then it likes the mouse. If something needs the cow and it is cold then it is young. If something is nice then it visits the lion. If something needs the lion then it likes the cat. If something visits the cat and it likes the lion then the cat is blue. If something is cold and blue then it needs the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse visits the lion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung($x, bool) ::: Is x young?\nVisits($x, $y, bool) ::: Does x visit y?\nCold($x, bool) ::: Is x cold?\nLikes($x, $y, bool) ::: Does x like y?\nNeeds($x, $y, bool) ::: Does x need y?\nRed($x, bool) ::: Is x red?\nBlue($x, bool) ::: Is x blue?\nNice($x, bool) ::: Is x nice?\n\nFacts:\nYoung(Cat, True) ::: The cat is young.\nVisits(Cat, Mouse, True) ::: The cat visits the mouse.\nCold(Cow, True) ::: The cow is cold.\nLikes(Cow, Lion, True) ::: The cow likes the lion.\nCold(Lion, True) ::: The lion is cold.\nLikes(Lion, Cat, True) ::: The lion likes the cat.\nNeeds(Lion, Mouse, True) ::: The lion needs the mouse.\nVisits(Lion, Mouse, True) ::: The lion visits the mouse.\nCold(Mouse, True) ::: The mouse is cold.\nRed(Mouse, True) ::: The mouse is red.\nYoung(Mouse, True) ::: The mouse is young.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nNeeds(Mouse, Cat, True) ::: The mouse needs the cat.\nNeeds(Mouse, Cow, True) ::: The mouse needs the cow.\n\nRules:\nNeeds($x, Cat, True) && Red(Cat, True) >>> Blue($x, True) ::: If something needs the cat and the cat is red then it is blue.\nBlue($x, True) >>> Red($x, True) ::: Blue things are red.\nLikes($x, Mouse, True) && Likes(Mouse, Cat, True) >>> Blue(Cat, True) ::: If something likes the mouse and the mouse likes the cat then the cat is blue.\nCold($x, True) && Red($x, True) >>> Likes($x, Mouse, True) ::: If something is cold and red then it likes the mouse.\nNeeds($x, Cow, True) && Cold($x, True) >>> Young($x, True) ::: If something needs the cow and it is cold then it is young.\nNice($x, True) >>> Visits($x, Lion, True) ::: If something is nice then it visits the lion.\nNeeds($x, Lion, True) >>> Likes($x, Cat, True) ::: If something needs the lion then it likes the cat.\nVisits($x, Cat, True) && Likes($x, Lion, True) >>> Blue(Cat, True) ::: If something visits the cat and it likes the lion then the cat is blue.\nCold($x, True) && Blue($x, True) >>> Needs($x, Lion, True) ::: If something is cold and blue then it needs the lion.\n\nQuery:\nVisits(Mouse, Lion, True) ::: The mouse visits the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-856_Q19",
    "context": "The bald eagle needs the lion. The bald eagle visits the lion. The lion is not cold. The lion does not like the tiger. The lion visits the tiger. The squirrel is kind. The squirrel is young. The squirrel likes the tiger. The squirrel does not need the lion. The squirrel visits the bald eagle. The tiger is cold. The tiger visits the bald eagle. If something visits the bald eagle then it is big. If something is big then it needs the squirrel. If something visits the squirrel and it visits the lion then it needs the squirrel. If something needs the squirrel then it is green. If something is young then it needs the tiger. Green things are young. If something is big and it visits the lion then the lion needs the squirrel. If the squirrel is big and the squirrel does not like the tiger then the tiger is not big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not visit the lion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nCold($x, bool) ::: Is x cold?\nLikes($x, $y, bool) ::: Does x like y?\nKind($x, bool) ::: Is x kind?\nYoung($x, bool) ::: Is x young?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\n\nFacts:\nNeeds(BaldEagle, Lion, True) ::: The bald eagle needs the lion.\nVisits(BaldEagle, Lion, True) ::: The bald eagle visits the lion.\nCold(Lion, False) ::: The lion is not cold.\nLikes(Lion, Tiger, False) ::: The lion does not like the tiger.\nVisits(Lion, Tiger, True) ::: The lion visits the tiger.\nKind(Squirrel, True) ::: The squirrel is kind.\nYoung(Squirrel, True) ::: The squirrel is young.\nLikes(Squirrel, Tiger, True) ::: The squirrel likes the tiger.\nNeeds(Squirrel, Lion, False) ::: The squirrel does not need the lion.\nVisits(Squirrel, BaldEagle, True) ::: The squirrel visits the bald eagle.\nCold(Tiger, True) ::: The tiger is cold.\nVisits(Tiger, BaldEagle, True) ::: The tiger visits the bald eagle.\n\nRules:\nVisits($x, BaldEagle, True) >>> Big($x, True) ::: If something visits the bald eagle then it is big.\nBig($x, True) >>> Needs($x, Squirrel, True) ::: If something is big then it needs the squirrel.\nVisits($x, Squirrel, True) && Visits($x, Lion, True) >>> Needs($x, Squirrel, True) ::: If something visits the squirrel and it visits the lion then it needs the squirrel.\nNeeds($x, Squirrel, True) >>> Green($x, True) ::: If something needs the squirrel then it is green.\nYoung($x, True) >>> Needs($x, Tiger, True) ::: If something is young then it needs the tiger.\nGreen($x, True) >>> Young($x, True) ::: Green things are young.\nBig($x, True) && Visits($x, Lion, True) >>> Needs(Lion, Squirrel, True) ::: If something is big and it visits the lion then the lion needs the squirrel.\nBig(Squirrel, True) && Likes(Squirrel, Tiger, False) >>> Big(Tiger, False) ::: If the squirrel is big and the squirrel does not like the tiger then the tiger is not big.\n\nQuery:\nVisits(Squirrel, Lion, False) ::: The squirrel does not visit the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1176_Q8",
    "context": "Bob is not round. Charlie is furry. Charlie is nice. Charlie is smart. Erin is red. Fiona is furry. Fiona is young. All red people are not round. Red people are not blue. All young people are furry. If Erin is red and Erin is not round then Erin is nice. If someone is round and nice then they are not young. All smart people are young. Nice people are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nNice($x, bool) ::: Is x nice?\nSmart($x, bool) ::: Is x smart?\nRed($x, bool) ::: Is x red?\nYoung($x, bool) ::: Is x young?\nBlue($x, bool) ::: Is x blue?\n\nFacts:\nRound(Bob, False) ::: Bob is not round.\nFurry(Charlie, True) ::: Charlie is furry.\nNice(Charlie, True) ::: Charlie is nice.\nSmart(Charlie, True) ::: Charlie is smart.\nRed(Erin, True) ::: Erin is red.\nFurry(Fiona, True) ::: Fiona is furry.\nYoung(Fiona, True) ::: Fiona is young.\n\nRules:\nRed($x, True) >>> Round($x, False) ::: All red people are not round.\nRed($x, True) >>> Blue($x, False) ::: Red people are not blue.\nYoung($x, True) >>> Furry($x, True) ::: All young people are furry.\nRed(Erin, True) && Round(Erin, False) >>> Nice(Erin, True) ::: If Erin is red and Erin is not round then Erin is nice.\nRound($x, True) && Nice($x, True) >>> Young($x, False) ::: If someone is round and nice then they are not young.\nSmart($x, True) >>> Young($x, True) ::: All smart people are young.\nNice($x, True) >>> Smart($x, True) ::: Nice people are smart.\n\nQuery:\nSmart(Erin, False) ::: Erin is not smart."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-127_Q4",
    "context": "The bear is blue. The bear is green. The bear is red. The bear sees the rabbit. The cow is blue. The cow needs the tiger. The cow visits the rabbit. The rabbit is cold. The rabbit is nice. The rabbit needs the cow. The rabbit sees the cow. The rabbit sees the tiger. The tiger needs the bear. The tiger needs the rabbit. The tiger visits the bear. The tiger visits the cow. If something is green then it visits the tiger. If something sees the bear and it is cold then the bear is green. If the cow needs the rabbit and the rabbit needs the cow then the rabbit is red. If something is green then it needs the cow. If something visits the tiger then the tiger is red. If something needs the tiger and the tiger sees the cow then the cow needs the bear. If something sees the bear and it needs the bear then it sees the cow. If something visits the rabbit then the rabbit needs the tiger. If something needs the bear and the bear visits the tiger then it sees the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not need the cow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nSees($x, $y, bool) ::: Does x see y?\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\n\nFacts:\nBlue(Bear, True) ::: The bear is blue.\nGreen(Bear, True) ::: The bear is green.\nRed(Bear, True) ::: The bear is red.\nSees(Bear, Rabbit, True) ::: The bear sees the rabbit.\nBlue(Cow, True) ::: The cow is blue.\nNeeds(Cow, Tiger, True) ::: The cow needs the tiger.\nVisits(Cow, Rabbit, True) ::: The cow visits the rabbit.\nCold(Rabbit, True) ::: The rabbit is cold.\nNice(Rabbit, True) ::: The rabbit is nice.\nNeeds(Rabbit, Cow, True) ::: The rabbit needs the cow.\nSees(Rabbit, Cow, True) ::: The rabbit sees the cow.\nSees(Rabbit, Tiger, True) ::: The rabbit sees the tiger.\nNeeds(Tiger, Bear, True) ::: The tiger needs the bear.\nNeeds(Tiger, Rabbit, True) ::: The tiger needs the rabbit.\nVisits(Tiger, Bear, True) ::: The tiger visits the bear.\nVisits(Tiger, Cow, True) ::: The tiger visits the cow.\n\nRules:\nGreen($x, True) >>> Visits($x, Tiger, True) ::: If something is green then it visits the tiger.\nSees($x, Bear, True) && Cold($x, True) >>> Green(Bear, True) ::: If something sees the bear and it is cold then the bear is green.\nNeeds(Cow, Rabbit, True) && Needs(Rabbit, Cow, True) >>> Red(Rabbit, True) ::: If the cow needs the rabbit and the rabbit needs the cow then the rabbit is red.\nGreen($x, True) >>> Needs($x, Cow, True) ::: If something is green then it needs the cow.\nVisits($x, Tiger, True) >>> Red(Tiger, True) ::: If something visits the tiger then the tiger is red.\nNeeds($x, Tiger, True) && Sees(Tiger, Cow, True) >>> Needs(Cow, Bear, True) ::: If something needs the tiger and the tiger sees the cow then the cow needs the bear.\nSees($x, Bear, True) && Needs($x, Bear, True) >>> Sees($x, Cow, True) ::: If something sees the bear and it needs the bear then it sees the cow.\nVisits($x, Rabbit, True) >>> Needs(Rabbit, Tiger, True) ::: If something visits the rabbit then the rabbit needs the tiger.\nNeeds($x, Bear, True) && Visits(Bear, Tiger, True) >>> Sees($x, Bear, True) ::: If something needs the bear and the bear visits the tiger then it sees the bear.\n\nQuery:\nNeeds(Bear, Cow, False) ::: The bear does not need the cow."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-587_Q13",
    "context": "The bald eagle chases the squirrel. The bald eagle eats the bear. The bear does not eat the lion. The bear visits the lion. The lion does not eat the bald eagle. The squirrel is red. The squirrel visits the bald eagle. If something is round then it eats the squirrel. If something is blue and green then it chases the bald eagle. If something eats the squirrel then the squirrel is green. If the bald eagle is round then the bald eagle chases the lion. If something is blue then it chases the squirrel. All red things are blue. If something chases the lion then it is blue. Blue, red things are round. If something visits the bald eagle and it is not round then it visits the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nVisits($x, $y, bool) ::: Does x visit y?\nRed($x, bool) ::: Is x red?\nGreen($x, bool) ::: Is x green?\nBlue($x, bool) ::: Is x blue?\nRound($x, bool) ::: Is x round?\nFacts:\nChases(BaldEagle, Squirrel, True) ::: The bald eagle chases the squirrel.\nEats(BaldEagle, Bear, True) ::: The bald eagle eats the bear.\nEats(Bear, Lion, False) ::: The bear does not eat the lion.\nVisits(Bear, Lion, True) ::: The bear visits the lion.\nEats(Lion, BaldEagle, False) ::: The lion does not eat the bald eagle.\nRed(Squirrel, True) ::: The squirrel is red.\nVisits(Squirrel, BaldEagle, True) ::: The squirrel visits the bald eagle.\nRules:\nRound($x, True) >>> Eats($x, Squirrel, True) ::: If something is round then it eats the squirrel.\nBlue($x, True) && Green($x, True) >>> Chases($x, BaldEagle, True) ::: If something is blue and green then it chases the bald eagle.\nEats($x, Squirrel, True) >>> Green(Squirrel, True) ::: If something eats the squirrel then the squirrel is green.\nRound(BaldEagle, True) >>> Chases(BaldEagle, Lion, True) ::: If the bald eagle is round then the bald eagle chases the lion.\nBlue($x, True) >>> Chases($x, Squirrel, True) ::: If something is blue then it chases the squirrel.\nRed($x, True) >>> Blue($x, True) ::: All red things are blue.\nChases($x, Lion, True) >>> Blue($x, True) ::: If something chases the lion then it is blue.\nBlue($x, True) && Red($x, True) >>> Round($x, True) ::: Blue, red things are round.\nVisits($x, BaldEagle, True) && Round($x, False) >>> Visits($x, Lion, True) ::: If something visits the bald eagle and it is not round then it visits the lion.\nQuery:\nRound(Lion, False) ::: The lion is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-586_Q11",
    "context": "Erin is smart. Fiona is quiet. Gary is blue. Gary is kind. Gary is quiet. Gary is red. Harry is smart. If Harry is smart then Harry is kind. Quiet, smart things are blue. If something is green and smart then it is not blue. Kind things are quiet. All blue, green things are smart. Red things are furry. If Harry is smart and Harry is blue then Harry is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nBlue($x, bool) ::: Is x blue?\nKind($x, bool) ::: Is x kind?\nRed($x, bool) ::: Is x red?\nGreen($x, bool) ::: Is x green?\nFurry($x, bool) ::: Is x furry?\nFacts:\nSmart(Erin, True) ::: Erin is smart.\nQuiet(Fiona, True) ::: Fiona is quiet.\nBlue(Gary, True) ::: Gary is blue.\nKind(Gary, True) ::: Gary is kind.\nQuiet(Gary, True) ::: Gary is quiet.\nRed(Gary, True) ::: Gary is red.\nSmart(Harry, True) ::: Harry is smart.\nRules:\nSmart(Harry, True) >>> Kind(Harry, True) ::: If Harry is smart then Harry is kind.\nQuiet($x, True) && Smart($x, True) >>> Blue($x, True) ::: Quiet, smart things are blue.\nGreen($x, True) && Smart($x, True) >>> Blue($x, False) ::: If something is green and smart then it is not blue.\nKind($x, True) >>> Quiet($x, True) ::: Kind things are quiet.\nBlue($x, True) && Green($x, True) >>> Smart($x, True) ::: All blue, green things are smart.\nRed($x, True) >>> Furry($x, True) ::: Red things are furry.\nSmart(Harry, True) && Blue(Harry, True) >>> Red(Harry, True) ::: If Harry is smart and Harry is blue then Harry is red.\nQuery:\nFurry(Harry, True) ::: Harry is furry."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-836_Q16",
    "context": "Anne is young. Bob is red. Bob is rough. Erin is green. Erin is kind. Gary is kind. Gary is round. If Anne is red and Anne is young then Anne is quiet. Round things are kind. If something is green and red then it is rough. If something is round then it is quiet. If something is young then it is round. Kind, red things are young. All red, round things are young. If something is round and quiet then it is green. All red, rough things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung($x, bool) ::: Is x young?\nRed($x, bool) ::: Is x red?\nRough($x, bool) ::: Is x rough?\nGreen($x, bool) ::: Is x green?\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nYoung(Anne, True) ::: Anne is young.\nRed(Bob, True) ::: Bob is red.\nRough(Bob, True) ::: Bob is rough.\nGreen(Erin, True) ::: Erin is green.\nKind(Erin, True) ::: Erin is kind.\nKind(Gary, True) ::: Gary is kind.\nRound(Gary, True) ::: Gary is round.\nRules:\nRed(Anne, True) && Young(Anne, True) >>> Quiet(Anne, True) ::: If Anne is red and Anne is young then Anne is quiet.\nRound($x, True) >>> Kind($x, True) ::: Round things are kind.\nGreen($x, True) && Red($x, True) >>> Rough($x, True) ::: If something is green and red then it is rough.\nRound($x, True) >>> Quiet($x, True) ::: If something is round then it is quiet.\nYoung($x, True) >>> Round($x, True) ::: If something is young then it is round.\nKind($x, True) && Red($x, True) >>> Young($x, True) ::: Kind, red things are young.\nRed($x, True) && Round($x, True) >>> Young($x, True) ::: All red, round things are young.\nRound($x, True) && Quiet($x, True) >>> Green($x, True) ::: If something is round and quiet then it is green.\nRed($x, True) && Rough($x, True) >>> Kind($x, True) ::: All red, rough things are kind.\nQuery:\nYoung(Gary, True) ::: Gary is young."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-195_Q3",
    "context": "Bob is rough. Charlie is nice. Charlie is rough. Charlie is white. Dave is not white. Gary is cold. Gary is quiet. Rough, white things are quiet. If Charlie is round and Charlie is quiet then Charlie is rough. All young things are round. Nice things are white. Rough, nice things are cold. If something is round and rough then it is nice. If something is rough then it is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough($x, bool) ::: Is x rough?\nNice($x, bool) ::: Is x nice?\nWhite($x, bool) ::: Is x white?\nCold($x, bool) ::: Is x cold?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nYoung($x, bool) ::: Is x young?\nFacts:\nRough(Bob, True) ::: Bob is rough.\nNice(Charlie, True) ::: Charlie is nice.\nRough(Charlie, True) ::: Charlie is rough.\nWhite(Charlie, True) ::: Charlie is white.\nWhite(Dave, False) ::: Dave is not white.\nCold(Gary, True) ::: Gary is cold.\nQuiet(Gary, True) ::: Gary is quiet.\nRules:\nRough($x, True) && White($x, True) >>> Quiet($x, True) ::: Rough, white things are quiet.\nRound(Charlie, True) && Quiet(Charlie, True) >>> Rough(Charlie, True) ::: If Charlie is round and Charlie is quiet then Charlie is rough.\nYoung($x, True) >>> Round($x, True) ::: All young things are round.\nNice($x, True) >>> White($x, True) ::: Nice things are white.\nRough($x, True) && Nice($x, True) >>> Cold($x, True) ::: Rough, nice things are cold.\nRound($x, True) && Rough($x, True) >>> Nice($x, True) ::: If something is round and rough then it is nice.\nRough($x, True) >>> Young($x, True) ::: If something is rough then it is young.\nQuery:\nQuiet(Charlie, True) ::: Charlie is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-294_Q3",
    "context": "The cat eats the squirrel. The cat is round. The cat needs the dog. The cat needs the squirrel. The dog likes the cat. The dog likes the tiger. The squirrel is blue. The squirrel is not round. The tiger is blue. The tiger is kind. The tiger is round. The tiger needs the squirrel. If something likes the tiger and the tiger needs the dog then it is round. If something eats the cat then it needs the dog. If something is big then it needs the dog. If the dog likes the tiger and the tiger likes the dog then the dog does not like the squirrel. If something is round then it eats the cat. If something needs the cat and it eats the tiger then the tiger needs the dog. If something needs the dog and it does not eat the tiger then it is blue. If the dog is round then the dog eats the squirrel. If something likes the tiger and it is kind then the tiger likes the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat eats the cat.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nRound($x, bool) ::: Is x round?\nNeeds($x, $y, bool) ::: Does x need y?\nLikes($x, $y, bool) ::: Does x like y?\nBlue($x, bool) ::: Is x blue?\nKind($x, bool) ::: Is x kind?\nBig($x, bool) ::: Is x big?\n\nFacts:\nEats(Cat, Squirrel, True) ::: The cat eats the squirrel.\nRound(Cat, True) ::: The cat is round.\nNeeds(Cat, Dog, True) ::: The cat needs the dog.\nNeeds(Cat, Squirrel, True) ::: The cat needs the squirrel.\nLikes(Dog, Cat, True) ::: The dog likes the cat.\nLikes(Dog, Tiger, True) ::: The dog likes the tiger.\nBlue(Squirrel, True) ::: The squirrel is blue.\nRound(Squirrel, False) ::: The squirrel is not round.\nBlue(Tiger, True) ::: The tiger is blue.\nKind(Tiger, True) ::: The tiger is kind.\nRound(Tiger, True) ::: The tiger is round.\nNeeds(Tiger, Squirrel, True) ::: The tiger needs the squirrel.\n\nRules:\nLikes($x, Tiger, True) && Needs(Tiger, Dog, True) >>> Round($x, True) ::: If something likes the tiger and the tiger needs the dog then it is round.\nEats($x, Cat, True) >>> Needs($x, Dog, True) ::: If something eats the cat then it needs the dog.\nBig($x, True) >>> Needs($x, Dog, True) ::: If something is big then it needs the dog.\nLikes(Dog, Tiger, True) && Likes(Tiger, Dog, True) >>> Likes(Dog, Squirrel, False) ::: If the dog likes the tiger and the tiger likes the dog then the dog does not like the squirrel.\nRound($x, True) >>> Eats($x, Cat, True) ::: If something is round then it eats the cat.\nNeeds($x, Cat, True) && Eats($x, Tiger, True) >>> Needs(Tiger, Dog, True) ::: If something needs the cat and it eats the tiger then the tiger needs the dog.\nNeeds($x, Dog, True) && Eats($x, Tiger, False) >>> Blue($x, True) ::: If something needs the dog and it does not eat the tiger then it is blue.\nRound(Dog, True) >>> Eats(Dog, Squirrel, True) ::: If the dog is round then the dog eats the squirrel.\nLikes($x, Tiger, True) && Kind($x, True) >>> Likes(Tiger, Cat, True) ::: If something likes the tiger and it is kind then the tiger likes the cat.\n\nQuery:\nEats(Cat, Cat, True) ::: The cat eats the cat."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-691_Q3",
    "context": "The bald eagle sees the cat. The cat eats the dog. The cat is big. The cat is kind. The dog eats the bald eagle. The dog eats the cat. The dog is kind. The dog sees the lion. The lion eats the bald eagle. The lion is green. The lion is nice. The lion sees the dog. Cold things are green. If something sees the lion then it needs the dog. If something needs the bald eagle then it sees the lion. If something is nice then it sees the lion. If something is big then it sees the cat. If something is green and it needs the dog then it eats the cat. If something is green and it eats the cat then the cat needs the bald eagle. If something eats the bald eagle then the bald eagle is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion sees the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees($x, $y, bool) ::: Does x see y?\nEats($x, $y, bool) ::: Does x eat y?\nBig($x, bool) ::: Is x big?\nKind($x, bool) ::: Is x kind?\nGreen($x, bool) ::: Is x green?\nNice($x, bool) ::: Is x nice?\nNeeds($x, $y, bool) ::: Does x need y?\nCold($x, bool) ::: Is x cold?\n\nFacts:\nSees(BaldEagle, Cat, True) ::: The bald eagle sees the cat.\nEats(Cat, Dog, True) ::: The cat eats the dog.\nBig(Cat, True) ::: The cat is big.\nKind(Cat, True) ::: The cat is kind.\nEats(Dog, BaldEagle, True) ::: The dog eats the bald eagle.\nEats(Dog, Cat, True) ::: The dog eats the cat.\nKind(Dog, True) ::: The dog is kind.\nSees(Dog, Lion, True) ::: The dog sees the lion.\nEats(Lion, BaldEagle, True) ::: The lion eats the bald eagle.\nGreen(Lion, True) ::: The lion is green.\nNice(Lion, True) ::: The lion is nice.\nSees(Lion, Dog, True) ::: The lion sees the dog.\n\nRules:\nCold($x, True) >>> Green($x, True) ::: Cold things are green.\nSees($x, Lion, True) >>> Needs($x, Dog, True) ::: If something sees the lion then it needs the dog.\nNeeds($x, BaldEagle, True) >>> Sees($x, Lion, True) ::: If something needs the bald eagle then it sees the lion.\nNice($x, True) >>> Sees($x, Lion, True) ::: If something is nice then it sees the lion.\nBig($x, True) >>> Sees($x, Cat, True) ::: If something is big then it sees the cat.\nGreen($x, True) && Needs($x, Dog, True) >>> Eats($x, Cat, True) ::: If something is green and it needs the dog then it eats the cat.\nGreen($x, True) && Eats($x, Cat, True) >>> Needs(Cat, BaldEagle, True) ::: If something is green and it eats the cat then the cat needs the bald eagle.\nEats($x, BaldEagle, True) >>> Nice(BaldEagle, True) ::: If something eats the bald eagle then the bald eagle is nice.\n\nQuery:\nSees(Lion, Lion, True) ::: The lion sees the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-272_Q16",
    "context": "The bald eagle likes the dog. The bald eagle sees the dog. The bear likes the dog. The dog is green. The dog sees the bald eagle. The dog sees the bear. The squirrel sees the bear. If someone is kind then they visit the bald eagle. If the dog is nice and the dog is cold then the dog sees the squirrel. If someone visits the bald eagle and they are kind then the bald eagle is green. If someone likes the bald eagle and the bald eagle is green then they like the dog. If someone is rough and they like the bear then they visit the bald eagle. Green people are kind. If someone visits the bald eagle then the bald eagle sees the dog. If the dog sees the squirrel and the squirrel is rough then the squirrel likes the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear is kind.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nGreen($x, bool) ::: Is x green?\nKind($x, bool) ::: Is x kind?\nNice($x, bool) ::: Is x nice?\nCold($x, bool) ::: Is x cold?\nRough($x, bool) ::: Is x rough?\nVisits($x, $y, bool) ::: Does x visit y?\n\nFacts:\nLikes(BaldEagle, Dog, True) ::: The bald eagle likes the dog.\nSees(BaldEagle, Dog, True) ::: The bald eagle sees the dog.\nLikes(Bear, Dog, True) ::: The bear likes the dog.\nGreen(Dog, True) ::: The dog is green.\nSees(Dog, BaldEagle, True) ::: The dog sees the bald eagle.\nSees(Dog, Bear, True) ::: The dog sees the bear.\nSees(Squirrel, Bear, True) ::: The squirrel sees the bear.\n\nRules:\nKind($x, True) >>> Visits($x, BaldEagle, True) ::: If someone is kind then they visit the bald eagle.\nNice(Dog, True) && Cold(Dog, True) >>> Sees(Dog, Squirrel, True) ::: If the dog is nice and the dog is cold then the dog sees the squirrel.\nVisits($x, BaldEagle, True) && Kind($x, True) >>> Green(BaldEagle, True) ::: If someone visits the bald eagle and they are kind then the bald eagle is green.\nLikes($x, BaldEagle, True) && Green(BaldEagle, True) >>> Likes($x, Dog, True) ::: If someone likes the bald eagle and the bald eagle is green then they like the dog.\nRough($x, True) && Likes($x, Bear, True) >>> Visits($x, BaldEagle, True) ::: If someone is rough and they like the bear then they visit the bald eagle.\nGreen($x, True) >>> Kind($x, True) ::: Green people are kind.\nVisits($x, BaldEagle, True) >>> Sees(BaldEagle, Dog, True) ::: If someone visits the bald eagle then the bald eagle sees the dog.\nSees(Dog, Squirrel, True) && Rough(Squirrel, True) >>> Likes(Squirrel, BaldEagle, True) ::: If the dog sees the squirrel and the squirrel is rough then the squirrel likes the bald eagle.\n\nQuery:\nKind(Bear, True) ::: The bear is kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-310_Q16",
    "context": "Anne is big. Anne is nice. Anne is round. Bob is nice. Bob is round. Dave is blue. Dave is red. Dave is smart. Erin is red. Erin is round. If someone is big and round then they are smart. All rough people are blue. Nice people are big. If someone is nice then they are round. Round, red people are rough. All round, smart people are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nNice($x, bool) ::: Is x nice?\nRound($x, bool) ::: Is x round?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nRough($x, bool) ::: Is x rough?\nFacts:\nBig(Anne, True) ::: Anne is big.\nNice(Anne, True) ::: Anne is nice.\nRound(Anne, True) ::: Anne is round.\nNice(Bob, True) ::: Bob is nice.\nRound(Bob, True) ::: Bob is round.\nBlue(Dave, True) ::: Dave is blue.\nRed(Dave, True) ::: Dave is red.\nSmart(Dave, True) ::: Dave is smart.\nRed(Erin, True) ::: Erin is red.\nRound(Erin, True) ::: Erin is round.\nRules:\nBig($x, True) && Round($x, True) >>> Smart($x, True) ::: If someone is big and round then they are smart.\nRough($x, True) >>> Blue($x, True) ::: All rough people are blue.\nNice($x, True) >>> Big($x, True) ::: Nice people are big.\nNice($x, True) >>> Round($x, True) ::: If someone is nice then they are round.\nRound($x, True) && Red($x, True) >>> Rough($x, True) ::: Round, red people are rough.\nRound($x, True) && Smart($x, True) >>> Red($x, True) ::: All round, smart people are red.\nQuery:\nRough(Dave, True) ::: Dave is rough."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-127_Q1",
    "context": "The bear is blue. The bear is green. The bear is red. The bear sees the rabbit. The cow is blue. The cow needs the tiger. The cow visits the rabbit. The rabbit is cold. The rabbit is nice. The rabbit needs the cow. The rabbit sees the cow. The rabbit sees the tiger. The tiger needs the bear. The tiger needs the rabbit. The tiger visits the bear. The tiger visits the cow. If something is green then it visits the tiger. If something sees the bear and it is cold then the bear is green. If the cow needs the rabbit and the rabbit needs the cow then the rabbit is red. If something is green then it needs the cow. If something visits the tiger then the tiger is red. If something needs the tiger and the tiger sees the cow then the cow needs the bear. If something sees the bear and it needs the bear then it sees the cow. If something visits the rabbit then the rabbit needs the tiger. If something needs the bear and the bear visits the tiger then it sees the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow visits the rabbit.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nSees($x, $y, bool) ::: Does x see y?\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\n\nFacts:\nBlue(Bear, True) ::: The bear is blue.\nGreen(Bear, True) ::: The bear is green.\nRed(Bear, True) ::: The bear is red.\nSees(Bear, Rabbit, True) ::: The bear sees the rabbit.\nBlue(Cow, True) ::: The cow is blue.\nNeeds(Cow, Tiger, True) ::: The cow needs the tiger.\nVisits(Cow, Rabbit, True) ::: The cow visits the rabbit.\nCold(Rabbit, True) ::: The rabbit is cold.\nNice(Rabbit, True) ::: The rabbit is nice.\nNeeds(Rabbit, Cow, True) ::: The rabbit needs the cow.\nSees(Rabbit, Cow, True) ::: The rabbit sees the cow.\nSees(Rabbit, Tiger, True) ::: The rabbit sees the tiger.\nNeeds(Tiger, Bear, True) ::: The tiger needs the bear.\nNeeds(Tiger, Rabbit, True) ::: The tiger needs the rabbit.\nVisits(Tiger, Bear, True) ::: The tiger visits the bear.\nVisits(Tiger, Cow, True) ::: The tiger visits the cow.\n\nRules:\nGreen($x, True) >>> Visits($x, Tiger, True) ::: If something is green then it visits the tiger.\nSees($x, Bear, True) && Cold($x, True) >>> Green(Bear, True) ::: If something sees the bear and it is cold then the bear is green.\nNeeds(Cow, Rabbit, True) && Needs(Rabbit, Cow, True) >>> Red(Rabbit, True) ::: If the cow needs the rabbit and the rabbit needs the cow then the rabbit is red.\nGreen($x, True) >>> Needs($x, Cow, True) ::: If something is green then it needs the cow.\nVisits($x, Tiger, True) >>> Red(Tiger, True) ::: If something visits the tiger then the tiger is red.\nNeeds($x, Tiger, True) && Sees(Tiger, Cow, True) >>> Needs(Cow, Bear, True) ::: If something needs the tiger and the tiger sees the cow then the cow needs the bear.\nSees($x, Bear, True) && Needs($x, Bear, True) >>> Sees($x, Cow, True) ::: If something sees the bear and it needs the bear then it sees the cow.\nVisits($x, Rabbit, True) >>> Needs(Rabbit, Tiger, True) ::: If something visits the rabbit then the rabbit needs the tiger.\nNeeds($x, Bear, True) && Visits(Bear, Tiger, True) >>> Sees($x, Bear, True) ::: If something needs the bear and the bear visits the tiger then it sees the bear.\n\nQuery:\nVisits(Cow, Rabbit, True) ::: The cow visits the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1236_Q20",
    "context": "Anne is blue. Anne is smart. Bob is green. Bob is round. Erin is rough. Harry is cold. Harry is kind. All kind things are round. If something is rough then it is round. All cold things are round. Round things are cold. All kind things are green. If something is smart then it is rough. If something is cold and not blue then it is rough. If Bob is smart then Bob is not green. All smart, cold things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is smart.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nSmart($x, bool) ::: Is x smart?\nGreen($x, bool) ::: Is x green?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\n\nFacts:\nBlue(Anne, True) ::: Anne is blue.\nSmart(Anne, True) ::: Anne is smart.\nGreen(Bob, True) ::: Bob is green.\nRound(Bob, True) ::: Bob is round.\nRough(Erin, True) ::: Erin is rough.\nCold(Harry, True) ::: Harry is cold.\nKind(Harry, True) ::: Harry is kind.\n\nRules:\nKind($x, True) >>> Round($x, True) ::: All kind things are round.\nRough($x, True) >>> Round($x, True) ::: If something is rough then it is round.\nCold($x, True) >>> Round($x, True) ::: All cold things are round.\nRound($x, True) >>> Cold($x, True) ::: Round things are cold.\nKind($x, True) >>> Green($x, True) ::: All kind things are green.\nSmart($x, True) >>> Rough($x, True) ::: If something is smart then it is rough.\nCold($x, True) && !Blue($x, True) >>> Rough($x, True) ::: If something is cold and not blue then it is rough.\nSmart(Bob, True) >>> !Green(Bob, True) ::: If Bob is smart then Bob is not green.\nSmart($x, True) && Cold($x, True) >>> Kind($x, True) ::: All smart, cold things are kind.\n\nQuery:\nSmart(Erin, True) ::: Erin is smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-296_Q13",
    "context": "Anne is green. Charlie is big. Charlie is quiet. Charlie is round. Erin is green. Erin is kind. Erin is nice. Erin is quiet. Fiona is blue. Fiona is kind. Fiona is quiet. If something is kind then it is nice. If something is round and quiet then it is blue. If Charlie is kind then Charlie is big. All big, blue things are kind. Nice things are quiet. All green things are big. Quiet things are kind. Big things are kind. If Anne is green then Anne is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen($x, bool) ::: Is x green?\nBig($x, bool) ::: Is x big?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nKind($x, bool) ::: Is x kind?\nNice($x, bool) ::: Is x nice?\nBlue($x, bool) ::: Is x blue?\nFacts:\nGreen(Anne, True) ::: Anne is green.\nBig(Charlie, True) ::: Charlie is big.\nQuiet(Charlie, True) ::: Charlie is quiet.\nRound(Charlie, True) ::: Charlie is round.\nGreen(Erin, True) ::: Erin is green.\nKind(Erin, True) ::: Erin is kind.\nNice(Erin, True) ::: Erin is nice.\nQuiet(Erin, True) ::: Erin is quiet.\nBlue(Fiona, True) ::: Fiona is blue.\nKind(Fiona, True) ::: Fiona is kind.\nQuiet(Fiona, True) ::: Fiona is quiet.\nRules:\nKind($x, True) >>> Nice($x, True) ::: If something is kind then it is nice.\nRound($x, True) && Quiet($x, True) >>> Blue($x, True) ::: If something is round and quiet then it is blue.\nKind(Charlie, True) >>> Big(Charlie, True) ::: If Charlie is kind then Charlie is big.\nBig($x, True) && Blue($x, True) >>> Kind($x, True) ::: All big, blue things are kind.\nNice($x, True) >>> Quiet($x, True) ::: Nice things are quiet.\nGreen($x, True) >>> Big($x, True) ::: All green things are big.\nQuiet($x, True) >>> Kind($x, True) ::: Quiet things are kind.\nBig($x, True) >>> Kind($x, True) ::: Big things are kind.\nGreen(Anne, True) >>> Round(Anne, True) ::: If Anne is green then Anne is round.\nQuery:\nBlue(Erin, False) ::: Erin is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-488_Q22",
    "context": "Anne is big. Bob is big. Bob is furry. Bob is nice. Bob is rough. Bob is white. Bob is young. Erin is blue. Harry is nice. Harry is rough. Harry is white. Harry is young. If something is big then it is furry. If Erin is furry and Erin is white then Erin is blue. If something is furry and big then it is nice. If something is big then it is furry. If something is white and nice then it is rough. Furry, nice things are young. Furry, young things are white. All big, blue things are white. Young, blue things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nNice($x, bool) ::: Is x nice?\nRough($x, bool) ::: Is x rough?\nWhite($x, bool) ::: Is x white?\nYoung($x, bool) ::: Is x young?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Anne, True) ::: Anne is big.\nBig(Bob, True) ::: Bob is big.\nFurry(Bob, True) ::: Bob is furry.\nNice(Bob, True) ::: Bob is nice.\nRough(Bob, True) ::: Bob is rough.\nWhite(Bob, True) ::: Bob is white.\nYoung(Bob, True) ::: Bob is young.\nBlue(Erin, True) ::: Erin is blue.\nNice(Harry, True) ::: Harry is nice.\nRough(Harry, True) ::: Harry is rough.\nWhite(Harry, True) ::: Harry is white.\nYoung(Harry, True) ::: Harry is young.\nRules:\nBig($x, True) >>> Furry($x, True) ::: If something is big then it is furry.\nFurry(Erin, True) && White(Erin, True) >>> Blue(Erin, True) ::: If Erin is furry and Erin is white then Erin is blue.\nFurry($x, True) && Big($x, True) >>> Nice($x, True) ::: If something is furry and big then it is nice.\nWhite($x, True) && Nice($x, True) >>> Rough($x, True) ::: If something is white and nice then it is rough.\nFurry($x, True) && Nice($x, True) >>> Young($x, True) ::: Furry, nice things are young.\nFurry($x, True) && Young($x, True) >>> White($x, True) ::: Furry, young things are white.\nBig($x, True) && Blue($x, True) >>> White($x, True) ::: All big, blue things are white.\nYoung($x, True) && Blue($x, True) >>> Nice($x, True) ::: Young, blue things are nice.\nQuery:\nBig(Harry, True) ::: Harry is big."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-739_Q12",
    "context": "The bald eagle eats the dog. The bald eagle sees the dog. The dog is cold. The dog likes the squirrel. The dog sees the rabbit. The rabbit eats the dog. The rabbit eats the squirrel. The rabbit likes the dog. The rabbit sees the squirrel. The squirrel likes the bald eagle. If someone is cold and they like the bald eagle then they eat the rabbit. If someone likes the dog and they see the squirrel then the dog likes the bald eagle. If the bald eagle sees the dog and the bald eagle is cold then the bald eagle likes the dog. If someone likes the rabbit then they are young. If someone likes the dog and the dog likes the squirrel then they like the bald eagle. If the bald eagle is red and the bald eagle likes the squirrel then the squirrel eats the rabbit. If the dog likes the bald eagle and the bald eagle sees the dog then the bald eagle is cold. If someone sees the bald eagle then the bald eagle is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not eat the rabbit.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nSees($x, $y, bool) ::: Does x see y?\nCold($x, bool) ::: Is x cold?\nLikes($x, $y, bool) ::: Does x like y?\nYoung($x, bool) ::: Is x young?\nRed($x, bool) ::: Is x red?\n\nFacts:\nEats(BaldEagle, Dog, True) ::: The bald eagle eats the dog.\nSees(BaldEagle, Dog, True) ::: The bald eagle sees the dog.\nCold(Dog, True) ::: The dog is cold.\nLikes(Dog, Squirrel, True) ::: The dog likes the squirrel.\nSees(Dog, Rabbit, True) ::: The dog sees the rabbit.\nEats(Rabbit, Dog, True) ::: The rabbit eats the dog.\nEats(Rabbit, Squirrel, True) ::: The rabbit eats the squirrel.\nLikes(Rabbit, Dog, True) ::: The rabbit likes the dog.\nSees(Rabbit, Squirrel, True) ::: The rabbit sees the squirrel.\nLikes(Squirrel, BaldEagle, True) ::: The squirrel likes the bald eagle.\n\nRules:\nCold($x, True) && Likes($x, BaldEagle, True) >>> Eats($x, Rabbit, True) ::: If someone is cold and they like the bald eagle then they eat the rabbit.\nLikes($x, Dog, True) && Sees($x, Squirrel, True) >>> Likes(Dog, BaldEagle, True) ::: If someone likes the dog and they see the squirrel then the dog likes the bald eagle.\nSees(BaldEagle, Dog, True) && Cold(BaldEagle, True) >>> Likes(BaldEagle, Dog, True) ::: If the bald eagle sees the dog and the bald eagle is cold then the bald eagle likes the dog.\nLikes($x, Rabbit, True) >>> Young($x, True) ::: If someone likes the rabbit then they are young.\nLikes($x, Dog, True) && Likes(Dog, Squirrel, True) >>> Likes($x, BaldEagle, True) ::: If someone likes the dog and the dog likes the squirrel then they like the bald eagle.\nRed(BaldEagle, True) && Likes(BaldEagle, Squirrel, True) >>> Eats(Squirrel, Rabbit, True) ::: If the bald eagle is red and the bald eagle likes the squirrel then the squirrel eats the rabbit.\nLikes(Dog, BaldEagle, True) && Sees(BaldEagle, Dog, True) >>> Cold(BaldEagle, True) ::: If the dog likes the bald eagle and the bald eagle sees the dog then the bald eagle is cold.\nSees($x, BaldEagle, True) >>> Young(BaldEagle, True) ::: If someone sees the bald eagle then the bald eagle is young.\n\nQuery:\nEats(BaldEagle, Rabbit, False) ::: The bald eagle does not eat the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-502_Q3",
    "context": "The bear eats the rabbit. The bear sees the squirrel. The mouse eats the squirrel. The mouse is kind. The mouse sees the rabbit. The rabbit needs the squirrel. The squirrel eats the bear. If someone sees the squirrel and the squirrel sees the bear then the squirrel needs the mouse. If someone needs the rabbit and the rabbit sees the mouse then the mouse sees the rabbit. If someone is rough then they need the rabbit. If someone needs the rabbit then the rabbit sees the squirrel. If someone sees the squirrel then they are rough. If someone is nice and they need the mouse then they are rough. If someone is green then they are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear is rough.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nSees($x, $y, bool) ::: Does x see y?\nNeeds($x, $y, bool) ::: Does x need y?\nKind($x, bool) ::: Is x kind?\nRough($x, bool) ::: Is x rough?\nNice($x, bool) ::: Is x nice?\nGreen($x, bool) ::: Is x green?\nFacts:\nEats(Bear, Rabbit, True) ::: The bear eats the rabbit.\nSees(Bear, Squirrel, True) ::: The bear sees the squirrel.\nEats(Mouse, Squirrel, True) ::: The mouse eats the squirrel.\nKind(Mouse, True) ::: The mouse is kind.\nSees(Mouse, Rabbit, True) ::: The mouse sees the rabbit.\nNeeds(Rabbit, Squirrel, True) ::: The rabbit needs the squirrel.\nEats(Squirrel, Bear, True) ::: The squirrel eats the bear.\nRules:\nSees($x, Squirrel, True) && Sees(Squirrel, Bear, True) >>> Needs(Squirrel, Mouse, True) ::: If someone sees the squirrel and the squirrel sees the bear then the squirrel needs the mouse.\nNeeds($x, Rabbit, True) && Sees(Rabbit, Mouse, True) >>> Sees(Mouse, Rabbit, True) ::: If someone needs the rabbit and the rabbit sees the mouse then the mouse sees the rabbit.\nRough($x, True) >>> Needs($x, Rabbit, True) ::: If someone is rough then they need the rabbit.\nNeeds($x, Rabbit, True) >>> Sees(Rabbit, Squirrel, True) ::: If someone needs the rabbit then the rabbit sees the squirrel.\nSees($x, Squirrel, True) >>> Rough($x, True) ::: If someone sees the squirrel then they are rough.\nNice($x, True) && Needs($x, Mouse, True) >>> Rough($x, True) ::: If someone is nice and they need the mouse then they are rough.\nGreen($x, True) >>> Kind($x, True) ::: If someone is green then they are kind.\nQuery:\nRough(Bear, True) ::: The bear is rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-528_Q6",
    "context": "Charlie is big. Dave is nice. Dave is round. Erin is big. Erin is nice. Fiona is red. Fiona is rough. If someone is red and big then they are nice. If Dave is round and Dave is rough then Dave is big. If someone is round and young then they are big. All nice people are young. If Charlie is round and Charlie is big then Charlie is young. If someone is red then they are big. All rough, green people are round. If someone is big then they are red. Young people are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nNice($x, bool) ::: Is x nice?\nRound($x, bool) ::: Is x round?\nRed($x, bool) ::: Is x red?\nRough($x, bool) ::: Is x rough?\nGreen($x, bool) ::: Is x green?\nYoung($x, bool) ::: Is x young?\nFacts:\nBig(Charlie, True) ::: Charlie is big.\nNice(Dave, True) ::: Dave is nice.\nRound(Dave, True) ::: Dave is round.\nBig(Erin, True) ::: Erin is big.\nNice(Erin, True) ::: Erin is nice.\nRed(Fiona, True) ::: Fiona is red.\nRough(Fiona, True) ::: Fiona is rough.\nRules:\nRed($x, True) && Big($x, True) >>> Nice($x, True) ::: If someone is red and big then they are nice.\nRound(Dave, True) && Rough(Dave, True) >>> Big(Dave, True) ::: If Dave is round and Dave is rough then Dave is big.\nRound($x, True) && Young($x, True) >>> Big($x, True) ::: If someone is round and young then they are big.\nNice($x, True) >>> Young($x, True) ::: All nice people are young.\nRound(Charlie, True) && Big(Charlie, True) >>> Young(Charlie, True) ::: If Charlie is round and Charlie is big then Charlie is young.\nRed($x, True) >>> Big($x, True) ::: If someone is red then they are big.\nRough($x, True) && Green($x, True) >>> Round($x, True) ::: All rough, green people are round.\nBig($x, True) >>> Red($x, True) ::: If someone is big then they are red.\nYoung($x, True) >>> Green($x, True) ::: Young people are green.\nQuery:\nNice(Fiona, False) ::: Fiona is not nice."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-873_Q17",
    "context": "The bald eagle is green. The bald eagle likes the squirrel. The bald eagle likes the tiger. The bear is nice. The bear is round. The bear likes the bald eagle. The bear likes the tiger. The squirrel is young. The squirrel likes the bear. The squirrel needs the bald eagle. The squirrel sees the tiger. The tiger is cold. The tiger likes the bear. The tiger likes the squirrel. The tiger needs the bear. The tiger sees the bear. If something needs the bald eagle and the bald eagle likes the bear then the bald eagle needs the tiger. If something needs the squirrel then it needs the tiger. If something is green then it needs the squirrel. If something needs the bear and it needs the bald eagle then the bear likes the bald eagle. If something likes the bald eagle then it is young. If something likes the bear and it sees the bald eagle then it needs the bear. Round things are green. If something sees the squirrel and the squirrel likes the bear then it is cold. If something needs the bear and the bear is green then it is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nNice($x, bool) ::: Is x nice?\nRound($x, bool) ::: Is x round?\nYoung($x, bool) ::: Is x young?\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nCold($x, bool) ::: Is x cold?\n\nFacts:\nGreen(BaldEagle, True) ::: The bald eagle is green.\nLikes(BaldEagle, Squirrel, True) ::: The bald eagle likes the squirrel.\nLikes(BaldEagle, Tiger, True) ::: The bald eagle likes the tiger.\nNice(Bear, True) ::: The bear is nice.\nRound(Bear, True) ::: The bear is round.\nLikes(Bear, BaldEagle, True) ::: The bear likes the bald eagle.\nLikes(Bear, Tiger, True) ::: The bear likes the tiger.\nYoung(Squirrel, True) ::: The squirrel is young.\nLikes(Squirrel, Bear, True) ::: The squirrel likes the bear.\nNeeds(Squirrel, BaldEagle, True) ::: The squirrel needs the bald eagle.\nSees(Squirrel, Tiger, True) ::: The squirrel sees the tiger.\nCold(Tiger, True) ::: The tiger is cold.\nLikes(Tiger, Bear, True) ::: The tiger likes the bear.\nLikes(Tiger, Squirrel, True) ::: The tiger likes the squirrel.\nNeeds(Tiger, Bear, True) ::: The tiger needs the bear.\nSees(Tiger, Bear, True) ::: The tiger sees the bear.\n\nRules:\nNeeds($x, BaldEagle, True) && Likes(BaldEagle, Bear, True) >>> Needs(BaldEagle, Tiger, True) ::: If something needs the bald eagle and the bald eagle likes the bear then the bald eagle needs the tiger.\nNeeds($x, Squirrel, True) >>> Needs($x, Tiger, True) ::: If something needs the squirrel then it needs the tiger.\nGreen($x, True) >>> Needs($x, Squirrel, True) ::: If something is green then it needs the squirrel.\nNeeds($x, Bear, True) && Needs($x, BaldEagle, True) >>> Likes(Bear, BaldEagle, True) ::: If something needs the bear and it needs the bald eagle then the bear likes the bald eagle.\nLikes($x, BaldEagle, True) >>> Young($x, True) ::: If something likes the bald eagle then it is young.\nLikes($x, Bear, True) && Sees($x, BaldEagle, True) >>> Needs($x, Bear, True) ::: If something likes the bear and it sees the bald eagle then it needs the bear.\nRound($x, True) >>> Green($x, True) ::: Round things are green.\nSees($x, Squirrel, True) && Likes(Squirrel, Bear, True) >>> Cold($x, True) ::: If something sees the squirrel and the squirrel likes the bear then it is cold.\nNeeds($x, Bear, True) && Green(Bear, True) >>> Round($x, True) ::: If something needs the bear and the bear is green then it is round.\n\nQuery:\nYoung(Tiger, False) ::: The tiger is not young."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-345_Q22",
    "context": "The cat is big. The cat is cold. The cat likes the cow. The cat visits the lion. The cow is blue. The cow likes the lion. The cow does not visit the lion. The lion chases the cat. The lion is not big. The lion is rough. The lion visits the cat. The squirrel likes the cow. If something visits the squirrel then it likes the cat. If something visits the cat then it likes the cat. If something likes the squirrel and it is big then the squirrel likes the lion. If something likes the cow and it visits the cow then the cow visits the cat. If something likes the cat then it chases the squirrel. If something chases the lion and the lion is not cold then it visits the cow. If something chases the lion then the lion chases the cow. If something chases the squirrel then the squirrel visits the cat. If the cow is rough then the cow chases the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat likes the lion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nLikes($x, $y, bool) ::: Does x like y?\nVisits($x, $y, bool) ::: Does x visit y?\nBlue($x, bool) ::: Is x blue?\nRough($x, bool) ::: Is x rough?\nChases($x, $y, bool) ::: Does x chase y?\n\nFacts:\nBig(Cat, True) ::: The cat is big.\nCold(Cat, True) ::: The cat is cold.\nLikes(Cat, Cow, True) ::: The cat likes the cow.\nVisits(Cat, Lion, True) ::: The cat visits the lion.\nBlue(Cow, True) ::: The cow is blue.\nLikes(Cow, Lion, True) ::: The cow likes the lion.\nVisits(Cow, Lion, False) ::: The cow does not visit the lion.\nChases(Lion, Cat, True) ::: The lion chases the cat.\nBig(Lion, False) ::: The lion is not big.\nRough(Lion, True) ::: The lion is rough.\nVisits(Lion, Cat, True) ::: The lion visits the cat.\nLikes(Squirrel, Cow, True) ::: The squirrel likes the cow.\n\nRules:\nVisits($x, Squirrel, True) >>> Likes($x, Cat, True) ::: If something visits the squirrel then it likes the cat.\nVisits($x, Cat, True) >>> Likes($x, Cat, True) ::: If something visits the cat then it likes the cat.\nLikes($x, Squirrel, True) && Big($x, True) >>> Likes(Squirrel, Lion, True) ::: If something likes the squirrel and it is big then the squirrel likes the lion.\nLikes($x, Cow, True) && Visits($x, Cow, True) >>> Visits(Cow, Cat, True) ::: If something likes the cow and it visits the cow then the cow visits the cat.\nLikes($x, Cat, True) >>> Chases($x, Squirrel, True) ::: If something likes the cat then it chases the squirrel.\nChases($x, Lion, True) && Cold(Lion, False) >>> Visits($x, Cow, True) ::: If something chases the lion and the lion is not cold then it visits the cow.\nChases($x, Lion, True) >>> Chases(Lion, Cow, True) ::: If something chases the lion then the lion chases the cow.\nChases($x, Squirrel, True) >>> Visits(Squirrel, Cat, True) ::: If something chases the squirrel then the squirrel visits the cat.\nRough(Cow, True) >>> Chases(Cow, Cat, True) ::: If the cow is rough then the cow chases the cat.\n\nQuery:\nLikes(Cat, Lion, True) ::: The cat likes the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-908_Q16",
    "context": "Anne is quiet. Anne is red. Bob is kind. Bob is nice. Bob is quiet. Bob is not red. Bob is round. Charlie is big. Charlie is kind. Fiona is quiet. All round things are nice. All kind, red things are rough. If something is big then it is quiet. If something is rough then it is round. If Charlie is nice and Charlie is big then Charlie is not kind. If something is red then it is kind. If something is round and nice then it is not big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nRed($x, bool) ::: Is x red?\nKind($x, bool) ::: Is x kind?\nNice($x, bool) ::: Is x nice?\nRound($x, bool) ::: Is x round?\nBig($x, bool) ::: Is x big?\nRough($x, bool) ::: Is x rough?\nFacts:\nQuiet(Anne, True) ::: Anne is quiet.\nRed(Anne, True) ::: Anne is red.\nKind(Bob, True) ::: Bob is kind.\nNice(Bob, True) ::: Bob is nice.\nQuiet(Bob, True) ::: Bob is quiet.\nRed(Bob, False) ::: Bob is not red.\nRound(Bob, True) ::: Bob is round.\nBig(Charlie, True) ::: Charlie is big.\nKind(Charlie, True) ::: Charlie is kind.\nQuiet(Fiona, True) ::: Fiona is quiet.\nRules:\nRound($x, True) >>> Nice($x, True) ::: All round things are nice.\nKind($x, True) && Red($x, True) >>> Rough($x, True) ::: All kind, red things are rough.\nBig($x, True) >>> Quiet($x, True) ::: If something is big then it is quiet.\nRough($x, True) >>> Round($x, True) ::: If something is rough then it is round.\nNice(Charlie, True) && Big(Charlie, True) >>> Kind(Charlie, False) ::: If Charlie is nice and Charlie is big then Charlie is not kind.\nRed($x, True) >>> Kind($x, True) ::: If something is red then it is kind.\nRound($x, True) && Nice($x, True) >>> Big($x, False) ::: If something is round and nice then it is not big.\nQuery:\nRough(Bob, True) ::: Bob is rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-878_Q10",
    "context": "Anne is smart. Bob is big. Bob is blue. Bob is rough. Bob is smart. Charlie is smart. Dave is quiet. Blue, round people are rough. If someone is smart and quiet then they are young. Smart people are quiet. If someone is round then they are blue. If Dave is big then Dave is quiet. If someone is blue then they are young. All rough, young people are round. Smart people are rough. Blue, round people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart($x, bool) ::: Is x smart?\nBig($x, bool) ::: Is x big?\nBlue($x, bool) ::: Is x blue?\nRough($x, bool) ::: Is x rough?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nYoung($x, bool) ::: Is x young?\nFacts:\nSmart(Anne, True) ::: Anne is smart.\nBig(Bob, True) ::: Bob is big.\nBlue(Bob, True) ::: Bob is blue.\nRough(Bob, True) ::: Bob is rough.\nSmart(Bob, True) ::: Bob is smart.\nSmart(Charlie, True) ::: Charlie is smart.\nQuiet(Dave, True) ::: Dave is quiet.\nRules:\nBlue($x, True) && Round($x, True) >>> Rough($x, True) ::: Blue, round people are rough.\nSmart($x, True) && Quiet($x, True) >>> Young($x, True) ::: If someone is smart and quiet then they are young.\nSmart($x, True) >>> Quiet($x, True) ::: Smart people are quiet.\nRound($x, True) >>> Blue($x, True) ::: If someone is round then they are blue.\nBig(Dave, True) >>> Quiet(Dave, True) ::: If Dave is big then Dave is quiet.\nBlue($x, True) >>> Young($x, True) ::: If someone is blue then they are young.\nRough($x, True) && Young($x, True) >>> Round($x, True) ::: All rough, young people are round.\nSmart($x, True) >>> Rough($x, True) ::: Smart people are rough.\nBlue($x, True) && Round($x, True) >>> Big($x, True) ::: Blue, round people are big.\nQuery:\nBlue(Charlie, False) ::: Charlie is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-40_Q3",
    "context": "The bald eagle is big. The bald eagle likes the cat. The bald eagle sees the squirrel. The cat chases the squirrel. The cat sees the squirrel. The squirrel likes the cat. The squirrel does not like the tiger. The tiger is big. The tiger is not young. The tiger sees the squirrel. If the tiger likes the bald eagle then the bald eagle sees the squirrel. If something likes the tiger and it does not chase the cat then the cat is not big. If something sees the cat then the cat is big. If something is big then it sees the bald eagle. If something sees the bald eagle then the bald eagle is young. Cold things are big. If something chases the tiger and it sees the cat then the tiger is big. If something is big then it chases the tiger. If something sees the bald eagle then it sees the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger chases the tiger.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nChases($x, $y, bool) ::: Does x chase y?\nYoung($x, bool) ::: Is x young?\nCold($x, bool) ::: Is x cold?\nFacts:\nBig(BaldEagle, True) ::: The bald eagle is big.\nLikes(BaldEagle, Cat, True) ::: The bald eagle likes the cat.\nSees(BaldEagle, Squirrel, True) ::: The bald eagle sees the squirrel.\nChases(Cat, Squirrel, True) ::: The cat chases the squirrel.\nSees(Cat, Squirrel, True) ::: The cat sees the squirrel.\nLikes(Squirrel, Cat, True) ::: The squirrel likes the cat.\nLikes(Squirrel, Tiger, False) ::: The squirrel does not like the tiger.\nBig(Tiger, True) ::: The tiger is big.\nYoung(Tiger, False) ::: The tiger is not young.\nSees(Tiger, Squirrel, True) ::: The tiger sees the squirrel.\nRules:\nLikes(Tiger, BaldEagle, True) >>> Sees(BaldEagle, Squirrel, True) ::: If the tiger likes the bald eagle then the bald eagle sees the squirrel.\nLikes($x, Tiger, True) && Chases($x, Cat, False) >>> Big(Cat, False) ::: If something likes the tiger and it does not chase the cat then the cat is not big.\nSees($x, Cat, True) >>> Big(Cat, True) ::: If something sees the cat then the cat is big.\nBig($x, True) >>> Sees($x, BaldEagle, True) ::: If something is big then it sees the bald eagle.\nSees($x, BaldEagle, True) >>> Young(BaldEagle, True) ::: If something sees the bald eagle then the bald eagle is young.\nCold($x, True) >>> Big($x, True) ::: Cold things are big.\nChases($x, Tiger, True) && Sees($x, Cat, True) >>> Big(Tiger, True) ::: If something chases the tiger and it sees the cat then the tiger is big.\nBig($x, True) >>> Chases($x, Tiger, True) ::: If something is big then it chases the tiger.\nSees($x, BaldEagle, True) >>> Sees($x, Cat, True) ::: If something sees the bald eagle then it sees the cat.\nQuery:\nChases(Tiger, Tiger, True) ::: The tiger chases the tiger."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1017_Q19",
    "context": "Dave is big. Dave is furry. Erin is blue. Erin is cold. Erin is round. Fiona is quiet. Gary is rough. If something is rough and cold then it is furry. Quiet, big things are not round. If Dave is blue then Dave is furry. All quiet, blue things are big. If Fiona is furry then Fiona is blue. If something is quiet then it is cold. All big things are cold. All blue, round things are not quiet. Cold things are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nRound($x, bool) ::: Is x round?\nQuiet($x, bool) ::: Is x quiet?\nRough($x, bool) ::: Is x rough?\nFacts:\nBig(Dave, True) ::: Dave is big.\nFurry(Dave, True) ::: Dave is furry.\nBlue(Erin, True) ::: Erin is blue.\nCold(Erin, True) ::: Erin is cold.\nRound(Erin, True) ::: Erin is round.\nQuiet(Fiona, True) ::: Fiona is quiet.\nRough(Gary, True) ::: Gary is rough.\nRules:\nRough($x, True) && Cold($x, True) >>> Furry($x, True) ::: If something is rough and cold then it is furry.\nQuiet($x, True) && Big($x, True) >>> Round($x, False) ::: Quiet, big things are not round.\nBlue(Dave, True) >>> Furry(Dave, True) ::: If Dave is blue then Dave is furry.\nQuiet($x, True) && Blue($x, True) >>> Big($x, True) ::: All quiet, blue things are big.\nFurry(Fiona, True) >>> Blue(Fiona, True) ::: If Fiona is furry then Fiona is blue.\nQuiet($x, True) >>> Cold($x, True) ::: If something is quiet then it is cold.\nBig($x, True) >>> Cold($x, True) ::: All big things are cold.\nBlue($x, True) && Round($x, True) >>> Quiet($x, False) ::: All blue, round things are not quiet.\nCold($x, True) >>> Rough($x, True) ::: Cold things are rough.\nQuery:\nBlue(Dave, False) ::: Dave is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-372_Q4",
    "context": "Charlie is young. Erin is blue. Erin is green. Fiona is big. Fiona is green. Gary is blue. Gary is green. All red things are furry. All furry things are red. Young things are red. If something is smart and not red then it is not green. All furry things are green. If something is red and green then it is blue. If something is young and big then it is smart. If something is blue and green then it is smart. Blue, red things are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung($x, bool) ::: Is x young?\nBlue($x, bool) ::: Is x blue?\nGreen($x, bool) ::: Is x green?\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nFurry($x, bool) ::: Is x furry?\nSmart($x, bool) ::: Is x smart?\nFacts:\nYoung(Charlie, True) ::: Charlie is young.\nBlue(Erin, True) ::: Erin is blue.\nGreen(Erin, True) ::: Erin is green.\nBig(Fiona, True) ::: Fiona is big.\nGreen(Fiona, True) ::: Fiona is green.\nBlue(Gary, True) ::: Gary is blue.\nGreen(Gary, True) ::: Gary is green.\nRules:\nRed($x, True) >>> Furry($x, True) ::: All red things are furry.\nFurry($x, True) >>> Red($x, True) ::: All furry things are red.\nYoung($x, True) >>> Red($x, True) ::: Young things are red.\nSmart($x, True) && !Red($x, True) >>> !Green($x, True) ::: If something is smart and not red then it is not green.\nFurry($x, True) >>> Green($x, True) ::: All furry things are green.\nRed($x, True) && Green($x, True) >>> Blue($x, True) ::: If something is red and green then it is blue.\nYoung($x, True) && Big($x, True) >>> Smart($x, True) ::: If something is young and big then it is smart.\nBlue($x, True) && Green($x, True) >>> Smart($x, True) ::: If something is blue and green then it is smart.\nBlue($x, True) && Red($x, True) >>> Smart($x, True) ::: Blue, red things are smart.\nQuery:\n!Smart(Gary, True) ::: Gary is not smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-863_Q11",
    "context": "Anne is furry. Anne is kind. Anne is nice. Anne is young. Bob is big. Bob is furry. Charlie is nice. Charlie is young. Dave is cold. Dave is kind. Dave is young. All cold, big people are furry. All big people are rough. All kind, big people are rough. If someone is nice and rough then they are kind. If Charlie is kind then Charlie is big. If someone is rough and kind then they are cold. Nice people are big. All rough, furry people are cold. Cold, nice people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry($x, bool) ::: Is x furry?\nKind($x, bool) ::: Is x kind?\nNice($x, bool) ::: Is x nice?\nYoung($x, bool) ::: Is x young?\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nRough($x, bool) ::: Is x rough?\nFacts:\nFurry(Anne, True) ::: Anne is furry.\nKind(Anne, True) ::: Anne is kind.\nNice(Anne, True) ::: Anne is nice.\nYoung(Anne, True) ::: Anne is young.\nBig(Bob, True) ::: Bob is big.\nFurry(Bob, True) ::: Bob is furry.\nNice(Charlie, True) ::: Charlie is nice.\nYoung(Charlie, True) ::: Charlie is young.\nCold(Dave, True) ::: Dave is cold.\nKind(Dave, True) ::: Dave is kind.\nYoung(Dave, True) ::: Dave is young.\nRules:\nCold($x, True) && Big($x, True) >>> Furry($x, True) ::: All cold, big people are furry.\nBig($x, True) >>> Rough($x, True) ::: All big people are rough.\nKind($x, True) && Big($x, True) >>> Rough($x, True) ::: All kind, big people are rough.\nNice($x, True) && Rough($x, True) >>> Kind($x, True) ::: If someone is nice and rough then they are kind.\nKind(Charlie, True) >>> Big(Charlie, True) ::: If Charlie is kind then Charlie is big.\nRough($x, True) && Kind($x, True) >>> Cold($x, True) ::: If someone is rough and kind then they are cold.\nNice($x, True) >>> Big($x, True) ::: Nice people are big.\nRough($x, True) && Furry($x, True) >>> Cold($x, True) ::: All rough, furry people are cold.\nCold($x, True) && Nice($x, True) >>> Big($x, True) ::: Cold, nice people are big.\nQuery:\nFurry(Charlie, True) ::: Charlie is furry."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1364_Q16",
    "context": "Charlie is big. Charlie is cold. Charlie is kind. Charlie is quiet. Charlie is red. Charlie is rough. Charlie is smart. Erin is kind. Fiona is quiet. Fiona is rough. Harry is kind. Harry is rough. Kind things are big. All kind, smart things are rough. If something is red and quiet then it is big. All red things are cold. All cold, quiet things are smart. If something is big and smart then it is cold. All quiet things are cold. Kind, big things are red. All cold, smart things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nQuiet($x, bool) ::: Is x quiet?\nRed($x, bool) ::: Is x red?\nRough($x, bool) ::: Is x rough?\nSmart($x, bool) ::: Is x smart?\nFacts:\nBig(Charlie, True) ::: Charlie is big.\nCold(Charlie, True) ::: Charlie is cold.\nKind(Charlie, True) ::: Charlie is kind.\nQuiet(Charlie, True) ::: Charlie is quiet.\nRed(Charlie, True) ::: Charlie is red.\nRough(Charlie, True) ::: Charlie is rough.\nSmart(Charlie, True) ::: Charlie is smart.\nKind(Erin, True) ::: Erin is kind.\nQuiet(Fiona, True) ::: Fiona is quiet.\nRough(Fiona, True) ::: Fiona is rough.\nKind(Harry, True) ::: Harry is kind.\nRough(Harry, True) ::: Harry is rough.\nRules:\nKind($x, True) >>> Big($x, True) ::: Kind things are big.\nKind($x, True) && Smart($x, True) >>> Rough($x, True) ::: All kind, smart things are rough.\nRed($x, True) && Quiet($x, True) >>> Big($x, True) ::: If something is red and quiet then it is big.\nRed($x, True) >>> Cold($x, True) ::: All red things are cold.\nCold($x, True) && Quiet($x, True) >>> Smart($x, True) ::: All cold, quiet things are smart.\nBig($x, True) && Smart($x, True) >>> Cold($x, True) ::: If something is big and smart then it is cold.\nQuiet($x, True) >>> Cold($x, True) ::: All quiet things are cold.\nKind($x, True) && Big($x, True) >>> Red($x, True) ::: Kind, big things are red.\nCold($x, True) && Smart($x, True) >>> Kind($x, True) ::: All cold, smart things are kind.\nQuery:\nQuiet(Harry, True) ::: Harry is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-731_Q5",
    "context": "The bald eagle eats the cat. The bald eagle needs the cow. The bald eagle visits the squirrel. The cat does not eat the squirrel. The cat is green. The cat needs the cow. The cow is young. The squirrel eats the cat. The squirrel is blue. The squirrel needs the bald eagle. The squirrel needs the cow. If someone needs the cow and they are not nice then they eat the squirrel. If someone eats the cow and the cow needs the bald eagle then they eat the squirrel. If someone needs the cat then they need the bald eagle. If someone eats the squirrel and they visit the squirrel then the squirrel eats the bald eagle. If someone needs the squirrel then the squirrel does not need the bald eagle. If someone needs the cat then the cat does not eat the cow. If someone needs the cat and they need the bald eagle then the bald eagle is young. If someone is young then they need the cat. If the squirrel does not eat the bald eagle then the squirrel visits the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow needs the bald eagle.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nGreen($x, bool) ::: Is x green?\nBlue($x, bool) ::: Is x blue?\nYoung($x, bool) ::: Is x young?\nNice($x, bool) ::: Is x nice?\n\nFacts:\nEats(BaldEagle, Cat, True) ::: The bald eagle eats the cat.\nNeeds(BaldEagle, Cow, True) ::: The bald eagle needs the cow.\nVisits(BaldEagle, Squirrel, True) ::: The bald eagle visits the squirrel.\nEats(Cat, Squirrel, False) ::: The cat does not eat the squirrel.\nGreen(Cat, True) ::: The cat is green.\nNeeds(Cat, Cow, True) ::: The cat needs the cow.\nYoung(Cow, True) ::: The cow is young.\nEats(Squirrel, Cat, True) ::: The squirrel eats the cat.\nBlue(Squirrel, True) ::: The squirrel is blue.\nNeeds(Squirrel, BaldEagle, True) ::: The squirrel needs the bald eagle.\nNeeds(Squirrel, Cow, True) ::: The squirrel needs the cow.\n\nRules:\nNeeds($x, Cow, True) && Nice($x, False) >>> Eats($x, Squirrel, True) ::: If someone needs the cow and they are not nice then they eat the squirrel.\nEats($x, Cow, True) && Needs(Cow, BaldEagle, True) >>> Eats($x, Squirrel, True) ::: If someone eats the cow and the cow needs the bald eagle then they eat the squirrel.\nNeeds($x, Cat, True) >>> Needs($x, BaldEagle, True) ::: If someone needs the cat then they need the bald eagle.\nEats($x, Squirrel, True) && Visits($x, Squirrel, True) >>> Eats(Squirrel, BaldEagle, True) ::: If someone eats the squirrel and they visit the squirrel then the squirrel eats the bald eagle.\nNeeds($x, Squirrel, True) >>> Needs(Squirrel, BaldEagle, False) ::: If someone needs the squirrel then the squirrel does not need the bald eagle.\nNeeds($x, Cat, True) >>> Eats(Cat, Cow, False) ::: If someone needs the cat then the cat does not eat the cow.\nNeeds($x, Cat, True) && Needs($x, BaldEagle, True) >>> Young(BaldEagle, True) ::: If someone needs the cat and they need the bald eagle then the bald eagle is young.\nYoung($x, True) >>> Needs($x, Cat, True) ::: If someone is young then they need the cat.\nEats(Squirrel, BaldEagle, False) >>> Visits(Squirrel, Cow, True) ::: If the squirrel does not eat the bald eagle then the squirrel visits the cow.\n\nQuery:\nNeeds(Cow, BaldEagle, True) ::: The cow needs the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-285_Q9",
    "context": "Bob is big. Bob is cold. Bob is furry. Bob is smart. Fiona is cold. Fiona is not green. Fiona is white. Gary is smart. Harry is big. Harry is cold. Harry is smart. All green people are furry. If Gary is furry and Gary is not smart then Gary is white. Smart people are green. If Bob is not green and Bob is not white then Bob is furry. Big people are cold. If someone is smart and furry then they are big. If someone is white and not cold then they are not blue. All cold people are not blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nFurry($x, bool) ::: Is x furry?\nSmart($x, bool) ::: Is x smart?\nGreen($x, bool) ::: Is x green?\nWhite($x, bool) ::: Is x white?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nCold(Bob, True) ::: Bob is cold.\nFurry(Bob, True) ::: Bob is furry.\nSmart(Bob, True) ::: Bob is smart.\nCold(Fiona, True) ::: Fiona is cold.\nGreen(Fiona, False) ::: Fiona is not green.\nWhite(Fiona, True) ::: Fiona is white.\nSmart(Gary, True) ::: Gary is smart.\nBig(Harry, True) ::: Harry is big.\nCold(Harry, True) ::: Harry is cold.\nSmart(Harry, True) ::: Harry is smart.\nRules:\nGreen($x, True) >>> Furry($x, True) ::: All green people are furry.\nFurry(Gary, True) && Smart(Gary, False) >>> White(Gary, True) ::: If Gary is furry and Gary is not smart then Gary is white.\nSmart($x, True) >>> Green($x, True) ::: Smart people are green.\nGreen(Bob, False) && White(Bob, False) >>> Furry(Bob, True) ::: If Bob is not green and Bob is not white then Bob is furry.\nBig($x, True) >>> Cold($x, True) ::: Big people are cold.\nSmart($x, True) && Furry($x, True) >>> Big($x, True) ::: If someone is smart and furry then they are big.\nWhite($x, True) && Cold($x, False) >>> Blue($x, False) ::: If someone is white and not cold then they are not blue.\nCold($x, True) >>> Blue($x, False) ::: All cold people are not blue.\nQuery:\nCold(Gary, True) ::: Gary is cold."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-948_Q14",
    "context": "The bear is big. The bear likes the cat. The cat eats the bear. The cat likes the squirrel. The mouse does not chase the bear. The squirrel is blue. The squirrel is green. If something likes the cat then the cat eats the mouse. If something chases the squirrel then it eats the cat. If the mouse eats the cat then the cat chases the squirrel. If something eats the mouse then the mouse chases the squirrel. If something chases the squirrel then the squirrel eats the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel chases the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nLikes($x, $y, bool) ::: Does x like y?\nEats($x, $y, bool) ::: Does x eat y?\nChases($x, $y, bool) ::: Does x chase y?\nBlue($x, bool) ::: Is x blue?\nGreen($x, bool) ::: Is x green?\n\nFacts:\nBig(Bear, True) ::: The bear is big.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nEats(Cat, Bear, True) ::: The cat eats the bear.\nLikes(Cat, Squirrel, True) ::: The cat likes the squirrel.\nChases(Mouse, Bear, False) ::: The mouse does not chase the bear.\nBlue(Squirrel, True) ::: The squirrel is blue.\nGreen(Squirrel, True) ::: The squirrel is green.\n\nRules:\nLikes($x, Cat, True) >>> Eats(Cat, Mouse, True) ::: If something likes the cat then the cat eats the mouse.\nChases($x, Squirrel, True) >>> Eats($x, Cat, True) ::: If something chases the squirrel then it eats the cat.\nEats(Mouse, Cat, True) >>> Chases(Cat, Squirrel, True) ::: If the mouse eats the cat then the cat chases the squirrel.\nEats($x, Mouse, True) >>> Chases(Mouse, Squirrel, True) ::: If something eats the mouse then the mouse chases the squirrel.\nChases($x, Squirrel, True) >>> Eats(Squirrel, Cat, True) ::: If something chases the squirrel then the squirrel eats the cat.\n\nQuery:\nChases(Squirrel, Bear, True) ::: The squirrel chases the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1233_Q2",
    "context": "Anne is smart. Bob is quiet. Bob is young. Fiona is not quiet. Gary is kind. Gary is rough. Gary is smart. Rough, kind people are blue. Young, kind people are rough. If someone is furry then they are quiet. Furry, young people are quiet. All quiet people are young. If someone is blue and kind then they are young. If someone is smart then they are furry. If Fiona is blue then Fiona is not kind. Young people are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not young.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nKind($x, bool) ::: Is x kind?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nFurry($x, bool) ::: Is x furry?\nYoung($x, bool) ::: Is x young?\nFacts:\nSmart(Anne, True) ::: Anne is smart.\nQuiet(Bob, True) ::: Bob is quiet.\nYoung(Bob, True) ::: Bob is young.\nQuiet(Fiona, False) ::: Fiona is not quiet.\nKind(Gary, True) ::: Gary is kind.\nRough(Gary, True) ::: Gary is rough.\nSmart(Gary, True) ::: Gary is smart.\nRules:\nRough($x, True) && Kind($x, True) >>> Blue($x, True) ::: Rough, kind people are blue.\nYoung($x, True) && Kind($x, True) >>> Rough($x, True) ::: Young, kind people are rough.\nFurry($x, True) >>> Quiet($x, True) ::: If someone is furry then they are quiet.\nFurry($x, True) && Young($x, True) >>> Quiet($x, True) ::: Furry, young people are quiet.\nQuiet($x, True) >>> Young($x, True) ::: All quiet people are young.\nBlue($x, True) && Kind($x, True) >>> Young($x, True) ::: If someone is blue and kind then they are young.\nSmart($x, True) >>> Furry($x, True) ::: If someone is smart then they are furry.\nBlue(Fiona, True) >>> Kind(Fiona, False) ::: If Fiona is blue then Fiona is not kind.\nYoung($x, True) >>> Kind($x, True) ::: Young people are kind.\nQuery:\nYoung(Bob, False) ::: Bob is not young."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-305_Q1",
    "context": "Anne is quiet. Bob is not rough. Gary is big. Gary is kind. Gary is rough. Gary is young. Harry is young. All big people are furry. Young people are furry. All quiet, kind people are furry. If Harry is furry and Harry is quiet then Harry is round. Rough, kind people are quiet. Young, rough people are kind. All quiet, furry people are round. Furry people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nRough($x, bool) ::: Is x rough?\nBig($x, bool) ::: Is x big?\nKind($x, bool) ::: Is x kind?\nYoung($x, bool) ::: Is x young?\nFurry($x, bool) ::: Is x furry?\nRound($x, bool) ::: Is x round?\nFacts:\nQuiet(Anne, True) ::: Anne is quiet.\nRough(Bob, False) ::: Bob is not rough.\nBig(Gary, True) ::: Gary is big.\nKind(Gary, True) ::: Gary is kind.\nRough(Gary, True) ::: Gary is rough.\nYoung(Gary, True) ::: Gary is young.\nYoung(Harry, True) ::: Harry is young.\nRules:\nBig($x, True) >>> Furry($x, True) ::: All big people are furry.\nYoung($x, True) >>> Furry($x, True) ::: Young people are furry.\nQuiet($x, True) && Kind($x, True) >>> Furry($x, True) ::: All quiet, kind people are furry.\nFurry(Harry, True) && Quiet(Harry, True) >>> Round(Harry, True) ::: If Harry is furry and Harry is quiet then Harry is round.\nRough($x, True) && Kind($x, True) >>> Quiet($x, True) ::: Rough, kind people are quiet.\nYoung($x, True) && Rough($x, True) >>> Kind($x, True) ::: Young, rough people are kind.\nQuiet($x, True) && Furry($x, True) >>> Round($x, True) ::: All quiet, furry people are round.\nFurry($x, True) >>> Rough($x, True) ::: Furry people are rough.\nQuery:\nYoung(Gary, True) ::: Gary is young."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1122_Q9",
    "context": "Bob is nice. Bob is round. Bob is white. Charlie is blue. Charlie is nice. Fiona is blue. Harry is white. If someone is blue then they are furry. All furry, nice people are smart. If someone is furry and white then they are nice. All white people are blue. Nice, smart people are quiet. Round people are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice($x, bool) ::: Is x nice?\nRound($x, bool) ::: Is x round?\nWhite($x, bool) ::: Is x white?\nBlue($x, bool) ::: Is x blue?\nFurry($x, bool) ::: Is x furry?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nNice(Bob, True) ::: Bob is nice.\nRound(Bob, True) ::: Bob is round.\nWhite(Bob, True) ::: Bob is white.\nBlue(Charlie, True) ::: Charlie is blue.\nNice(Charlie, True) ::: Charlie is nice.\nBlue(Fiona, True) ::: Fiona is blue.\nWhite(Harry, True) ::: Harry is white.\nRules:\nBlue($x, True) >>> Furry($x, True) ::: If someone is blue then they are furry.\nFurry($x, True) && Nice($x, True) >>> Smart($x, True) ::: All furry, nice people are smart.\nFurry($x, True) && White($x, True) >>> Nice($x, True) ::: If someone is furry and white then they are nice.\nWhite($x, True) >>> Blue($x, True) ::: All white people are blue.\nNice($x, True) && Smart($x, True) >>> Quiet($x, True) ::: Nice, smart people are quiet.\nRound($x, True) >>> White($x, True) ::: Round people are white.\nQuery:\nQuiet(Bob, True) ::: Bob is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-144_Q18",
    "context": "The bald eagle is big. The bald eagle is not green. The bald eagle likes the bear. The bald eagle likes the squirrel. The bear chases the lion. The bear is green. The bear visits the bald eagle. The bear visits the squirrel. The lion is not green. The lion likes the bear. The lion visits the squirrel. The squirrel chases the bald eagle. The squirrel is cold. The squirrel visits the bald eagle. If someone is cold then they are not young. All big people are not green. If the lion is big and the lion is green then the lion chases the bald eagle. If someone chases the bald eagle then they like the bear. If someone is round and they visit the bald eagle then the bald eagle likes the squirrel. If someone visits the lion then they like the bald eagle. If the lion visits the squirrel and the squirrel chases the bear then the bear chases the bald eagle. If someone visits the lion then they are cold. If someone likes the bear then they chase the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nChases($x, $y, bool) ::: Does x chase y?\nVisits($x, $y, bool) ::: Does x visit y?\nCold($x, bool) ::: Is x cold?\nYoung($x, bool) ::: Is x young?\nRound($x, bool) ::: Is x round?\n\nFacts:\nBig(BaldEagle, True) ::: The bald eagle is big.\nGreen(BaldEagle, False) ::: The bald eagle is not green.\nLikes(BaldEagle, Bear, True) ::: The bald eagle likes the bear.\nLikes(BaldEagle, Squirrel, True) ::: The bald eagle likes the squirrel.\nChases(Bear, Lion, True) ::: The bear chases the lion.\nGreen(Bear, True) ::: The bear is green.\nVisits(Bear, BaldEagle, True) ::: The bear visits the bald eagle.\nVisits(Bear, Squirrel, True) ::: The bear visits the squirrel.\nGreen(Lion, False) ::: The lion is not green.\nLikes(Lion, Bear, True) ::: The lion likes the bear.\nVisits(Lion, Squirrel, True) ::: The lion visits the squirrel.\nChases(Squirrel, BaldEagle, True) ::: The squirrel chases the bald eagle.\nCold(Squirrel, True) ::: The squirrel is cold.\nVisits(Squirrel, BaldEagle, True) ::: The squirrel visits the bald eagle.\n\nRules:\nCold($x, True) >>> Young($x, False) ::: If someone is cold then they are not young.\nBig($x, True) >>> Green($x, False) ::: All big people are not green.\nBig(Lion, True) && Green(Lion, True) >>> Chases(Lion, BaldEagle, True) ::: If the lion is big and the lion is green then the lion chases the bald eagle.\nChases($x, BaldEagle, True) >>> Likes($x, Bear, True) ::: If someone chases the bald eagle then they like the bear.\nRound($x, True) && Visits($x, BaldEagle, True) >>> Likes(BaldEagle, Squirrel, True) ::: If someone is round and they visit the bald eagle then the bald eagle likes the squirrel.\nVisits($x, Lion, True) >>> Likes($x, BaldEagle, True) ::: If someone visits the lion then they like the bald eagle.\nVisits(Lion, Squirrel, True) && Chases(Squirrel, Bear, True) >>> Chases(Bear, BaldEagle, True) ::: If the lion visits the squirrel and the squirrel chases the bear then the bear chases the bald eagle.\nVisits($x, Lion, True) >>> Cold($x, True) ::: If someone visits the lion then they are cold.\nLikes($x, Bear, True) >>> Chases($x, Bear, True) ::: If someone likes the bear then they chase the bear.\n\nQuery:\nCold(BaldEagle, True) ::: The bald eagle is cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-691_Q10",
    "context": "The bald eagle sees the cat. The cat eats the dog. The cat is big. The cat is kind. The dog eats the bald eagle. The dog eats the cat. The dog is kind. The dog sees the lion. The lion eats the bald eagle. The lion is green. The lion is nice. The lion sees the dog. Cold things are green. If something sees the lion then it needs the dog. If something needs the bald eagle then it sees the lion. If something is nice then it sees the lion. If something is big then it sees the cat. If something is green and it needs the dog then it eats the cat. If something is green and it eats the cat then the cat needs the bald eagle. If something eats the bald eagle then the bald eagle is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not need the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees($x, $y, bool) ::: Does x see y?\nEats($x, $y, bool) ::: Does x eat y?\nBig($x, bool) ::: Is x big?\nKind($x, bool) ::: Is x kind?\nGreen($x, bool) ::: Is x green?\nNice($x, bool) ::: Is x nice?\nNeeds($x, $y, bool) ::: Does x need y?\nCold($x, bool) ::: Is x cold?\n\nFacts:\nSees(BaldEagle, Cat, True) ::: The bald eagle sees the cat.\nEats(Cat, Dog, True) ::: The cat eats the dog.\nBig(Cat, True) ::: The cat is big.\nKind(Cat, True) ::: The cat is kind.\nEats(Dog, BaldEagle, True) ::: The dog eats the bald eagle.\nEats(Dog, Cat, True) ::: The dog eats the cat.\nKind(Dog, True) ::: The dog is kind.\nSees(Dog, Lion, True) ::: The dog sees the lion.\nEats(Lion, BaldEagle, True) ::: The lion eats the bald eagle.\nGreen(Lion, True) ::: The lion is green.\nNice(Lion, True) ::: The lion is nice.\nSees(Lion, Dog, True) ::: The lion sees the dog.\n\nRules:\nCold($x, True) >>> Green($x, True) ::: Cold things are green.\nSees($x, Lion, True) >>> Needs($x, Dog, True) ::: If something sees the lion then it needs the dog.\nNeeds($x, BaldEagle, True) >>> Sees($x, Lion, True) ::: If something needs the bald eagle then it sees the lion.\nNice($x, True) >>> Sees($x, Lion, True) ::: If something is nice then it sees the lion.\nBig($x, True) >>> Sees($x, Cat, True) ::: If something is big then it sees the cat.\nGreen($x, True) && Needs($x, Dog, True) >>> Eats($x, Cat, True) ::: If something is green and it needs the dog then it eats the cat.\nGreen($x, True) && Eats($x, Cat, True) >>> Needs(Cat, BaldEagle, True) ::: If something is green and it eats the cat then the cat needs the bald eagle.\nEats($x, BaldEagle, True) >>> Nice(BaldEagle, True) ::: If something eats the bald eagle then the bald eagle is nice.\n\nQuery:\nNeeds(Cat, BaldEagle, False) ::: The cat does not need the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-116_Q3",
    "context": "The cow is young. The cow sees the lion. The dog likes the cow. The dog likes the rabbit. The dog sees the rabbit. The lion is young. The lion sees the cow. The lion sees the dog. The lion sees the rabbit. The rabbit is round. The rabbit likes the cow. If someone visits the rabbit then the rabbit likes the lion. If someone likes the rabbit and the rabbit is red then the rabbit is big. If someone likes the lion and they see the rabbit then the lion likes the rabbit. If someone is young then they like the rabbit. If someone is young then they see the lion. If the lion is big then the lion visits the dog. If the rabbit likes the lion then the rabbit is young. If someone is young and they like the rabbit then they visit the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion sees the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung($x, bool) ::: Is x young?\nSees($x, $y, bool) ::: Does x see y?\nLikes($x, $y, bool) ::: Does x like y?\nRound($x, bool) ::: Is x round?\nRed($x, bool) ::: Is x red?\nBig($x, bool) ::: Is x big?\nVisits($x, $y, bool) ::: Does x visit y?\n\nFacts:\nYoung(Cow, True) ::: The cow is young.\nSees(Cow, Lion, True) ::: The cow sees the lion.\nLikes(Dog, Cow, True) ::: The dog likes the cow.\nLikes(Dog, Rabbit, True) ::: The dog likes the rabbit.\nSees(Dog, Rabbit, True) ::: The dog sees the rabbit.\nYoung(Lion, True) ::: The lion is young.\nSees(Lion, Cow, True) ::: The lion sees the cow.\nSees(Lion, Dog, True) ::: The lion sees the dog.\nSees(Lion, Rabbit, True) ::: The lion sees the rabbit.\nRound(Rabbit, True) ::: The rabbit is round.\nLikes(Rabbit, Cow, True) ::: The rabbit likes the cow.\n\nRules:\nVisits($x, Rabbit, True) >>> Likes(Rabbit, Lion, True) ::: If someone visits the rabbit then the rabbit likes the lion.\nLikes($x, Rabbit, True) && Red(Rabbit, True) >>> Big(Rabbit, True) ::: If someone likes the rabbit and the rabbit is red then the rabbit is big.\nLikes($x, Lion, True) && Sees($x, Rabbit, True) >>> Likes(Lion, Rabbit, True) ::: If someone likes the lion and they see the rabbit then the lion likes the rabbit.\nYoung($x, True) >>> Likes($x, Rabbit, True) ::: If someone is young then they like the rabbit.\nYoung($x, True) >>> Sees($x, Lion, True) ::: If someone is young then they see the lion.\nBig(Lion, True) >>> Visits(Lion, Dog, True) ::: If the lion is big then the lion visits the dog.\nLikes(Rabbit, Lion, True) >>> Young(Rabbit, True) ::: If the rabbit likes the lion then the rabbit is young.\nYoung($x, True) && Likes($x, Rabbit, True) >>> Visits($x, Rabbit, True) ::: If someone is young and they like the rabbit then they visit the rabbit.\n\nQuery:\nSees(Lion, Lion, True) ::: The lion sees the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-779_Q12",
    "context": "Bob is green. Charlie is nice. Charlie is smart. Charlie is white. Erin is nice. Harry is nice. Harry is white. If Charlie is green then Charlie is blue. All nice people are cold. All cold people are blue. Rough people are green. If someone is blue then they are green. Blue, green people are white. If Bob is smart and Bob is blue then Bob is not green. If Charlie is white then Charlie is nice. All white people are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen($x, bool) ::: Is x green?\nNice($x, bool) ::: Is x nice?\nSmart($x, bool) ::: Is x smart?\nWhite($x, bool) ::: Is x white?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nRough($x, bool) ::: Is x rough?\n\nFacts:\nGreen(Bob, True) ::: Bob is green.\nNice(Charlie, True) ::: Charlie is nice.\nSmart(Charlie, True) ::: Charlie is smart.\nWhite(Charlie, True) ::: Charlie is white.\nNice(Erin, True) ::: Erin is nice.\nNice(Harry, True) ::: Harry is nice.\nWhite(Harry, True) ::: Harry is white.\n\nRules:\nGreen(Charlie, True) >>> Blue(Charlie, True) ::: If Charlie is green then Charlie is blue.\nNice($x, True) >>> Cold($x, True) ::: All nice people are cold.\nCold($x, True) >>> Blue($x, True) ::: All cold people are blue.\nRough($x, True) >>> Green($x, True) ::: Rough people are green.\nBlue($x, True) >>> Green($x, True) ::: If someone is blue then they are green.\nBlue($x, True) && Green($x, True) >>> White($x, True) ::: Blue, green people are white.\nSmart(Bob, True) && Blue(Bob, True) >>> Green(Bob, False) ::: If Bob is smart and Bob is blue then Bob is not green.\nWhite(Charlie, True) >>> Nice(Charlie, True) ::: If Charlie is white then Charlie is nice.\nWhite($x, True) >>> Smart($x, True) ::: All white people are smart.\n\nQuery:\nSmart(Erin, False) ::: Erin is not smart."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-121_Q8",
    "context": "The bald eagle needs the cow. The bald eagle needs the tiger. The bald eagle sees the cow. The cow is big. The cow needs the bald eagle. The cow needs the tiger. The mouse eats the cow. The mouse is blue. The mouse is cold. The mouse needs the bald eagle. The mouse sees the cow. The mouse sees the tiger. The tiger eats the cow. The tiger needs the bald eagle. The tiger needs the cow. The tiger needs the mouse. If someone needs the tiger then they are red. If the mouse needs the bald eagle and the bald eagle needs the cow then the mouse needs the cow. If the cow needs the mouse and the mouse sees the cow then the mouse is big. If someone eats the mouse then they see the cow. If someone sees the mouse and they see the bald eagle then the bald eagle needs the tiger. If someone is big then they see the bald eagle. If someone is big and they see the bald eagle then they need the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nEats($x, $y, bool) ::: Does x eat y?\nBig($x, bool) ::: Is x big?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nRed($x, bool) ::: Is x red?\n\nFacts:\nNeeds(BaldEagle, Cow, True) ::: The bald eagle needs the cow.\nNeeds(BaldEagle, Tiger, True) ::: The bald eagle needs the tiger.\nSees(BaldEagle, Cow, True) ::: The bald eagle sees the cow.\nBig(Cow, True) ::: The cow is big.\nNeeds(Cow, BaldEagle, True) ::: The cow needs the bald eagle.\nNeeds(Cow, Tiger, True) ::: The cow needs the tiger.\nEats(Mouse, Cow, True) ::: The mouse eats the cow.\nBlue(Mouse, True) ::: The mouse is blue.\nCold(Mouse, True) ::: The mouse is cold.\nNeeds(Mouse, BaldEagle, True) ::: The mouse needs the bald eagle.\nSees(Mouse, Cow, True) ::: The mouse sees the cow.\nSees(Mouse, Tiger, True) ::: The mouse sees the tiger.\nEats(Tiger, Cow, True) ::: The tiger eats the cow.\nNeeds(Tiger, BaldEagle, True) ::: The tiger needs the bald eagle.\nNeeds(Tiger, Cow, True) ::: The tiger needs the cow.\nNeeds(Tiger, Mouse, True) ::: The tiger needs the mouse.\n\nRules:\nNeeds($x, Tiger, True) >>> Red($x, True) ::: If someone needs the tiger then they are red.\nNeeds(Mouse, BaldEagle, True) && Needs(BaldEagle, Cow, True) >>> Needs(Mouse, Cow, True) ::: If the mouse needs the bald eagle and the bald eagle needs the cow then the mouse needs the cow.\nNeeds(Cow, Mouse, True) && Sees(Mouse, Cow, True) >>> Big(Mouse, True) ::: If the cow needs the mouse and the mouse sees the cow then the mouse is big.\nEats($x, Mouse, True) >>> Sees($x, Cow, True) ::: If someone eats the mouse then they see the cow.\nSees($x, Mouse, True) && Sees($x, BaldEagle, True) >>> Needs(BaldEagle, Tiger, True) ::: If someone sees the mouse and they see the bald eagle then the bald eagle needs the tiger.\nBig($x, True) >>> Sees($x, BaldEagle, True) ::: If someone is big then they see the bald eagle.\nBig($x, True) && Sees($x, BaldEagle, True) >>> Needs($x, Mouse, True) ::: If someone is big and they see the bald eagle then they need the mouse.\n\nQuery:\nBig(Mouse, False) ::: The mouse is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-276_Q4",
    "context": "Bob is kind. Bob is round. Charlie is rough. Erin is green. Erin is rough. Erin is round. Gary is cold. All rough people are green. If someone is green then they are white. If someone is white then they are not big. If someone is green and not big then they are kind. If someone is kind and not big then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nGreen($x, bool) ::: Is x green?\nWhite($x, bool) ::: Is x white?\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nFacts:\nKind(Bob, True) ::: Bob is kind.\nRound(Bob, True) ::: Bob is round.\nRough(Charlie, True) ::: Charlie is rough.\nGreen(Erin, True) ::: Erin is green.\nRough(Erin, True) ::: Erin is rough.\nRound(Erin, True) ::: Erin is round.\nCold(Gary, True) ::: Gary is cold.\nRules:\nRough($x, True) >>> Green($x, True) ::: All rough people are green.\nGreen($x, True) >>> White($x, True) ::: If someone is green then they are white.\nWhite($x, True) >>> Big($x, False) ::: If someone is white then they are not big.\nGreen($x, True) && Big($x, False) >>> Kind($x, True) ::: If someone is green and not big then they are kind.\nKind($x, True) && Big($x, False) >>> Round($x, True) ::: If someone is kind and not big then they are round.\nQuery:\nWhite(Erin, False) ::: Erin is not white."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-442_Q5",
    "context": "The bald eagle chases the cat. The bald eagle does not eat the mouse. The cat eats the cow. The cow eats the cat. The cow is blue. The cow is young. The cow sees the cat. The cow does not see the mouse. The mouse does not chase the cow. The mouse eats the bald eagle. The mouse is round. If something eats the mouse then it is round. If the mouse is red then the mouse sees the cow. If something chases the cat then it does not chase the mouse. If the mouse chases the cat then the cat eats the mouse. If something is round then it chases the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat eats the mouse.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nBlue($x, bool) ::: Is x blue?\nYoung($x, bool) ::: Is x young?\nSees($x, $y, bool) ::: Does x see y?\nRound($x, bool) ::: Is x round?\nRed($x, bool) ::: Is x red?\n\nFacts:\nChases(BaldEagle, Cat, True) ::: The bald eagle chases the cat.\nEats(BaldEagle, Mouse, False) ::: The bald eagle does not eat the mouse.\nEats(Cat, Cow, True) ::: The cat eats the cow.\nEats(Cow, Cat, True) ::: The cow eats the cat.\nBlue(Cow, True) ::: The cow is blue.\nYoung(Cow, True) ::: The cow is young.\nSees(Cow, Cat, True) ::: The cow sees the cat.\nSees(Cow, Mouse, False) ::: The cow does not see the mouse.\nChases(Mouse, Cow, False) ::: The mouse does not chase the cow.\nEats(Mouse, BaldEagle, True) ::: The mouse eats the bald eagle.\nRound(Mouse, True) ::: The mouse is round.\n\nRules:\nEats($x, Mouse, True) >>> Round($x, True) ::: If something eats the mouse then it is round.\nRed(Mouse, True) >>> Sees(Mouse, Cow, True) ::: If the mouse is red then the mouse sees the cow.\nChases($x, Cat, True) >>> Chases($x, Mouse, False) ::: If something chases the cat then it does not chase the mouse.\nChases(Mouse, Cat, True) >>> Eats(Cat, Mouse, True) ::: If the mouse chases the cat then the cat eats the mouse.\nRound($x, True) >>> Chases($x, Cat, True) ::: If something is round then it chases the cat.\n\nQuery:\nEats(Cat, Mouse, True) ::: The cat eats the mouse."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1220_Q6",
    "context": "Anne is blue. Bob is blue. Bob is green. Bob is smart. Dave is big. Dave is nice. Fiona is smart. If something is nice then it is not green. Quiet, blue things are big. If something is blue then it is young. If something is nice then it is quiet. Young things are blue. If Anne is young then Anne is quiet. If Dave is young then Dave is green. All big, quiet things are nice. If Fiona is blue then Fiona is not green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nGreen($x, bool) ::: Is x green?\nSmart($x, bool) ::: Is x smart?\nBig($x, bool) ::: Is x big?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nYoung($x, bool) ::: Is x young?\nFacts:\nBlue(Anne, True) ::: Anne is blue.\nBlue(Bob, True) ::: Bob is blue.\nGreen(Bob, True) ::: Bob is green.\nSmart(Bob, True) ::: Bob is smart.\nBig(Dave, True) ::: Dave is big.\nNice(Dave, True) ::: Dave is nice.\nSmart(Fiona, True) ::: Fiona is smart.\nRules:\nNice($x, True) >>> Green($x, False) ::: If something is nice then it is not green.\nBlue($x, True) && Quiet($x, True) >>> Big($x, True) ::: Quiet, blue things are big.\nBlue($x, True) >>> Young($x, True) ::: If something is blue then it is young.\nNice($x, True) >>> Quiet($x, True) ::: If something is nice then it is quiet.\nYoung($x, True) >>> Blue($x, True) ::: Young things are blue.\nYoung(Anne, True) >>> Quiet(Anne, True) ::: If Anne is young then Anne is quiet.\nYoung(Dave, True) >>> Green(Dave, True) ::: If Dave is young then Dave is green.\nBig($x, True) && Quiet($x, True) >>> Nice($x, True) ::: All big, quiet things are nice.\nBlue(Fiona, True) >>> Green(Fiona, False) ::: If Fiona is blue then Fiona is not green.\nQuery:\nQuiet(Anne, False) ::: Anne is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-949_Q8",
    "context": "The bear is green. The bear likes the cat. The bear likes the dog. The bear visits the dog. The cat is young. The cat sees the bear. The cat sees the dog. The cat visits the bear. The cat visits the mouse. The dog is round. The dog likes the bear. The dog likes the mouse. The dog visits the mouse. The mouse is big. The mouse is cold. The mouse is round. If something visits the mouse and the mouse visits the dog then it is cold. If something likes the cat then it visits the dog. If something is cold then it likes the cat. If something is green then it sees the dog. If something likes the mouse then it sees the cat. If something is green and cold then it likes the cat. If something is big and it visits the bear then the bear is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat is not cold.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nVisits($x, $y, bool) ::: Does x visit y?\nYoung($x, bool) ::: Is x young?\nSees($x, $y, bool) ::: Does x see y?\nRound($x, bool) ::: Is x round?\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\n\nFacts:\nGreen(Bear, True) ::: The bear is green.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nLikes(Bear, Dog, True) ::: The bear likes the dog.\nVisits(Bear, Dog, True) ::: The bear visits the dog.\nYoung(Cat, True) ::: The cat is young.\nSees(Cat, Bear, True) ::: The cat sees the bear.\nSees(Cat, Dog, True) ::: The cat sees the dog.\nVisits(Cat, Bear, True) ::: The cat visits the bear.\nVisits(Cat, Mouse, True) ::: The cat visits the mouse.\nRound(Dog, True) ::: The dog is round.\nLikes(Dog, Bear, True) ::: The dog likes the bear.\nLikes(Dog, Mouse, True) ::: The dog likes the mouse.\nVisits(Dog, Mouse, True) ::: The dog visits the mouse.\nBig(Mouse, True) ::: The mouse is big.\nCold(Mouse, True) ::: The mouse is cold.\nRound(Mouse, True) ::: The mouse is round.\n\nRules:\nVisits($x, Mouse, True) && Visits(Mouse, Dog, True) >>> Cold($x, True) ::: If something visits the mouse and the mouse visits the dog then it is cold.\nLikes($x, Cat, True) >>> Visits($x, Dog, True) ::: If something likes the cat then it visits the dog.\nCold($x, True) >>> Likes($x, Cat, True) ::: If something is cold then it likes the cat.\nGreen($x, True) >>> Sees($x, Dog, True) ::: If something is green then it sees the dog.\nLikes($x, Mouse, True) >>> Sees($x, Cat, True) ::: If something likes the mouse then it sees the cat.\nGreen($x, True) && Cold($x, True) >>> Likes($x, Cat, True) ::: If something is green and cold then it likes the cat.\nBig($x, True) && Visits($x, Bear, True) >>> Green(Bear, True) ::: If something is big and it visits the bear then the bear is green.\n\nQuery:\nCold(Cat, False) ::: The cat is not cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-685_Q8",
    "context": "The bear chases the cow. The bear eats the cow. The bear is young. The cow is red. The cow is round. The cow visits the squirrel. The rabbit is round. The rabbit visits the bear. The squirrel eats the cow. The squirrel visits the rabbit. If someone visits the squirrel and the squirrel chases the cow then the cow is round. If someone is big and red then they chase the rabbit. If someone visits the rabbit then the rabbit visits the bear. If the squirrel chases the cow and the cow is round then the cow is young. If someone chases the squirrel then the squirrel eats the rabbit. If someone eats the cow and the cow eats the rabbit then the cow chases the rabbit. If someone chases the rabbit then the rabbit is red. All red people are big. If someone eats the bear then they chase the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is not red.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nYoung($x, bool) ::: Is x young?\nRed($x, bool) ::: Is x red?\nRound($x, bool) ::: Is x round?\nVisits($x, $y, bool) ::: Does x visit y?\nBig($x, bool) ::: Is x big?\n\nFacts:\nChases(Bear, Cow, True) ::: The bear chases the cow.\nEats(Bear, Cow, True) ::: The bear eats the cow.\nYoung(Bear, True) ::: The bear is young.\nRed(Cow, True) ::: The cow is red.\nRound(Cow, True) ::: The cow is round.\nVisits(Cow, Squirrel, True) ::: The cow visits the squirrel.\nRound(Rabbit, True) ::: The rabbit is round.\nVisits(Rabbit, Bear, True) ::: The rabbit visits the bear.\nEats(Squirrel, Cow, True) ::: The squirrel eats the cow.\nVisits(Squirrel, Rabbit, True) ::: The squirrel visits the rabbit.\n\nRules:\nVisits($x, Squirrel, True) && Chases(Squirrel, Cow, True) >>> Round(Cow, True) ::: If someone visits the squirrel and the squirrel chases the cow then the cow is round.\nBig($x, True) && Red($x, True) >>> Chases($x, Rabbit, True) ::: If someone is big and red then they chase the rabbit.\nVisits($x, Rabbit, True) >>> Visits(Rabbit, Bear, True) ::: If someone visits the rabbit then the rabbit visits the bear.\nChases(Squirrel, Cow, True) && Round(Cow, True) >>> Young(Cow, True) ::: If the squirrel chases the cow and the cow is round then the cow is young.\nChases($x, Squirrel, True) >>> Eats(Squirrel, Rabbit, True) ::: If someone chases the squirrel then the squirrel eats the rabbit.\nEats($x, Cow, True) && Eats(Cow, Rabbit, True) >>> Chases(Cow, Rabbit, True) ::: If someone eats the cow and the cow eats the rabbit then the cow chases the rabbit.\nChases($x, Rabbit, True) >>> Red(Rabbit, True) ::: If someone chases the rabbit then the rabbit is red.\nRed($x, True) >>> Big($x, True) ::: All red people are big.\nEats($x, Bear, True) >>> Chases($x, Cow, True) ::: If someone eats the bear then they chase the cow.\n\nQuery:\nRed(Rabbit, False) ::: The rabbit is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-404_Q24",
    "context": "The bear chases the lion. The bear is cold. The bear is nice. The bear visits the rabbit. The lion is red. The rabbit chases the bear. The rabbit is green. The squirrel chases the bear. The squirrel likes the bear. The squirrel visits the lion. If something chases the squirrel then the squirrel is red. If something likes the lion then it chases the squirrel. If something is red then it likes the lion. If something is nice and it chases the lion then it likes the rabbit. If something likes the bear and the bear likes the rabbit then the bear is green. If the squirrel visits the rabbit and the rabbit likes the bear then the bear visits the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit likes the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nVisits($x, $y, bool) ::: Does x visit y?\nRed($x, bool) ::: Is x red?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nFacts:\nChases(Bear, Lion, True) ::: The bear chases the lion.\nCold(Bear, True) ::: The bear is cold.\nNice(Bear, True) ::: The bear is nice.\nVisits(Bear, Rabbit, True) ::: The bear visits the rabbit.\nRed(Lion, True) ::: The lion is red.\nChases(Rabbit, Bear, True) ::: The rabbit chases the bear.\nGreen(Rabbit, True) ::: The rabbit is green.\nChases(Squirrel, Bear, True) ::: The squirrel chases the bear.\nLikes(Squirrel, Bear, True) ::: The squirrel likes the bear.\nVisits(Squirrel, Lion, True) ::: The squirrel visits the lion.\nRules:\nChases($x, Squirrel, True) >>> Red(Squirrel, True) ::: If something chases the squirrel then the squirrel is red.\nLikes($x, Lion, True) >>> Chases($x, Squirrel, True) ::: If something likes the lion then it chases the squirrel.\nRed($x, True) >>> Likes($x, Lion, True) ::: If something is red then it likes the lion.\nNice($x, True) && Chases($x, Lion, True) >>> Likes($x, Rabbit, True) ::: If something is nice and it chases the lion then it likes the rabbit.\nLikes($x, Bear, True) && Likes(Bear, Rabbit, True) >>> Green(Bear, True) ::: If something likes the bear and the bear likes the rabbit then the bear is green.\nVisits(Squirrel, Rabbit, True) && Likes(Rabbit, Bear, True) >>> Visits(Bear, Squirrel, True) ::: If the squirrel visits the rabbit and the rabbit likes the bear then the bear visits the squirrel.\nQuery:\nLikes(Rabbit, Bear, True) ::: The rabbit likes the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-572_Q4",
    "context": "Anne is nice. Anne is white. Anne is young. Dave is cold. Dave is nice. Dave is smart. Erin is cold. Erin is not kind. Erin is not nice. Erin is smart. Erin is young. Fiona is kind. Smart people are white. Kind, cold people are smart. Kind people are big. If Fiona is cold and Fiona is big then Fiona is nice. If someone is nice and big then they are cold. If someone is young and white then they are cold. If Anne is nice then Anne is cold. Big, young people are nice. Big people are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice($x, bool) ::: Is x nice?\nWhite($x, bool) ::: Is x white?\nYoung($x, bool) ::: Is x young?\nCold($x, bool) ::: Is x cold?\nSmart($x, bool) ::: Is x smart?\nKind($x, bool) ::: Is x kind?\nBig($x, bool) ::: Is x big?\nFacts:\nNice(Anne, True) ::: Anne is nice.\nWhite(Anne, True) ::: Anne is white.\nYoung(Anne, True) ::: Anne is young.\nCold(Dave, True) ::: Dave is cold.\nNice(Dave, True) ::: Dave is nice.\nSmart(Dave, True) ::: Dave is smart.\nCold(Erin, True) ::: Erin is cold.\nKind(Erin, False) ::: Erin is not kind.\nNice(Erin, False) ::: Erin is not nice.\nSmart(Erin, True) ::: Erin is smart.\nYoung(Erin, True) ::: Erin is young.\nKind(Fiona, True) ::: Fiona is kind.\nRules:\nSmart($x, True) >>> White($x, True) ::: Smart people are white.\nKind($x, True) && Cold($x, True) >>> Smart($x, True) ::: Kind, cold people are smart.\nKind($x, True) >>> Big($x, True) ::: Kind people are big.\nCold(Fiona, True) && Big(Fiona, True) >>> Nice(Fiona, True) ::: If Fiona is cold and Fiona is big then Fiona is nice.\nNice($x, True) && Big($x, True) >>> Cold($x, True) ::: If someone is nice and big then they are cold.\nYoung($x, True) && White($x, True) >>> Cold($x, True) ::: If someone is young and white then they are cold.\nNice(Anne, True) >>> Cold(Anne, True) ::: If Anne is nice then Anne is cold.\nBig($x, True) && Young($x, True) >>> Nice($x, True) ::: Big, young people are nice.\nBig($x, True) >>> Young($x, True) ::: Big people are young.\nQuery:\nBig(Fiona, False) ::: Fiona is not big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-587_Q11",
    "context": "The bald eagle chases the squirrel. The bald eagle eats the bear. The bear does not eat the lion. The bear visits the lion. The lion does not eat the bald eagle. The squirrel is red. The squirrel visits the bald eagle. If something is round then it eats the squirrel. If something is blue and green then it chases the bald eagle. If something eats the squirrel then the squirrel is green. If the bald eagle is round then the bald eagle chases the lion. If something is blue then it chases the squirrel. All red things are blue. If something chases the lion then it is blue. Blue, red things are round. If something visits the bald eagle and it is not round then it visits the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel chases the bald eagle.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nVisits($x, $y, bool) ::: Does x visit y?\nRed($x, bool) ::: Is x red?\nGreen($x, bool) ::: Is x green?\nBlue($x, bool) ::: Is x blue?\nRound($x, bool) ::: Is x round?\nFacts:\nChases(BaldEagle, Squirrel, True) ::: The bald eagle chases the squirrel.\nEats(BaldEagle, Bear, True) ::: The bald eagle eats the bear.\nEats(Bear, Lion, False) ::: The bear does not eat the lion.\nVisits(Bear, Lion, True) ::: The bear visits the lion.\nEats(Lion, BaldEagle, False) ::: The lion does not eat the bald eagle.\nRed(Squirrel, True) ::: The squirrel is red.\nVisits(Squirrel, BaldEagle, True) ::: The squirrel visits the bald eagle.\nRules:\nRound($x, True) >>> Eats($x, Squirrel, True) ::: If something is round then it eats the squirrel.\nBlue($x, True) && Green($x, True) >>> Chases($x, BaldEagle, True) ::: If something is blue and green then it chases the bald eagle.\nEats($x, Squirrel, True) >>> Green(Squirrel, True) ::: If something eats the squirrel then the squirrel is green.\nRound(BaldEagle, True) >>> Chases(BaldEagle, Lion, True) ::: If the bald eagle is round then the bald eagle chases the lion.\nBlue($x, True) >>> Chases($x, Squirrel, True) ::: If something is blue then it chases the squirrel.\nRed($x, True) >>> Blue($x, True) ::: All red things are blue.\nChases($x, Lion, True) >>> Blue($x, True) ::: If something chases the lion then it is blue.\nBlue($x, True) && Red($x, True) >>> Round($x, True) ::: Blue, red things are round.\nVisits($x, BaldEagle, True) && Round($x, False) >>> Visits($x, Lion, True) ::: If something visits the bald eagle and it is not round then it visits the lion.\nQuery:\nChases(Squirrel, BaldEagle, True) ::: The squirrel chases the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-963_Q9",
    "context": "Anne is kind. Anne is round. Dave is blue. Dave is cold. Dave is furry. Dave is green. Dave is quiet. Erin is green. Fiona is furry. Fiona is round. If Fiona is quiet and Fiona is kind then Fiona is green. All green people are blue. Quiet, round people are cold. Kind people are green. If someone is quiet then they are blue. If someone is cold then they are furry. All blue, kind people are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nFurry($x, bool) ::: Is x furry?\nGreen($x, bool) ::: Is x green?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nKind(Anne, True) ::: Anne is kind.\nRound(Anne, True) ::: Anne is round.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nFurry(Dave, True) ::: Dave is furry.\nGreen(Dave, True) ::: Dave is green.\nQuiet(Dave, True) ::: Dave is quiet.\nGreen(Erin, True) ::: Erin is green.\nFurry(Fiona, True) ::: Fiona is furry.\nRound(Fiona, True) ::: Fiona is round.\nRules:\nQuiet(Fiona, True) && Kind(Fiona, True) >>> Green(Fiona, True) ::: If Fiona is quiet and Fiona is kind then Fiona is green.\nGreen($x, True) >>> Blue($x, True) ::: All green people are blue.\nQuiet($x, True) && Round($x, True) >>> Cold($x, True) ::: Quiet, round people are cold.\nKind($x, True) >>> Green($x, True) ::: Kind people are green.\nQuiet($x, True) >>> Blue($x, True) ::: If someone is quiet then they are blue.\nCold($x, True) >>> Furry($x, True) ::: If someone is cold then they are furry.\nBlue($x, True) && Kind($x, True) >>> Quiet($x, True) ::: All blue, kind people are quiet.\nQuery:\nCold(Anne, True) ::: Anne is cold."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-510_Q7",
    "context": "The bear is cold. The bear is not green. The bear is rough. The rabbit is cold. The squirrel is nice. The squirrel does not visit the rabbit. The squirrel visits the tiger. The tiger chases the bear. The tiger does not eat the rabbit. The tiger is cold. The tiger is nice. The tiger is not rough. The tiger visits the rabbit. The tiger visits the squirrel. If something is green and it visits the squirrel then the squirrel is green. If something chases the rabbit then it eats the bear. If the squirrel eats the rabbit and the rabbit visits the bear then the bear is not red. If something is cold then it chases the rabbit. If the rabbit chases the squirrel then the squirrel eats the bear. If something chases the bear and it visits the tiger then the tiger chases the squirrel. If something is cold and not nice then it eats the rabbit. If something eats the bear and the bear visits the squirrel then it eats the rabbit. If something eats the bear then it chases the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger chases the squirrel.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nGreen($x, bool) ::: Is x green?\nRough($x, bool) ::: Is x rough?\nNice($x, bool) ::: Is x nice?\nVisits($x, $y, bool) ::: Does x visit y?\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nRed($x, bool) ::: Is x red?\n\nFacts:\nCold(Bear, True) ::: The bear is cold.\nGreen(Bear, False) ::: The bear is not green.\nRough(Bear, True) ::: The bear is rough.\nCold(Rabbit, True) ::: The rabbit is cold.\nNice(Squirrel, True) ::: The squirrel is nice.\nVisits(Squirrel, Rabbit, False) ::: The squirrel does not visit the rabbit.\nVisits(Squirrel, Tiger, True) ::: The squirrel visits the tiger.\nChases(Tiger, Bear, True) ::: The tiger chases the bear.\nEats(Tiger, Rabbit, False) ::: The tiger does not eat the rabbit.\nCold(Tiger, True) ::: The tiger is cold.\nNice(Tiger, True) ::: The tiger is nice.\nRough(Tiger, False) ::: The tiger is not rough.\nVisits(Tiger, Rabbit, True) ::: The tiger visits the rabbit.\nVisits(Tiger, Squirrel, True) ::: The tiger visits the squirrel.\n\nRules:\nGreen($x, True) && Visits($x, Squirrel, True) >>> Green(Squirrel, True) ::: If something is green and it visits the squirrel then the squirrel is green.\nChases($x, Rabbit, True) >>> Eats($x, Bear, True) ::: If something chases the rabbit then it eats the bear.\nEats(Squirrel, Rabbit, True) && Visits(Rabbit, Bear, True) >>> Red(Bear, False) ::: If the squirrel eats the rabbit and the rabbit visits the bear then the bear is not red.\nCold($x, True) >>> Chases($x, Rabbit, True) ::: If something is cold then it chases the rabbit.\nChases(Rabbit, Squirrel, True) >>> Eats(Squirrel, Bear, True) ::: If the rabbit chases the squirrel then the squirrel eats the bear.\nChases($x, Bear, True) && Visits($x, Tiger, True) >>> Chases(Tiger, Squirrel, True) ::: If something chases the bear and it visits the tiger then the tiger chases the squirrel.\nCold($x, True) && Nice($x, False) >>> Eats($x, Rabbit, True) ::: If something is cold and not nice then it eats the rabbit.\nEats($x, Bear, True) && Visits(Bear, Squirrel, True) >>> Eats($x, Rabbit, True) ::: If something eats the bear and the bear visits the squirrel then it eats the rabbit.\nEats($x, Bear, True) >>> Chases($x, Squirrel, True) ::: If something eats the bear then it chases the squirrel.\n\nQuery:\nChases(Tiger, Squirrel, True) ::: The tiger chases the squirrel."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-187_Q3",
    "context": "Anne is big. Anne is rough. Dave is blue. Dave is cold. Dave is red. Dave is rough. Dave is round. Gary is round. Harry is cold. Harry is rough. All round things are blue. If something is cold then it is blue. Blue, red things are round. If something is rough then it is red. All big, red things are cold. All round things are green. Round, cold things are big. If something is green then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nRed($x, bool) ::: Is x red?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nFacts:\nBig(Anne, True) ::: Anne is big.\nRough(Anne, True) ::: Anne is rough.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nRed(Dave, True) ::: Dave is red.\nRough(Dave, True) ::: Dave is rough.\nRound(Dave, True) ::: Dave is round.\nRound(Gary, True) ::: Gary is round.\nCold(Harry, True) ::: Harry is cold.\nRough(Harry, True) ::: Harry is rough.\nRules:\nRound($x, True) >>> Blue($x, True) ::: All round things are blue.\nCold($x, True) >>> Blue($x, True) ::: If something is cold then it is blue.\nBlue($x, True) && Red($x, True) >>> Round($x, True) ::: Blue, red things are round.\nRough($x, True) >>> Red($x, True) ::: If something is rough then it is red.\nBig($x, True) && Red($x, True) >>> Cold($x, True) ::: All big, red things are cold.\nRound($x, True) >>> Green($x, True) ::: All round things are green.\nRound($x, True) && Cold($x, True) >>> Big($x, True) ::: Round, cold things are big.\nGreen($x, True) >>> Blue($x, True) ::: If something is green then it is blue.\nQuery:\nBig(Dave, True) ::: Dave is big."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-777_Q9",
    "context": "The bear is kind. The bear likes the cat. The cat likes the bear. The cat needs the cow. The cat sees the bear. The cat sees the cow. The cow is rough. The mouse likes the cat. The mouse needs the bear. The mouse sees the cow. If someone sees the bear then they need the mouse. If someone needs the bear and the bear needs the cow then the bear needs the cat. If someone likes the cow then the cow sees the bear. If the bear is red and the bear needs the cow then the cow needs the bear. If someone needs the mouse then they are big. If someone sees the bear and they are big then they like the cow. If the cat needs the mouse then the mouse needs the cow. If someone is kind then they see the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow sees the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind($x, bool) ::: Is x kind?\nLikes($x, $y, bool) ::: Does x like y?\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nRough($x, bool) ::: Is x rough?\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\n\nFacts:\nKind(Bear, True) ::: The bear is kind.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nLikes(Cat, Bear, True) ::: The cat likes the bear.\nNeeds(Cat, Cow, True) ::: The cat needs the cow.\nSees(Cat, Bear, True) ::: The cat sees the bear.\nSees(Cat, Cow, True) ::: The cat sees the cow.\nRough(Cow, True) ::: The cow is rough.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nNeeds(Mouse, Bear, True) ::: The mouse needs the bear.\nSees(Mouse, Cow, True) ::: The mouse sees the cow.\n\nRules:\nSees($x, Bear, True) >>> Needs($x, Mouse, True) ::: If someone sees the bear then they need the mouse.\nNeeds($x, Bear, True) && Needs(Bear, Cow, True) >>> Needs(Bear, Cat, True) ::: If someone needs the bear and the bear needs the cow then the bear needs the cat.\nLikes($x, Cow, True) >>> Sees(Cow, Bear, True) ::: If someone likes the cow then the cow sees the bear.\nRed(Bear, True) && Needs(Bear, Cow, True) >>> Needs(Cow, Bear, True) ::: If the bear is red and the bear needs the cow then the cow needs the bear.\nNeeds($x, Mouse, True) >>> Big($x, True) ::: If someone needs the mouse then they are big.\nSees($x, Bear, True) && Big($x, True) >>> Likes($x, Cow, True) ::: If someone sees the bear and they are big then they like the cow.\nNeeds(Cat, Mouse, True) >>> Needs(Mouse, Cow, True) ::: If the cat needs the mouse then the mouse needs the cow.\nKind($x, True) >>> Sees($x, Cat, True) ::: If someone is kind then they see the cat.\n\nQuery:\nSees(Cow, Bear, True) ::: The cow sees the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-423_Q6",
    "context": "Anne is cold. Anne is furry. Anne is not quiet. Charlie is kind. Fiona is not quiet. Fiona is young. Harry is cold. Kind things are furry. Nice things are big. Furry things are nice. If something is young and furry then it is quiet. If Anne is quiet then Anne is cold. Kind, big things are young. If something is kind and not furry then it is not young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nFurry($x, bool) ::: Is x furry?\nQuiet($x, bool) ::: Is x quiet?\nKind($x, bool) ::: Is x kind?\nYoung($x, bool) ::: Is x young?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nFacts:\nCold(Anne, True) ::: Anne is cold.\nFurry(Anne, True) ::: Anne is furry.\nQuiet(Anne, False) ::: Anne is not quiet.\nKind(Charlie, True) ::: Charlie is kind.\nQuiet(Fiona, False) ::: Fiona is not quiet.\nYoung(Fiona, True) ::: Fiona is young.\nCold(Harry, True) ::: Harry is cold.\nRules:\nKind($x, True) >>> Furry($x, True) ::: Kind things are furry.\nNice($x, True) >>> Big($x, True) ::: Nice things are big.\nFurry($x, True) >>> Nice($x, True) ::: Furry things are nice.\nYoung($x, True) && Furry($x, True) >>> Quiet($x, True) ::: If something is young and furry then it is quiet.\nQuiet(Anne, True) >>> Cold(Anne, True) ::: If Anne is quiet then Anne is cold.\nKind($x, True) && Big($x, True) >>> Young($x, True) ::: Kind, big things are young.\nKind($x, True) && Furry($x, False) >>> Young($x, False) ::: If something is kind and not furry then it is not young.\nQuery:\nBig(Anne, False) ::: Anne is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1208_Q5",
    "context": "Anne is cold. Anne is not green. Anne is not kind. Anne is quiet. Anne is round. Bob is kind. Bob is round. Charlie is cold. Charlie is quiet. Charlie is round. Erin is furry. If something is quiet then it is rough. Cold things are round. If something is green then it is quiet. All cold things are quiet. Green things are quiet. If something is kind and green then it is furry. Furry things are green. If Bob is kind then Bob is not rough. If something is rough and green then it is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nGreen($x, bool) ::: Is x green?\nKind($x, bool) ::: Is x kind?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nRough($x, bool) ::: Is x rough?\n\nFacts:\nCold(Anne, True) ::: Anne is cold.\nGreen(Anne, False) ::: Anne is not green.\nKind(Anne, False) ::: Anne is not kind.\nQuiet(Anne, True) ::: Anne is quiet.\nRound(Anne, True) ::: Anne is round.\nKind(Bob, True) ::: Bob is kind.\nRound(Bob, True) ::: Bob is round.\nCold(Charlie, True) ::: Charlie is cold.\nQuiet(Charlie, True) ::: Charlie is quiet.\nRound(Charlie, True) ::: Charlie is round.\nFurry(Erin, True) ::: Erin is furry.\n\nRules:\nQuiet($x, True) >>> Rough($x, True) ::: If something is quiet then it is rough.\nCold($x, True) >>> Round($x, True) ::: Cold things are round.\nGreen($x, True) >>> Quiet($x, True) ::: If something is green then it is quiet.\nCold($x, True) >>> Quiet($x, True) ::: All cold things are quiet.\nGreen($x, True) >>> Quiet($x, True) ::: Green things are quiet.\nKind($x, True) && Green($x, True) >>> Furry($x, True) ::: If something is kind and green then it is furry.\nFurry($x, True) >>> Green($x, True) ::: Furry things are green.\nKind(Bob, True) >>> Rough(Bob, False) ::: If Bob is kind then Bob is not rough.\nRough($x, True) && Green($x, True) >>> Cold($x, True) ::: If something is rough and green then it is cold.\n\nQuery:\nQuiet(Erin, True) ::: Erin is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-430_Q21",
    "context": "The bear sees the squirrel. The bear visits the rabbit. The lion is not round. The lion does not like the rabbit. The lion visits the bear. The rabbit is not big. The rabbit is kind. The rabbit likes the squirrel. The rabbit sees the bear. The rabbit does not visit the bear. The squirrel visits the lion. If something is big and it visits the lion then the lion visits the rabbit. If something sees the lion then it does not like the lion. If something likes the squirrel then the squirrel visits the rabbit. If something sees the squirrel and it visits the squirrel then the squirrel does not see the lion. If something visits the lion then the lion is not round. If something sees the lion and it does not see the bear then it sees the squirrel. If something visits the rabbit then it sees the lion. If something sees the lion then it is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not see the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees($x, $y, bool) ::: Does x see y?\nVisits($x, $y, bool) ::: Does x visit y?\nRound($x, bool) ::: Is x round?\nLikes($x, $y, bool) ::: Does x like y?\nBig($x, bool) ::: Is x big?\nKind($x, bool) ::: Is x kind?\n\nFacts:\nSees(Bear, Squirrel, True) ::: The bear sees the squirrel.\nVisits(Bear, Rabbit, True) ::: The bear visits the rabbit.\nRound(Lion, False) ::: The lion is not round.\nLikes(Lion, Rabbit, False) ::: The lion does not like the rabbit.\nVisits(Lion, Bear, True) ::: The lion visits the bear.\nBig(Rabbit, False) ::: The rabbit is not big.\nKind(Rabbit, True) ::: The rabbit is kind.\nLikes(Rabbit, Squirrel, True) ::: The rabbit likes the squirrel.\nSees(Rabbit, Bear, True) ::: The rabbit sees the bear.\nVisits(Rabbit, Bear, False) ::: The rabbit does not visit the bear.\nVisits(Squirrel, Lion, True) ::: The squirrel visits the lion.\n\nRules:\nBig($x, True) && Visits($x, Lion, True) >>> Visits(Lion, Rabbit, True) ::: If something is big and it visits the lion then the lion visits the rabbit.\nSees($x, Lion, True) >>> Likes($x, Lion, False) ::: If something sees the lion then it does not like the lion.\nLikes($x, Squirrel, True) >>> Visits(Squirrel, Rabbit, True) ::: If something likes the squirrel then the squirrel visits the rabbit.\nSees($x, Squirrel, True) && Visits($x, Squirrel, True) >>> Sees(Squirrel, Lion, False) ::: If something sees the squirrel and it visits the squirrel then the squirrel does not see the lion.\nVisits($x, Lion, True) >>> Round(Lion, False) ::: If something visits the lion then the lion is not round.\nSees($x, Lion, True) && Sees($x, Bear, False) >>> Sees($x, Squirrel, True) ::: If something sees the lion and it does not see the bear then it sees the squirrel.\nVisits($x, Rabbit, True) >>> Sees($x, Lion, True) ::: If something visits the rabbit then it sees the lion.\nSees($x, Lion, True) >>> Big($x, True) ::: If something sees the lion then it is big.\n\nQuery:\nSees(Squirrel, Bear, False) ::: The squirrel does not see the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1176_Q18",
    "context": "Bob is not round. Charlie is furry. Charlie is nice. Charlie is smart. Erin is red. Fiona is furry. Fiona is young. All red people are not round. Red people are not blue. All young people are furry. If Erin is red and Erin is not round then Erin is nice. If someone is round and nice then they are not young. All smart people are young. Nice people are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nNice($x, bool) ::: Is x nice?\nSmart($x, bool) ::: Is x smart?\nRed($x, bool) ::: Is x red?\nYoung($x, bool) ::: Is x young?\nBlue($x, bool) ::: Is x blue?\nFacts:\nRound(Bob, False) ::: Bob is not round.\nFurry(Charlie, True) ::: Charlie is furry.\nNice(Charlie, True) ::: Charlie is nice.\nSmart(Charlie, True) ::: Charlie is smart.\nRed(Erin, True) ::: Erin is red.\nFurry(Fiona, True) ::: Fiona is furry.\nYoung(Fiona, True) ::: Fiona is young.\nRules:\nRed($x, True) >>> Round($x, False) ::: All red people are not round.\nRed($x, True) >>> Blue($x, False) ::: Red people are not blue.\nYoung($x, True) >>> Furry($x, True) ::: All young people are furry.\nRed(Erin, True) && Round(Erin, False) >>> Nice(Erin, True) ::: If Erin is red and Erin is not round then Erin is nice.\nRound($x, True) && Nice($x, True) >>> Young($x, False) ::: If someone is round and nice then they are not young.\nSmart($x, True) >>> Young($x, True) ::: All smart people are young.\nNice($x, True) >>> Smart($x, True) ::: Nice people are smart.\nQuery:\nRound(Charlie, True) ::: Charlie is round."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-604_Q11",
    "context": "The cat chases the dog. The cat chases the mouse. The cat chases the tiger. The cat eats the dog. The dog is big. The dog sees the cat. The mouse does not eat the cat. The mouse eats the tiger. The mouse does not see the tiger. The tiger eats the dog. The tiger is nice. If something is young and it eats the tiger then it eats the dog. If something sees the mouse and it eats the mouse then the mouse sees the tiger. If something sees the mouse then it is big. If something chases the dog then the dog chases the cat. If something chases the dog then it chases the cat. If something chases the tiger and the tiger eats the cat then the cat sees the mouse. If something sees the dog and it chases the tiger then the tiger chases the dog. If the tiger is green and the tiger is big then the tiger sees the dog. If something chases the cat then it sees the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger sees the dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nEats($x, $y, bool) ::: Does x eat y?\nSees($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nNice($x, bool) ::: Is x nice?\nGreen($x, bool) ::: Is x green?\nYoung($x, bool) ::: Is x young?\n\nFacts:\nChases(Cat, Dog, True) ::: The cat chases the dog.\nChases(Cat, Mouse, True) ::: The cat chases the mouse.\nChases(Cat, Tiger, True) ::: The cat chases the tiger.\nEats(Cat, Dog, True) ::: The cat eats the dog.\nBig(Dog, True) ::: The dog is big.\nSees(Dog, Cat, True) ::: The dog sees the cat.\nEats(Mouse, Tiger, True) ::: The mouse eats the tiger.\nEats(Mouse, Cat, False) ::: The mouse does not eat the cat.\nSees(Mouse, Tiger, False) ::: The mouse does not see the tiger.\nEats(Tiger, Dog, True) ::: The tiger eats the dog.\nNice(Tiger, True) ::: The tiger is nice.\n\nRules:\nYoung($x, True) && Eats($x, Tiger, True) >>> Eats($x, Dog, True) ::: If something is young and it eats the tiger then it eats the dog.\nSees($x, Mouse, True) && Eats($x, Mouse, True) >>> Sees(Mouse, Tiger, True) ::: If something sees the mouse and it eats the mouse then the mouse sees the tiger.\nSees($x, Mouse, True) >>> Big($x, True) ::: If something sees the mouse then it is big.\nChases($x, Dog, True) >>> Chases(Dog, Cat, True) ::: If something chases the dog then the dog chases the cat.\nChases($x, Dog, True) >>> Chases($x, Cat, True) ::: If something chases the dog then it chases the cat.\nChases($x, Tiger, True) && Eats(Tiger, Cat, True) >>> Sees(Cat, Mouse, True) ::: If something chases the tiger and the tiger eats the cat then the cat sees the mouse.\nSees($x, Dog, True) && Chases($x, Tiger, True) >>> Chases(Tiger, Dog, True) ::: If something sees the dog and it chases the tiger then the tiger chases the dog.\nGreen(Tiger, True) && Big(Tiger, True) >>> Sees(Tiger, Dog, True) ::: If the tiger is green and the tiger is big then the tiger sees the dog.\nChases($x, Cat, True) >>> Sees($x, Dog, True) ::: If something chases the cat then it sees the dog.\n\nQuery:\nSees(Tiger, Dog, True) ::: The tiger sees the dog."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-1036_Q11",
    "context": "The bear eats the squirrel. The bear is cold. The bear is rough. The bear visits the lion. The cat eats the lion. The lion likes the cat. The lion visits the bear. The squirrel eats the lion. The squirrel is cold. The squirrel is rough. The squirrel likes the bear. The squirrel visits the lion. Red people are green. If someone eats the lion then the lion is red. If someone is green and they like the lion then they eat the bear. If someone visits the bear then the bear likes the lion. If someone likes the squirrel and they like the lion then they visit the lion. If someone is green then they eat the squirrel. If someone likes the lion then they visit the bear. If someone visits the lion and the lion is green then they are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel eats the squirrel.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nCold($x, bool) ::: Is x cold?\nRough($x, bool) ::: Is x rough?\nVisits($x, $y, bool) ::: Does x visit y?\nLikes($x, $y, bool) ::: Does x like y?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\n\nFacts:\nEats(Bear, Squirrel, True) ::: The bear eats the squirrel.\nCold(Bear, True) ::: The bear is cold.\nRough(Bear, True) ::: The bear is rough.\nVisits(Bear, Lion, True) ::: The bear visits the lion.\nEats(Cat, Lion, True) ::: The cat eats the lion.\nLikes(Lion, Cat, True) ::: The lion likes the cat.\nVisits(Lion, Bear, True) ::: The lion visits the bear.\nEats(Squirrel, Lion, True) ::: The squirrel eats the lion.\nCold(Squirrel, True) ::: The squirrel is cold.\nRough(Squirrel, True) ::: The squirrel is rough.\nLikes(Squirrel, Bear, True) ::: The squirrel likes the bear.\nVisits(Squirrel, Lion, True) ::: The squirrel visits the lion.\n\nRules:\nRed($x, True) >>> Green($x, True) ::: Red people are green.\nEats($x, Lion, True) >>> Red(Lion, True) ::: If someone eats the lion then the lion is red.\nGreen($x, True) && Likes($x, Lion, True) >>> Eats($x, Bear, True) ::: If someone is green and they like the lion then they eat the bear.\nVisits($x, Bear, True) >>> Likes(Bear, Lion, True) ::: If someone visits the bear then the bear likes the lion.\nLikes($x, Squirrel, True) && Likes($x, Lion, True) >>> Visits($x, Lion, True) ::: If someone likes the squirrel and they like the lion then they visit the lion.\nGreen($x, True) >>> Eats($x, Squirrel, True) ::: If someone is green then they eat the squirrel.\nLikes($x, Lion, True) >>> Visits($x, Bear, True) ::: If someone likes the lion then they visit the bear.\nVisits($x, Lion, True) && Green(Lion, True) >>> Red($x, True) ::: If someone visits the lion and the lion is green then they are red.\n\nQuery:\nEats(Squirrel, Squirrel, True) ::: The squirrel eats the squirrel."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-785_Q10",
    "context": "Anne is rough. Anne is young. Bob is nice. Bob is red. Bob is young. Charlie is cold. Charlie is quiet. Charlie is red. Charlie is rough. Charlie is smart. Fiona is cold. Fiona is quiet. Cold people are young. Rough, young people are nice. Cold, red people are smart. Red people are smart. If someone is smart and quiet then they are cold. All rough, nice people are red. All red, quiet people are cold. All smart people are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough($x, bool) ::: Is x rough?\nYoung($x, bool) ::: Is x young?\nNice($x, bool) ::: Is x nice?\nRed($x, bool) ::: Is x red?\nCold($x, bool) ::: Is x cold?\nQuiet($x, bool) ::: Is x quiet?\nSmart($x, bool) ::: Is x smart?\n\nFacts:\nRough(Anne, True) ::: Anne is rough.\nYoung(Anne, True) ::: Anne is young.\nNice(Bob, True) ::: Bob is nice.\nRed(Bob, True) ::: Bob is red.\nYoung(Bob, True) ::: Bob is young.\nCold(Charlie, True) ::: Charlie is cold.\nQuiet(Charlie, True) ::: Charlie is quiet.\nRed(Charlie, True) ::: Charlie is red.\nRough(Charlie, True) ::: Charlie is rough.\nSmart(Charlie, True) ::: Charlie is smart.\nCold(Fiona, True) ::: Fiona is cold.\nQuiet(Fiona, True) ::: Fiona is quiet.\n\nRules:\nCold($x, True) >>> Young($x, True) ::: Cold people are young.\nRough($x, True) && Young($x, True) >>> Nice($x, True) ::: Rough, young people are nice.\nCold($x, True) && Red($x, True) >>> Smart($x, True) ::: Cold, red people are smart.\nRed($x, True) >>> Smart($x, True) ::: Red people are smart.\nSmart($x, True) && Quiet($x, True) >>> Cold($x, True) ::: If someone is smart and quiet then they are cold.\nRough($x, True) && Nice($x, True) >>> Red($x, True) ::: All rough, nice people are red.\nRed($x, True) && Quiet($x, True) >>> Cold($x, True) ::: All red, quiet people are cold.\nSmart($x, True) >>> Quiet($x, True) ::: All smart people are quiet.\n\nQuery:\nQuiet(Anne, False) ::: Anne is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-115_Q11",
    "context": "The bald eagle is blue. The bald eagle is red. The bald eagle likes the lion. The bald eagle needs the bear. The bald eagle needs the dog. The bear is not blue. The bear is nice. The bear needs the dog. The dog chases the bald eagle. The dog is red. The dog does not need the bear. The lion does not like the bear. If something likes the lion and it is not red then it chases the lion. If something is red and it needs the bald eagle then the bald eagle needs the lion. If something is round then it does not like the dog. If the bald eagle needs the dog then the dog is round. If something likes the dog then it likes the bald eagle. If something chases the lion and the lion likes the dog then the dog does not like the lion. If the bear likes the lion then the lion likes the dog. If something likes the bear then the bear likes the lion. If something is round then it likes the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion likes the bald eagle.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nLikes($x, $y, bool) ::: Does x like y?\nNeeds($x, $y, bool) ::: Does x need y?\nChases($x, $y, bool) ::: Does x chase y?\nNice($x, bool) ::: Is x nice?\nRound($x, bool) ::: Is x round?\n\nFacts:\nBlue(BaldEagle, True) ::: The bald eagle is blue.\nRed(BaldEagle, True) ::: The bald eagle is red.\nLikes(BaldEagle, Lion, True) ::: The bald eagle likes the lion.\nNeeds(BaldEagle, Bear, True) ::: The bald eagle needs the bear.\nNeeds(BaldEagle, Dog, True) ::: The bald eagle needs the dog.\nBlue(Bear, False) ::: The bear is not blue.\nNice(Bear, True) ::: The bear is nice.\nNeeds(Bear, Dog, True) ::: The bear needs the dog.\nChases(Dog, BaldEagle, True) ::: The dog chases the bald eagle.\nRed(Dog, True) ::: The dog is red.\nNeeds(Dog, Bear, False) ::: The dog does not need the bear.\nLikes(Lion, Bear, False) ::: The lion does not like the bear.\n\nRules:\nLikes($x, Lion, True) && Red($x, False) >>> Chases($x, Lion, True) ::: If something likes the lion and it is not red then it chases the lion.\nRed($x, True) && Needs($x, BaldEagle, True) >>> Needs(BaldEagle, Lion, True) ::: If something is red and it needs the bald eagle then the bald eagle needs the lion.\nRound($x, True) >>> Likes($x, Dog, False) ::: If something is round then it does not like the dog.\nNeeds(BaldEagle, Dog, True) >>> Round(Dog, True) ::: If the bald eagle needs the dog then the dog is round.\nLikes($x, Dog, True) >>> Likes($x, BaldEagle, True) ::: If something likes the dog then it likes the bald eagle.\nChases($x, Lion, True) && Likes(Lion, Dog, True) >>> Likes(Dog, Lion, False) ::: If something chases the lion and the lion likes the dog then the dog does not like the lion.\nLikes(Bear, Lion, True) >>> Likes(Lion, Dog, True) ::: If the bear likes the lion then the lion likes the dog.\nLikes($x, Bear, True) >>> Likes(Bear, Lion, True) ::: If something likes the bear then the bear likes the lion.\nRound($x, True) >>> Likes($x, Bear, True) ::: If something is round then it likes the bear.\n\nQuery:\nLikes(Lion, BaldEagle, True) ::: The lion likes the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-780_Q5",
    "context": "Anne is big. Anne is blue. Anne is kind. Anne is nice. Charlie is big. Charlie is blue. Charlie is nice. Dave is blue. Dave is cold. Dave is nice. Harry is blue. If Charlie is cold then Charlie is nice. If Harry is kind and Harry is nice then Harry is quiet. All blue things are cold. If something is quiet then it is kind. All kind things are big. Cold things are nice. If Harry is nice and Harry is big then Harry is kind. If something is nice then it is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is kind.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nBlue($x, bool) ::: Is x blue?\nKind($x, bool) ::: Is x kind?\nNice($x, bool) ::: Is x nice?\nCold($x, bool) ::: Is x cold?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nBig(Anne, True) ::: Anne is big.\nBlue(Anne, True) ::: Anne is blue.\nKind(Anne, True) ::: Anne is kind.\nNice(Anne, True) ::: Anne is nice.\nBig(Charlie, True) ::: Charlie is big.\nBlue(Charlie, True) ::: Charlie is blue.\nNice(Charlie, True) ::: Charlie is nice.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nNice(Dave, True) ::: Dave is nice.\nBlue(Harry, True) ::: Harry is blue.\nRules:\nCold(Charlie, True) >>> Nice(Charlie, True) ::: If Charlie is cold then Charlie is nice.\nKind(Harry, True) && Nice(Harry, True) >>> Quiet(Harry, True) ::: If Harry is kind and Harry is nice then Harry is quiet.\nBlue($x, True) >>> Cold($x, True) ::: All blue things are cold.\nQuiet($x, True) >>> Kind($x, True) ::: If something is quiet then it is kind.\nKind($x, True) >>> Big($x, True) ::: All kind things are big.\nCold($x, True) >>> Nice($x, True) ::: Cold things are nice.\nNice(Harry, True) && Big(Harry, True) >>> Kind(Harry, True) ::: If Harry is nice and Harry is big then Harry is kind.\nNice($x, True) >>> Quiet($x, True) ::: If something is nice then it is quiet.\nQuery:\nKind(Charlie, True) ::: Charlie is kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-203_Q7",
    "context": "Bob is nice. Bob is round. Bob is young. Dave is round. Erin is big. Erin is red. Gary is young. All round things are nice. All nice, big things are white. If something is big and white then it is round. Young things are nice. Big, red things are young. All nice things are quiet. All quiet things are big. Young, quiet things are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice($x, bool) ::: Is x nice?\nRound($x, bool) ::: Is x round?\nYoung($x, bool) ::: Is x young?\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nWhite($x, bool) ::: Is x white?\nQuiet($x, bool) ::: Is x quiet?\nFacts:\nNice(Bob, True) ::: Bob is nice.\nRound(Bob, True) ::: Bob is round.\nYoung(Bob, True) ::: Bob is young.\nRound(Dave, True) ::: Dave is round.\nBig(Erin, True) ::: Erin is big.\nRed(Erin, True) ::: Erin is red.\nYoung(Gary, True) ::: Gary is young.\nRules:\nRound($x, True) >>> Nice($x, True) ::: All round things are nice.\nNice($x, True) && Big($x, True) >>> White($x, True) ::: All nice, big things are white.\nBig($x, True) && White($x, True) >>> Round($x, True) ::: If something is big and white then it is round.\nYoung($x, True) >>> Nice($x, True) ::: Young things are nice.\nBig($x, True) && Red($x, True) >>> Young($x, True) ::: Big, red things are young.\nNice($x, True) >>> Quiet($x, True) ::: All nice things are quiet.\nQuiet($x, True) >>> Big($x, True) ::: All quiet things are big.\nYoung($x, True) && Quiet($x, True) >>> Red($x, True) ::: Young, quiet things are red.\nQuery:\nBig(Gary, True) ::: Gary is big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-785_Q10",
    "context": "The bald eagle is round. The bear needs the bald eagle. The cat eats the bear. The cat does not eat the lion. The cat is round. The lion needs the bear. The lion sees the bald eagle. If something is round then it sees the bald eagle. If something is red and not young then it needs the lion. If something sees the bald eagle then it needs the lion. If something needs the lion and it needs the bear then the bear is round. If the lion is round and the lion does not eat the cat then the cat eats the bald eagle. If something needs the lion and the lion sees the bald eagle then it is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not need the lion.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound($x, bool) ::: Is x round?\nNeeds($x, $y, bool) ::: Does x need y?\nEats($x, $y, bool) ::: Does x eat y?\nSees($x, $y, bool) ::: Does x see y?\nRed($x, bool) ::: Is x red?\nYoung($x, bool) ::: Is x young?\n\nFacts:\nRound(BaldEagle, True) ::: The bald eagle is round.\nNeeds(Bear, BaldEagle, True) ::: The bear needs the bald eagle.\nEats(Cat, Bear, True) ::: The cat eats the bear.\nEats(Cat, Lion, False) ::: The cat does not eat the lion.\nRound(Cat, True) ::: The cat is round.\nNeeds(Lion, Bear, True) ::: The lion needs the bear.\nSees(Lion, BaldEagle, True) ::: The lion sees the bald eagle.\n\nRules:\nRound($x, True) >>> Sees($x, BaldEagle, True) ::: If something is round then it sees the bald eagle.\nRed($x, True) && Young($x, False) >>> Needs($x, Lion, True) ::: If something is red and not young then it needs the lion.\nSees($x, BaldEagle, True) >>> Needs($x, Lion, True) ::: If something sees the bald eagle then it needs the lion.\nNeeds($x, Lion, True) && Needs($x, Bear, True) >>> Round(Bear, True) ::: If something needs the lion and it needs the bear then the bear is round.\nRound(Lion, True) && Eats(Lion, Cat, False) >>> Eats(Cat, BaldEagle, True) ::: If the lion is round and the lion does not eat the cat then the cat eats the bald eagle.\nNeeds($x, Lion, True) && Sees(Lion, BaldEagle, True) >>> Red($x, True) ::: If something needs the lion and the lion sees the bald eagle then it is red.\n\nQuery:\nNeeds(Bear, Lion, False) ::: The bear does not need the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-882_Q2",
    "context": "Bob is nice. Dave is big. Erin is furry. Erin is nice. Erin is rough. Harry is cold. Harry is white. All rough people are furry. If someone is rough and cold then they are white. If someone is nice then they are big. Furry, nice people are big. All big people are red. All nice, big people are rough. All furry, big people are cold. All cold, white people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nRough($x, bool) ::: Is x rough?\nCold($x, bool) ::: Is x cold?\nWhite($x, bool) ::: Is x white?\nRed($x, bool) ::: Is x red?\nFacts:\nNice(Bob, True) ::: Bob is nice.\nBig(Dave, True) ::: Dave is big.\nFurry(Erin, True) ::: Erin is furry.\nNice(Erin, True) ::: Erin is nice.\nRough(Erin, True) ::: Erin is rough.\nCold(Harry, True) ::: Harry is cold.\nWhite(Harry, True) ::: Harry is white.\nRules:\nRough($x, True) >>> Furry($x, True) ::: All rough people are furry.\nRough($x, True) && Cold($x, True) >>> White($x, True) ::: If someone is rough and cold then they are white.\nNice($x, True) >>> Big($x, True) ::: If someone is nice then they are big.\nFurry($x, True) && Nice($x, True) >>> Big($x, True) ::: Furry, nice people are big.\nBig($x, True) >>> Red($x, True) ::: All big people are red.\nNice($x, True) && Big($x, True) >>> Rough($x, True) ::: All nice, big people are rough.\nFurry($x, True) && Big($x, True) >>> Cold($x, True) ::: All furry, big people are cold.\nCold($x, True) && White($x, True) >>> Rough($x, True) ::: All cold, white people are rough.\nQuery:\nWhite(Harry, False) ::: Harry is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-999_Q1",
    "context": "Anne is big. Anne is furry. Bob is blue. Bob is green. Bob is young. Charlie is furry. Charlie is green. Charlie is red. Gary is furry. Gary is green. Gary is young. Furry, green things are blue. All big things are green. Red, furry things are blue. All big, blue things are nice. If Bob is nice and Bob is big then Bob is red. If Gary is furry then Gary is blue. All nice, big things are young. All nice things are young. Blue, young things are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nBlue($x, bool) ::: Is x blue?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nNice($x, bool) ::: Is x nice?\nYoung($x, bool) ::: Is x young?\nFacts:\nBig(Anne, True) ::: Anne is big.\nFurry(Anne, True) ::: Anne is furry.\nBlue(Bob, True) ::: Bob is blue.\nGreen(Bob, True) ::: Bob is green.\nYoung(Bob, True) ::: Bob is young.\nFurry(Charlie, True) ::: Charlie is furry.\nGreen(Charlie, True) ::: Charlie is green.\nRed(Charlie, True) ::: Charlie is red.\nFurry(Gary, True) ::: Gary is furry.\nGreen(Gary, True) ::: Gary is green.\nYoung(Gary, True) ::: Gary is young.\nRules:\nFurry($x, True) && Green($x, True) >>> Blue($x, True) ::: Furry, green things are blue.\nBig($x, True) >>> Green($x, True) ::: All big things are green.\nRed($x, True) && Furry($x, True) >>> Blue($x, True) ::: Red, furry things are blue.\nBig($x, True) && Blue($x, True) >>> Nice($x, True) ::: All big, blue things are nice.\nNice(Bob, True) && Big(Bob, True) >>> Red(Bob, True) ::: If Bob is nice and Bob is big then Bob is red.\nFurry(Gary, True) >>> Blue(Gary, True) ::: If Gary is furry then Gary is blue.\nNice($x, True) && Big($x, True) >>> Young($x, True) ::: All nice, big things are young.\nNice($x, True) >>> Young($x, True) ::: All nice things are young.\nBlue($x, True) && Young($x, True) >>> Red($x, True) ::: Blue, young things are red.\nQuery:\nFurry(Gary, True) ::: Gary is furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1149_Q18",
    "context": "Anne is kind. Charlie is not big. Charlie is green. Erin is green. Erin is not kind. Harry is big. Harry is green. All big, green things are young. Big things are young. All red things are green. If something is kind then it is not red. All furry things are kind. If Harry is young then Harry is cold. If something is young and cold then it is furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is furry.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind($x, bool) ::: Is x kind?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nYoung($x, bool) ::: Is x young?\nFurry($x, bool) ::: Is x furry?\nCold($x, bool) ::: Is x cold?\n\nFacts:\nKind(Anne, True) ::: Anne is kind.\nBig(Charlie, False) ::: Charlie is not big.\nGreen(Charlie, True) ::: Charlie is green.\nGreen(Erin, True) ::: Erin is green.\nKind(Erin, False) ::: Erin is not kind.\nBig(Harry, True) ::: Harry is big.\nGreen(Harry, True) ::: Harry is green.\n\nRules:\nBig($x, True) && Green($x, True) >>> Young($x, True) ::: All big, green things are young.\nBig($x, True) >>> Young($x, True) ::: Big things are young.\nRed($x, True) >>> Green($x, True) ::: All red things are green.\nKind($x, True) >>> Red($x, False) ::: If something is kind then it is not red.\nFurry($x, True) >>> Kind($x, True) ::: All furry things are kind.\nYoung(Harry, True) >>> Cold(Harry, True) ::: If Harry is young then Harry is cold.\nYoung($x, True) && Cold($x, True) >>> Furry($x, True) ::: If something is young and cold then it is furry.\n\nQuery:\nFurry(Erin, True) ::: Erin is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-829_Q7",
    "context": "The cow eats the lion. The cow eats the mouse. The cow is green. The cow visits the lion. The cow visits the mouse. The lion eats the cow. The lion eats the rabbit. The lion is big. The lion is green. The lion is round. The mouse eats the lion. The mouse is big. The mouse visits the cow. The rabbit is round. The rabbit needs the cow. The rabbit visits the lion. If someone eats the lion and the lion is green then they are blue. If someone visits the cow and they eat the rabbit then the rabbit is cold. If someone needs the mouse and the mouse needs the rabbit then the mouse needs the cow. If someone visits the cow and they are big then the cow visits the mouse. If someone is green and they need the rabbit then they eat the rabbit. If someone is blue then they eat the rabbit. All cold people are blue. If someone visits the cow then the cow is green. If someone eats the lion then they are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats($x, $y, bool) ::: Does x eat y?\nGreen($x, bool) ::: Is x green?\nVisits($x, $y, bool) ::: Does x visit y?\nBig($x, bool) ::: Is x big?\nRound($x, bool) ::: Is x round?\nNeeds($x, $y, bool) ::: Does x need y?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\n\nFacts:\nEats(Cow, Lion, True) ::: The cow eats the lion.\nEats(Cow, Mouse, True) ::: The cow eats the mouse.\nGreen(Cow, True) ::: The cow is green.\nVisits(Cow, Lion, True) ::: The cow visits the lion.\nVisits(Cow, Mouse, True) ::: The cow visits the mouse.\nEats(Lion, Cow, True) ::: The lion eats the cow.\nEats(Lion, Rabbit, True) ::: The lion eats the rabbit.\nBig(Lion, True) ::: The lion is big.\nGreen(Lion, True) ::: The lion is green.\nRound(Lion, True) ::: The lion is round.\nEats(Mouse, Lion, True) ::: The mouse eats the lion.\nBig(Mouse, True) ::: The mouse is big.\nVisits(Mouse, Cow, True) ::: The mouse visits the cow.\nRound(Rabbit, True) ::: The rabbit is round.\nNeeds(Rabbit, Cow, True) ::: The rabbit needs the cow.\nVisits(Rabbit, Lion, True) ::: The rabbit visits the lion.\n\nRules:\nEats($x, Lion, True) && Green(Lion, True) >>> Blue($x, True) ::: If someone eats the lion and the lion is green then they are blue.\nVisits($x, Cow, True) && Eats($x, Rabbit, True) >>> Cold(Rabbit, True) ::: If someone visits the cow and they eat the rabbit then the rabbit is cold.\nNeeds($x, Mouse, True) && Needs(Mouse, Rabbit, True) >>> Needs(Mouse, Cow, True) ::: If someone needs the mouse and the mouse needs the rabbit then the mouse needs the cow.\nVisits($x, Cow, True) && Big($x, True) >>> Visits(Cow, Mouse, True) ::: If someone visits the cow and they are big then the cow visits the mouse.\nGreen($x, True) && Needs($x, Rabbit, True) >>> Eats($x, Rabbit, True) ::: If someone is green and they need the rabbit then they eat the rabbit.\nBlue($x, True) >>> Eats($x, Rabbit, True) ::: If someone is blue then they eat the rabbit.\nCold($x, True) >>> Blue($x, True) ::: All cold people are blue.\nVisits($x, Cow, True) >>> Green(Cow, True) ::: If someone visits the cow then the cow is green.\nEats($x, Lion, True) >>> Cold($x, True) ::: If someone eats the lion then they are cold.\n\nQuery:\nCold(Rabbit, True) ::: The rabbit is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-305_Q10",
    "context": "Anne is quiet. Bob is not rough. Gary is big. Gary is kind. Gary is rough. Gary is young. Harry is young. All big people are furry. Young people are furry. All quiet, kind people are furry. If Harry is furry and Harry is quiet then Harry is round. Rough, kind people are quiet. Young, rough people are kind. All quiet, furry people are round. Furry people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nRough($x, bool) ::: Is x rough?\nBig($x, bool) ::: Is x big?\nKind($x, bool) ::: Is x kind?\nYoung($x, bool) ::: Is x young?\nFurry($x, bool) ::: Is x furry?\nRound($x, bool) ::: Is x round?\n\nFacts:\nQuiet(Anne, True) ::: Anne is quiet.\nRough(Bob, False) ::: Bob is not rough.\nBig(Gary, True) ::: Gary is big.\nKind(Gary, True) ::: Gary is kind.\nRough(Gary, True) ::: Gary is rough.\nYoung(Gary, True) ::: Gary is young.\nYoung(Harry, True) ::: Harry is young.\n\nRules:\nBig($x, True) >>> Furry($x, True) ::: All big people are furry.\nYoung($x, True) >>> Furry($x, True) ::: Young people are furry.\nQuiet($x, True) && Kind($x, True) >>> Furry($x, True) ::: All quiet, kind people are furry.\nFurry(Harry, True) && Quiet(Harry, True) >>> Round(Harry, True) ::: If Harry is furry and Harry is quiet then Harry is round.\nRough($x, True) && Kind($x, True) >>> Quiet($x, True) ::: Rough, kind people are quiet.\nYoung($x, True) && Rough($x, True) >>> Kind($x, True) ::: Young, rough people are kind.\nQuiet($x, True) && Furry($x, True) >>> Round($x, True) ::: All quiet, furry people are round.\nFurry($x, True) >>> Rough($x, True) ::: Furry people are rough.\n\nQuery:\nQuiet(Harry, False) ::: Harry is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-151_Q4",
    "context": "The cat chases the tiger. The cat is red. The lion is nice. The lion is red. The lion sees the cat. The lion sees the rabbit. The lion sees the tiger. The rabbit chases the tiger. The rabbit sees the tiger. The tiger chases the cat. The tiger chases the rabbit. The tiger is nice. If someone is red and they eat the rabbit then they are blue. If the lion eats the cat and the lion chases the rabbit then the cat is kind. If the rabbit eats the tiger then the tiger is nice. If someone is rough then they see the cat. If someone is nice and they chase the rabbit then the rabbit is nice. If someone eats the cat and they are kind then they see the tiger. If someone is nice and they chase the tiger then they are blue. If someone is blue then they eat the cat. If someone eats the cat then the cat is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases($x, $y, bool) ::: Does x chase y?\nRed($x, bool) ::: Is x red?\nNice($x, bool) ::: Is x nice?\nSees($x, $y, bool) ::: Does x see y?\nBlue($x, bool) ::: Is x blue?\nEats($x, $y, bool) ::: Does x eat y?\nKind($x, bool) ::: Is x kind?\nRough($x, bool) ::: Is x rough?\n\nFacts:\nChases(Cat, Tiger, True) ::: The cat chases the tiger.\nRed(Cat, True) ::: The cat is red.\nNice(Lion, True) ::: The lion is nice.\nRed(Lion, True) ::: The lion is red.\nSees(Lion, Cat, True) ::: The lion sees the cat.\nSees(Lion, Rabbit, True) ::: The lion sees the rabbit.\nSees(Lion, Tiger, True) ::: The lion sees the tiger.\nChases(Rabbit, Tiger, True) ::: The rabbit chases the tiger.\nSees(Rabbit, Tiger, True) ::: The rabbit sees the tiger.\nChases(Tiger, Cat, True) ::: The tiger chases the cat.\nChases(Tiger, Rabbit, True) ::: The tiger chases the rabbit.\nNice(Tiger, True) ::: The tiger is nice.\n\nRules:\nRed($x, True) && Eats($x, Rabbit, True) >>> Blue($x, True) ::: If someone is red and they eat the rabbit then they are blue.\nEats(Lion, Cat, True) && Chases(Lion, Rabbit, True) >>> Kind(Cat, True) ::: If the lion eats the cat and the lion chases the rabbit then the cat is kind.\nEats(Rabbit, Tiger, True) >>> Nice(Tiger, True) ::: If the rabbit eats the tiger then the tiger is nice.\nRough($x, True) >>> Sees($x, Cat, True) ::: If someone is rough then they see the cat.\nNice($x, True) && Chases($x, Rabbit, True) >>> Nice(Rabbit, True) ::: If someone is nice and they chase the rabbit then the rabbit is nice.\nEats($x, Cat, True) && Kind($x, True) >>> Sees($x, Tiger, True) ::: If someone eats the cat and they are kind then they see the tiger.\nNice($x, True) && Chases($x, Tiger, True) >>> Blue($x, True) ::: If someone is nice and they chase the tiger then they are blue.\nBlue($x, True) >>> Eats($x, Cat, True) ::: If someone is blue then they eat the cat.\nEats($x, Cat, True) >>> Blue(Cat, True) ::: If someone eats the cat then the cat is blue.\n\nQuery:\nNice(Rabbit, False) ::: The rabbit is not nice."
    ]
  }
]
